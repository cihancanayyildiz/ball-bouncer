
PWM_Coocox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bc8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08007d50  08007d50  00017d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007dbc  08007dbc  00017dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007dc4  08007dc4  00017dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007dc8  08007dc8  00017dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e4  20000000  08007dcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000201e4  2**0
                  CONTENTS
  8 .bss          0000194c  200001e4  200001e4  000201e4  2**2
                  ALLOC
  9 ._user_heap_stack 00006000  20001b30  20001b30  000201e4  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 11 .debug_info   00016945  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000030d8  00000000  00000000  00036b59  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000010d8  00000000  00000000  00039c38  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000f70  00000000  00000000  0003ad10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000775a  00000000  00000000  0003bc80  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000051df  00000000  00000000  000433da  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000485b9  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004870  00000000  00000000  00048638  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001e4 	.word	0x200001e4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007d38 	.word	0x08007d38

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001e8 	.word	0x200001e8
 80001c4:	08007d38 	.word	0x08007d38

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__aeabi_d2iz>:
 800095c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000960:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000964:	d215      	bcs.n	8000992 <__aeabi_d2iz+0x36>
 8000966:	d511      	bpl.n	800098c <__aeabi_d2iz+0x30>
 8000968:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800096c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000970:	d912      	bls.n	8000998 <__aeabi_d2iz+0x3c>
 8000972:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000976:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800097a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800097e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000982:	fa23 f002 	lsr.w	r0, r3, r2
 8000986:	bf18      	it	ne
 8000988:	4240      	negne	r0, r0
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d105      	bne.n	80009a4 <__aeabi_d2iz+0x48>
 8000998:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800099c:	bf08      	it	eq
 800099e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop

080009ac <__aeabi_uldivmod>:
 80009ac:	b953      	cbnz	r3, 80009c4 <__aeabi_uldivmod+0x18>
 80009ae:	b94a      	cbnz	r2, 80009c4 <__aeabi_uldivmod+0x18>
 80009b0:	2900      	cmp	r1, #0
 80009b2:	bf08      	it	eq
 80009b4:	2800      	cmpeq	r0, #0
 80009b6:	bf1c      	itt	ne
 80009b8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80009bc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80009c0:	f000 b97a 	b.w	8000cb8 <__aeabi_idiv0>
 80009c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009cc:	f000 f806 	bl	80009dc <__udivmoddi4>
 80009d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d8:	b004      	add	sp, #16
 80009da:	4770      	bx	lr

080009dc <__udivmoddi4>:
 80009dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e0:	468c      	mov	ip, r1
 80009e2:	460d      	mov	r5, r1
 80009e4:	4604      	mov	r4, r0
 80009e6:	9e08      	ldr	r6, [sp, #32]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d151      	bne.n	8000a90 <__udivmoddi4+0xb4>
 80009ec:	428a      	cmp	r2, r1
 80009ee:	4617      	mov	r7, r2
 80009f0:	d96d      	bls.n	8000ace <__udivmoddi4+0xf2>
 80009f2:	fab2 fe82 	clz	lr, r2
 80009f6:	f1be 0f00 	cmp.w	lr, #0
 80009fa:	d00b      	beq.n	8000a14 <__udivmoddi4+0x38>
 80009fc:	f1ce 0c20 	rsb	ip, lr, #32
 8000a00:	fa01 f50e 	lsl.w	r5, r1, lr
 8000a04:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000a08:	fa02 f70e 	lsl.w	r7, r2, lr
 8000a0c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000a10:	fa00 f40e 	lsl.w	r4, r0, lr
 8000a14:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000a18:	0c25      	lsrs	r5, r4, #16
 8000a1a:	fbbc f8fa 	udiv	r8, ip, sl
 8000a1e:	fa1f f987 	uxth.w	r9, r7
 8000a22:	fb0a cc18 	mls	ip, sl, r8, ip
 8000a26:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000a2a:	fb08 f309 	mul.w	r3, r8, r9
 8000a2e:	42ab      	cmp	r3, r5
 8000a30:	d90a      	bls.n	8000a48 <__udivmoddi4+0x6c>
 8000a32:	19ed      	adds	r5, r5, r7
 8000a34:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000a38:	f080 8123 	bcs.w	8000c82 <__udivmoddi4+0x2a6>
 8000a3c:	42ab      	cmp	r3, r5
 8000a3e:	f240 8120 	bls.w	8000c82 <__udivmoddi4+0x2a6>
 8000a42:	f1a8 0802 	sub.w	r8, r8, #2
 8000a46:	443d      	add	r5, r7
 8000a48:	1aed      	subs	r5, r5, r3
 8000a4a:	b2a4      	uxth	r4, r4
 8000a4c:	fbb5 f0fa 	udiv	r0, r5, sl
 8000a50:	fb0a 5510 	mls	r5, sl, r0, r5
 8000a54:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a58:	fb00 f909 	mul.w	r9, r0, r9
 8000a5c:	45a1      	cmp	r9, r4
 8000a5e:	d909      	bls.n	8000a74 <__udivmoddi4+0x98>
 8000a60:	19e4      	adds	r4, r4, r7
 8000a62:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000a66:	f080 810a 	bcs.w	8000c7e <__udivmoddi4+0x2a2>
 8000a6a:	45a1      	cmp	r9, r4
 8000a6c:	f240 8107 	bls.w	8000c7e <__udivmoddi4+0x2a2>
 8000a70:	3802      	subs	r0, #2
 8000a72:	443c      	add	r4, r7
 8000a74:	eba4 0409 	sub.w	r4, r4, r9
 8000a78:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	2e00      	cmp	r6, #0
 8000a80:	d061      	beq.n	8000b46 <__udivmoddi4+0x16a>
 8000a82:	fa24 f40e 	lsr.w	r4, r4, lr
 8000a86:	2300      	movs	r3, #0
 8000a88:	6034      	str	r4, [r6, #0]
 8000a8a:	6073      	str	r3, [r6, #4]
 8000a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a90:	428b      	cmp	r3, r1
 8000a92:	d907      	bls.n	8000aa4 <__udivmoddi4+0xc8>
 8000a94:	2e00      	cmp	r6, #0
 8000a96:	d054      	beq.n	8000b42 <__udivmoddi4+0x166>
 8000a98:	2100      	movs	r1, #0
 8000a9a:	e886 0021 	stmia.w	r6, {r0, r5}
 8000a9e:	4608      	mov	r0, r1
 8000aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa4:	fab3 f183 	clz	r1, r3
 8000aa8:	2900      	cmp	r1, #0
 8000aaa:	f040 808e 	bne.w	8000bca <__udivmoddi4+0x1ee>
 8000aae:	42ab      	cmp	r3, r5
 8000ab0:	d302      	bcc.n	8000ab8 <__udivmoddi4+0xdc>
 8000ab2:	4282      	cmp	r2, r0
 8000ab4:	f200 80fa 	bhi.w	8000cac <__udivmoddi4+0x2d0>
 8000ab8:	1a84      	subs	r4, r0, r2
 8000aba:	eb65 0503 	sbc.w	r5, r5, r3
 8000abe:	2001      	movs	r0, #1
 8000ac0:	46ac      	mov	ip, r5
 8000ac2:	2e00      	cmp	r6, #0
 8000ac4:	d03f      	beq.n	8000b46 <__udivmoddi4+0x16a>
 8000ac6:	e886 1010 	stmia.w	r6, {r4, ip}
 8000aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ace:	b912      	cbnz	r2, 8000ad6 <__udivmoddi4+0xfa>
 8000ad0:	2701      	movs	r7, #1
 8000ad2:	fbb7 f7f2 	udiv	r7, r7, r2
 8000ad6:	fab7 fe87 	clz	lr, r7
 8000ada:	f1be 0f00 	cmp.w	lr, #0
 8000ade:	d134      	bne.n	8000b4a <__udivmoddi4+0x16e>
 8000ae0:	1beb      	subs	r3, r5, r7
 8000ae2:	0c3a      	lsrs	r2, r7, #16
 8000ae4:	fa1f fc87 	uxth.w	ip, r7
 8000ae8:	2101      	movs	r1, #1
 8000aea:	fbb3 f8f2 	udiv	r8, r3, r2
 8000aee:	0c25      	lsrs	r5, r4, #16
 8000af0:	fb02 3318 	mls	r3, r2, r8, r3
 8000af4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000af8:	fb0c f308 	mul.w	r3, ip, r8
 8000afc:	42ab      	cmp	r3, r5
 8000afe:	d907      	bls.n	8000b10 <__udivmoddi4+0x134>
 8000b00:	19ed      	adds	r5, r5, r7
 8000b02:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000b06:	d202      	bcs.n	8000b0e <__udivmoddi4+0x132>
 8000b08:	42ab      	cmp	r3, r5
 8000b0a:	f200 80d1 	bhi.w	8000cb0 <__udivmoddi4+0x2d4>
 8000b0e:	4680      	mov	r8, r0
 8000b10:	1aed      	subs	r5, r5, r3
 8000b12:	b2a3      	uxth	r3, r4
 8000b14:	fbb5 f0f2 	udiv	r0, r5, r2
 8000b18:	fb02 5510 	mls	r5, r2, r0, r5
 8000b1c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000b20:	fb0c fc00 	mul.w	ip, ip, r0
 8000b24:	45a4      	cmp	ip, r4
 8000b26:	d907      	bls.n	8000b38 <__udivmoddi4+0x15c>
 8000b28:	19e4      	adds	r4, r4, r7
 8000b2a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b2e:	d202      	bcs.n	8000b36 <__udivmoddi4+0x15a>
 8000b30:	45a4      	cmp	ip, r4
 8000b32:	f200 80b8 	bhi.w	8000ca6 <__udivmoddi4+0x2ca>
 8000b36:	4618      	mov	r0, r3
 8000b38:	eba4 040c 	sub.w	r4, r4, ip
 8000b3c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b40:	e79d      	b.n	8000a7e <__udivmoddi4+0xa2>
 8000b42:	4631      	mov	r1, r6
 8000b44:	4630      	mov	r0, r6
 8000b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4a:	f1ce 0420 	rsb	r4, lr, #32
 8000b4e:	fa05 f30e 	lsl.w	r3, r5, lr
 8000b52:	fa07 f70e 	lsl.w	r7, r7, lr
 8000b56:	fa20 f804 	lsr.w	r8, r0, r4
 8000b5a:	0c3a      	lsrs	r2, r7, #16
 8000b5c:	fa25 f404 	lsr.w	r4, r5, r4
 8000b60:	ea48 0803 	orr.w	r8, r8, r3
 8000b64:	fbb4 f1f2 	udiv	r1, r4, r2
 8000b68:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000b6c:	fb02 4411 	mls	r4, r2, r1, r4
 8000b70:	fa1f fc87 	uxth.w	ip, r7
 8000b74:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000b78:	fb01 f30c 	mul.w	r3, r1, ip
 8000b7c:	42ab      	cmp	r3, r5
 8000b7e:	fa00 f40e 	lsl.w	r4, r0, lr
 8000b82:	d909      	bls.n	8000b98 <__udivmoddi4+0x1bc>
 8000b84:	19ed      	adds	r5, r5, r7
 8000b86:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 8000b8a:	f080 808a 	bcs.w	8000ca2 <__udivmoddi4+0x2c6>
 8000b8e:	42ab      	cmp	r3, r5
 8000b90:	f240 8087 	bls.w	8000ca2 <__udivmoddi4+0x2c6>
 8000b94:	3902      	subs	r1, #2
 8000b96:	443d      	add	r5, r7
 8000b98:	1aeb      	subs	r3, r5, r3
 8000b9a:	fa1f f588 	uxth.w	r5, r8
 8000b9e:	fbb3 f0f2 	udiv	r0, r3, r2
 8000ba2:	fb02 3310 	mls	r3, r2, r0, r3
 8000ba6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000baa:	fb00 f30c 	mul.w	r3, r0, ip
 8000bae:	42ab      	cmp	r3, r5
 8000bb0:	d907      	bls.n	8000bc2 <__udivmoddi4+0x1e6>
 8000bb2:	19ed      	adds	r5, r5, r7
 8000bb4:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000bb8:	d26f      	bcs.n	8000c9a <__udivmoddi4+0x2be>
 8000bba:	42ab      	cmp	r3, r5
 8000bbc:	d96d      	bls.n	8000c9a <__udivmoddi4+0x2be>
 8000bbe:	3802      	subs	r0, #2
 8000bc0:	443d      	add	r5, r7
 8000bc2:	1aeb      	subs	r3, r5, r3
 8000bc4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bc8:	e78f      	b.n	8000aea <__udivmoddi4+0x10e>
 8000bca:	f1c1 0720 	rsb	r7, r1, #32
 8000bce:	fa22 f807 	lsr.w	r8, r2, r7
 8000bd2:	408b      	lsls	r3, r1
 8000bd4:	fa05 f401 	lsl.w	r4, r5, r1
 8000bd8:	ea48 0303 	orr.w	r3, r8, r3
 8000bdc:	fa20 fe07 	lsr.w	lr, r0, r7
 8000be0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000be4:	40fd      	lsrs	r5, r7
 8000be6:	ea4e 0e04 	orr.w	lr, lr, r4
 8000bea:	fbb5 f9fc 	udiv	r9, r5, ip
 8000bee:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000bf2:	fb0c 5519 	mls	r5, ip, r9, r5
 8000bf6:	fa1f f883 	uxth.w	r8, r3
 8000bfa:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000bfe:	fb09 f408 	mul.w	r4, r9, r8
 8000c02:	42ac      	cmp	r4, r5
 8000c04:	fa02 f201 	lsl.w	r2, r2, r1
 8000c08:	fa00 fa01 	lsl.w	sl, r0, r1
 8000c0c:	d908      	bls.n	8000c20 <__udivmoddi4+0x244>
 8000c0e:	18ed      	adds	r5, r5, r3
 8000c10:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000c14:	d243      	bcs.n	8000c9e <__udivmoddi4+0x2c2>
 8000c16:	42ac      	cmp	r4, r5
 8000c18:	d941      	bls.n	8000c9e <__udivmoddi4+0x2c2>
 8000c1a:	f1a9 0902 	sub.w	r9, r9, #2
 8000c1e:	441d      	add	r5, r3
 8000c20:	1b2d      	subs	r5, r5, r4
 8000c22:	fa1f fe8e 	uxth.w	lr, lr
 8000c26:	fbb5 f0fc 	udiv	r0, r5, ip
 8000c2a:	fb0c 5510 	mls	r5, ip, r0, r5
 8000c2e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000c32:	fb00 f808 	mul.w	r8, r0, r8
 8000c36:	45a0      	cmp	r8, r4
 8000c38:	d907      	bls.n	8000c4a <__udivmoddi4+0x26e>
 8000c3a:	18e4      	adds	r4, r4, r3
 8000c3c:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000c40:	d229      	bcs.n	8000c96 <__udivmoddi4+0x2ba>
 8000c42:	45a0      	cmp	r8, r4
 8000c44:	d927      	bls.n	8000c96 <__udivmoddi4+0x2ba>
 8000c46:	3802      	subs	r0, #2
 8000c48:	441c      	add	r4, r3
 8000c4a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c4e:	eba4 0408 	sub.w	r4, r4, r8
 8000c52:	fba0 8902 	umull	r8, r9, r0, r2
 8000c56:	454c      	cmp	r4, r9
 8000c58:	46c6      	mov	lr, r8
 8000c5a:	464d      	mov	r5, r9
 8000c5c:	d315      	bcc.n	8000c8a <__udivmoddi4+0x2ae>
 8000c5e:	d012      	beq.n	8000c86 <__udivmoddi4+0x2aa>
 8000c60:	b156      	cbz	r6, 8000c78 <__udivmoddi4+0x29c>
 8000c62:	ebba 030e 	subs.w	r3, sl, lr
 8000c66:	eb64 0405 	sbc.w	r4, r4, r5
 8000c6a:	fa04 f707 	lsl.w	r7, r4, r7
 8000c6e:	40cb      	lsrs	r3, r1
 8000c70:	431f      	orrs	r7, r3
 8000c72:	40cc      	lsrs	r4, r1
 8000c74:	6037      	str	r7, [r6, #0]
 8000c76:	6074      	str	r4, [r6, #4]
 8000c78:	2100      	movs	r1, #0
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	e6f8      	b.n	8000a74 <__udivmoddi4+0x98>
 8000c82:	4690      	mov	r8, r2
 8000c84:	e6e0      	b.n	8000a48 <__udivmoddi4+0x6c>
 8000c86:	45c2      	cmp	sl, r8
 8000c88:	d2ea      	bcs.n	8000c60 <__udivmoddi4+0x284>
 8000c8a:	ebb8 0e02 	subs.w	lr, r8, r2
 8000c8e:	eb69 0503 	sbc.w	r5, r9, r3
 8000c92:	3801      	subs	r0, #1
 8000c94:	e7e4      	b.n	8000c60 <__udivmoddi4+0x284>
 8000c96:	4628      	mov	r0, r5
 8000c98:	e7d7      	b.n	8000c4a <__udivmoddi4+0x26e>
 8000c9a:	4640      	mov	r0, r8
 8000c9c:	e791      	b.n	8000bc2 <__udivmoddi4+0x1e6>
 8000c9e:	4681      	mov	r9, r0
 8000ca0:	e7be      	b.n	8000c20 <__udivmoddi4+0x244>
 8000ca2:	4601      	mov	r1, r0
 8000ca4:	e778      	b.n	8000b98 <__udivmoddi4+0x1bc>
 8000ca6:	3802      	subs	r0, #2
 8000ca8:	443c      	add	r4, r7
 8000caa:	e745      	b.n	8000b38 <__udivmoddi4+0x15c>
 8000cac:	4608      	mov	r0, r1
 8000cae:	e708      	b.n	8000ac2 <__udivmoddi4+0xe6>
 8000cb0:	f1a8 0802 	sub.w	r8, r8, #2
 8000cb4:	443d      	add	r5, r7
 8000cb6:	e72b      	b.n	8000b10 <__udivmoddi4+0x134>

08000cb8 <__aeabi_idiv0>:
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop

08000cbc <map>:
};
*/


int map(int st1, int fn1, int st2, int fn2, int value)
{
 8000cbc:	b5b0      	push	{r4, r5, r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	60f8      	str	r0, [r7, #12]
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	607a      	str	r2, [r7, #4]
 8000cc8:	603b      	str	r3, [r7, #0]
    return (1.0*(value-st1))/((fn1-st1)*1.0) * (fn2-st2)+st2;
 8000cca:	6a3a      	ldr	r2, [r7, #32]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	1ad3      	subs	r3, r2, r3
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff fbcb 	bl	800046c <__aeabi_i2d>
 8000cd6:	4604      	mov	r4, r0
 8000cd8:	460d      	mov	r5, r1
 8000cda:	68ba      	ldr	r2, [r7, #8]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	1ad3      	subs	r3, r2, r3
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff fbc3 	bl	800046c <__aeabi_i2d>
 8000ce6:	4602      	mov	r2, r0
 8000ce8:	460b      	mov	r3, r1
 8000cea:	4620      	mov	r0, r4
 8000cec:	4629      	mov	r1, r5
 8000cee:	f7ff fd4d 	bl	800078c <__aeabi_ddiv>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	460c      	mov	r4, r1
 8000cf6:	4625      	mov	r5, r4
 8000cf8:	461c      	mov	r4, r3
 8000cfa:	683a      	ldr	r2, [r7, #0]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	1ad3      	subs	r3, r2, r3
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff fbb3 	bl	800046c <__aeabi_i2d>
 8000d06:	4602      	mov	r2, r0
 8000d08:	460b      	mov	r3, r1
 8000d0a:	4620      	mov	r0, r4
 8000d0c:	4629      	mov	r1, r5
 8000d0e:	f7ff fc13 	bl	8000538 <__aeabi_dmul>
 8000d12:	4603      	mov	r3, r0
 8000d14:	460c      	mov	r4, r1
 8000d16:	4625      	mov	r5, r4
 8000d18:	461c      	mov	r4, r3
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f7ff fba6 	bl	800046c <__aeabi_i2d>
 8000d20:	4602      	mov	r2, r0
 8000d22:	460b      	mov	r3, r1
 8000d24:	4620      	mov	r0, r4
 8000d26:	4629      	mov	r1, r5
 8000d28:	f7ff fa54 	bl	80001d4 <__adddf3>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	460c      	mov	r4, r1
 8000d30:	4618      	mov	r0, r3
 8000d32:	4621      	mov	r1, r4
 8000d34:	f7ff fe12 	bl	800095c <__aeabi_d2iz>
 8000d38:	4603      	mov	r3, r0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3710      	adds	r7, #16
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000d44 <servo_write>:

void servo_write(int f,int s,int t,int d)
{
 8000d44:	b590      	push	{r4, r7, lr}
 8000d46:	b087      	sub	sp, #28
 8000d48:	af02      	add	r7, sp, #8
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
 8000d50:	603b      	str	r3, [r7, #0]
	htim1.Instance->CCR1 = map(0,180,50,250,f);
 8000d52:	4b1a      	ldr	r3, [pc, #104]	; (8000dbc <servo_write+0x78>)
 8000d54:	681c      	ldr	r4, [r3, #0]
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	9300      	str	r3, [sp, #0]
 8000d5a:	23fa      	movs	r3, #250	; 0xfa
 8000d5c:	2232      	movs	r2, #50	; 0x32
 8000d5e:	21b4      	movs	r1, #180	; 0xb4
 8000d60:	2000      	movs	r0, #0
 8000d62:	f7ff ffab 	bl	8000cbc <map>
 8000d66:	4603      	mov	r3, r0
 8000d68:	6363      	str	r3, [r4, #52]	; 0x34
	htim1.Instance->CCR2 = map(0,180,50,250,s);
 8000d6a:	4b14      	ldr	r3, [pc, #80]	; (8000dbc <servo_write+0x78>)
 8000d6c:	681c      	ldr	r4, [r3, #0]
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	9300      	str	r3, [sp, #0]
 8000d72:	23fa      	movs	r3, #250	; 0xfa
 8000d74:	2232      	movs	r2, #50	; 0x32
 8000d76:	21b4      	movs	r1, #180	; 0xb4
 8000d78:	2000      	movs	r0, #0
 8000d7a:	f7ff ff9f 	bl	8000cbc <map>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	63a3      	str	r3, [r4, #56]	; 0x38
	htim1.Instance->CCR3 = map(0,180,50,250,t);
 8000d82:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <servo_write+0x78>)
 8000d84:	681c      	ldr	r4, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	9300      	str	r3, [sp, #0]
 8000d8a:	23fa      	movs	r3, #250	; 0xfa
 8000d8c:	2232      	movs	r2, #50	; 0x32
 8000d8e:	21b4      	movs	r1, #180	; 0xb4
 8000d90:	2000      	movs	r0, #0
 8000d92:	f7ff ff93 	bl	8000cbc <map>
 8000d96:	4603      	mov	r3, r0
 8000d98:	63e3      	str	r3, [r4, #60]	; 0x3c
	htim1.Instance->CCR4 = map(0,180,50,250,d);
 8000d9a:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <servo_write+0x78>)
 8000d9c:	681c      	ldr	r4, [r3, #0]
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	9300      	str	r3, [sp, #0]
 8000da2:	23fa      	movs	r3, #250	; 0xfa
 8000da4:	2232      	movs	r2, #50	; 0x32
 8000da6:	21b4      	movs	r1, #180	; 0xb4
 8000da8:	2000      	movs	r0, #0
 8000daa:	f7ff ff87 	bl	8000cbc <map>
 8000dae:	4603      	mov	r3, r0
 8000db0:	6423      	str	r3, [r4, #64]	; 0x40
}
 8000db2:	bf00      	nop
 8000db4:	3714      	adds	r7, #20
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd90      	pop	{r4, r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000210 	.word	0x20000210

08000dc0 <servo_sweep>:

void servo_sweep(/*struct Angles * ang*/)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b088      	sub	sp, #32
 8000dc4:	af00      	add	r7, sp, #0
	int firstAngle = atoi(ang->ang1);
	int secondAngle = atoi(ang->ang2);
	int thirdAngle = atoi(ang->ang3);
	int fourthAngle = atoi(ang->ang4);
*/
	int firstAngle = 10;
 8000dc6:	230a      	movs	r3, #10
 8000dc8:	61fb      	str	r3, [r7, #28]
	int secondAngle = 10;
 8000dca:	230a      	movs	r3, #10
 8000dcc:	61bb      	str	r3, [r7, #24]
	int thirdAngle = 10;
 8000dce:	230a      	movs	r3, #10
 8000dd0:	617b      	str	r3, [r7, #20]
	int fourthAngle = 10;
 8000dd2:	230a      	movs	r3, #10
 8000dd4:	613b      	str	r3, [r7, #16]

	int f = 10+(int)((120*(90-firstAngle))/(90));
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	f1c3 025a 	rsb	r2, r3, #90	; 0x5a
 8000ddc:	4613      	mov	r3, r2
 8000dde:	011b      	lsls	r3, r3, #4
 8000de0:	1a9b      	subs	r3, r3, r2
 8000de2:	00db      	lsls	r3, r3, #3
 8000de4:	4a4b      	ldr	r2, [pc, #300]	; (8000f14 <servo_sweep+0x154>)
 8000de6:	fb82 1203 	smull	r1, r2, r2, r3
 8000dea:	441a      	add	r2, r3
 8000dec:	1192      	asrs	r2, r2, #6
 8000dee:	17db      	asrs	r3, r3, #31
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	330a      	adds	r3, #10
 8000df4:	60fb      	str	r3, [r7, #12]
	int s = 10+(int)((120*(90-secondAngle))/(90));
 8000df6:	69bb      	ldr	r3, [r7, #24]
 8000df8:	f1c3 025a 	rsb	r2, r3, #90	; 0x5a
 8000dfc:	4613      	mov	r3, r2
 8000dfe:	011b      	lsls	r3, r3, #4
 8000e00:	1a9b      	subs	r3, r3, r2
 8000e02:	00db      	lsls	r3, r3, #3
 8000e04:	4a43      	ldr	r2, [pc, #268]	; (8000f14 <servo_sweep+0x154>)
 8000e06:	fb82 1203 	smull	r1, r2, r2, r3
 8000e0a:	441a      	add	r2, r3
 8000e0c:	1192      	asrs	r2, r2, #6
 8000e0e:	17db      	asrs	r3, r3, #31
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	330a      	adds	r3, #10
 8000e14:	60bb      	str	r3, [r7, #8]
	int t = 10+(int)((120*(90-thirdAngle))/(90));
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	f1c3 025a 	rsb	r2, r3, #90	; 0x5a
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	011b      	lsls	r3, r3, #4
 8000e20:	1a9b      	subs	r3, r3, r2
 8000e22:	00db      	lsls	r3, r3, #3
 8000e24:	4a3b      	ldr	r2, [pc, #236]	; (8000f14 <servo_sweep+0x154>)
 8000e26:	fb82 1203 	smull	r1, r2, r2, r3
 8000e2a:	441a      	add	r2, r3
 8000e2c:	1192      	asrs	r2, r2, #6
 8000e2e:	17db      	asrs	r3, r3, #31
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	330a      	adds	r3, #10
 8000e34:	607b      	str	r3, [r7, #4]
	int d = 10+(int)((120*(90-fourthAngle))/(90));
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	f1c3 025a 	rsb	r2, r3, #90	; 0x5a
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	011b      	lsls	r3, r3, #4
 8000e40:	1a9b      	subs	r3, r3, r2
 8000e42:	00db      	lsls	r3, r3, #3
 8000e44:	4a33      	ldr	r2, [pc, #204]	; (8000f14 <servo_sweep+0x154>)
 8000e46:	fb82 1203 	smull	r1, r2, r2, r3
 8000e4a:	441a      	add	r2, r3
 8000e4c:	1192      	asrs	r2, r2, #6
 8000e4e:	17db      	asrs	r3, r3, #31
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	330a      	adds	r3, #10
 8000e54:	603b      	str	r3, [r7, #0]

	servo_write(f,s,t,d);
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	687a      	ldr	r2, [r7, #4]
 8000e5a:	68b9      	ldr	r1, [r7, #8]
 8000e5c:	68f8      	ldr	r0, [r7, #12]
 8000e5e:	f7ff ff71 	bl	8000d44 <servo_write>
	HAL_Delay(150);
 8000e62:	2096      	movs	r0, #150	; 0x96
 8000e64:	f000 fb92 	bl	800158c <HAL_Delay>
	firstAngle = 20;
 8000e68:	2314      	movs	r3, #20
 8000e6a:	61fb      	str	r3, [r7, #28]
	secondAngle = 20;
 8000e6c:	2314      	movs	r3, #20
 8000e6e:	61bb      	str	r3, [r7, #24]
	thirdAngle = 20;
 8000e70:	2314      	movs	r3, #20
 8000e72:	617b      	str	r3, [r7, #20]
	fourthAngle = 20;
 8000e74:	2314      	movs	r3, #20
 8000e76:	613b      	str	r3, [r7, #16]

	f = 10+(int)((120*(90-firstAngle))/(90));
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	f1c3 025a 	rsb	r2, r3, #90	; 0x5a
 8000e7e:	4613      	mov	r3, r2
 8000e80:	011b      	lsls	r3, r3, #4
 8000e82:	1a9b      	subs	r3, r3, r2
 8000e84:	00db      	lsls	r3, r3, #3
 8000e86:	4a23      	ldr	r2, [pc, #140]	; (8000f14 <servo_sweep+0x154>)
 8000e88:	fb82 1203 	smull	r1, r2, r2, r3
 8000e8c:	441a      	add	r2, r3
 8000e8e:	1192      	asrs	r2, r2, #6
 8000e90:	17db      	asrs	r3, r3, #31
 8000e92:	1ad3      	subs	r3, r2, r3
 8000e94:	330a      	adds	r3, #10
 8000e96:	60fb      	str	r3, [r7, #12]
	s = 10+(int)((120*(90-secondAngle))/(90));
 8000e98:	69bb      	ldr	r3, [r7, #24]
 8000e9a:	f1c3 025a 	rsb	r2, r3, #90	; 0x5a
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	011b      	lsls	r3, r3, #4
 8000ea2:	1a9b      	subs	r3, r3, r2
 8000ea4:	00db      	lsls	r3, r3, #3
 8000ea6:	4a1b      	ldr	r2, [pc, #108]	; (8000f14 <servo_sweep+0x154>)
 8000ea8:	fb82 1203 	smull	r1, r2, r2, r3
 8000eac:	441a      	add	r2, r3
 8000eae:	1192      	asrs	r2, r2, #6
 8000eb0:	17db      	asrs	r3, r3, #31
 8000eb2:	1ad3      	subs	r3, r2, r3
 8000eb4:	330a      	adds	r3, #10
 8000eb6:	60bb      	str	r3, [r7, #8]
	t = 10+(int)((120*(90-thirdAngle))/(90));
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	f1c3 025a 	rsb	r2, r3, #90	; 0x5a
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	011b      	lsls	r3, r3, #4
 8000ec2:	1a9b      	subs	r3, r3, r2
 8000ec4:	00db      	lsls	r3, r3, #3
 8000ec6:	4a13      	ldr	r2, [pc, #76]	; (8000f14 <servo_sweep+0x154>)
 8000ec8:	fb82 1203 	smull	r1, r2, r2, r3
 8000ecc:	441a      	add	r2, r3
 8000ece:	1192      	asrs	r2, r2, #6
 8000ed0:	17db      	asrs	r3, r3, #31
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	330a      	adds	r3, #10
 8000ed6:	607b      	str	r3, [r7, #4]
	d = 10+(int)((120*(90-fourthAngle))/(90));
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	f1c3 025a 	rsb	r2, r3, #90	; 0x5a
 8000ede:	4613      	mov	r3, r2
 8000ee0:	011b      	lsls	r3, r3, #4
 8000ee2:	1a9b      	subs	r3, r3, r2
 8000ee4:	00db      	lsls	r3, r3, #3
 8000ee6:	4a0b      	ldr	r2, [pc, #44]	; (8000f14 <servo_sweep+0x154>)
 8000ee8:	fb82 1203 	smull	r1, r2, r2, r3
 8000eec:	441a      	add	r2, r3
 8000eee:	1192      	asrs	r2, r2, #6
 8000ef0:	17db      	asrs	r3, r3, #31
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	330a      	adds	r3, #10
 8000ef6:	603b      	str	r3, [r7, #0]

	servo_write(f,s,t,d);
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	68b9      	ldr	r1, [r7, #8]
 8000efe:	68f8      	ldr	r0, [r7, #12]
 8000f00:	f7ff ff20 	bl	8000d44 <servo_write>
	HAL_Delay(150);
 8000f04:	2096      	movs	r0, #150	; 0x96
 8000f06:	f000 fb41 	bl	800158c <HAL_Delay>

}
 8000f0a:	bf00      	nop
 8000f0c:	3720      	adds	r7, #32
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	b60b60b7 	.word	0xb60b60b7

08000f18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f18:	b5b0      	push	{r4, r5, r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint8_t myBuf[20] = "Selamun Aleykum \r\n";
 8000f1e:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <main+0x5c>)
 8000f20:	1d3c      	adds	r4, r7, #4
 8000f22:	461d      	mov	r5, r3
 8000f24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f28:	682b      	ldr	r3, [r5, #0]
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	8022      	strh	r2, [r4, #0]
 8000f2e:	3402      	adds	r4, #2
 8000f30:	0c1b      	lsrs	r3, r3, #16
 8000f32:	7023      	strb	r3, [r4, #0]
 8000f34:	2300      	movs	r3, #0
 8000f36:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f38:	f000 fab6 	bl	80014a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f3c:	f000 f81e 	bl	8000f7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f40:	f000 f94a 	bl	80011d8 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000f44:	f000 f882 	bl	800104c <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 8000f48:	f006 f8ea 	bl	8007120 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	480a      	ldr	r0, [pc, #40]	; (8000f78 <main+0x60>)
 8000f50:	f002 fc14 	bl	800377c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000f54:	2104      	movs	r1, #4
 8000f56:	4808      	ldr	r0, [pc, #32]	; (8000f78 <main+0x60>)
 8000f58:	f002 fc10 	bl	800377c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000f5c:	2108      	movs	r1, #8
 8000f5e:	4806      	ldr	r0, [pc, #24]	; (8000f78 <main+0x60>)
 8000f60:	f002 fc0c 	bl	800377c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000f64:	210c      	movs	r1, #12
 8000f66:	4804      	ldr	r0, [pc, #16]	; (8000f78 <main+0x60>)
 8000f68:	f002 fc08 	bl	800377c <HAL_TIM_PWM_Start>


  while (1)
  {

	 servo_sweep();
 8000f6c:	f7ff ff28 	bl	8000dc0 <servo_sweep>
 8000f70:	e7fc      	b.n	8000f6c <main+0x54>
 8000f72:	bf00      	nop
 8000f74:	08007d50 	.word	0x08007d50
 8000f78:	20000210 	.word	0x20000210

08000f7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b094      	sub	sp, #80	; 0x50
 8000f80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f82:	f107 0320 	add.w	r3, r7, #32
 8000f86:	2230      	movs	r2, #48	; 0x30
 8000f88:	2100      	movs	r1, #0
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f006 fe0e 	bl	8007bac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f90:	f107 030c 	add.w	r3, r7, #12
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	4a27      	ldr	r2, [pc, #156]	; (8001044 <SystemClock_Config+0xc8>)
 8000fa6:	4b27      	ldr	r3, [pc, #156]	; (8001044 <SystemClock_Config+0xc8>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000faa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fae:	6413      	str	r3, [r2, #64]	; 0x40
 8000fb0:	4b24      	ldr	r3, [pc, #144]	; (8001044 <SystemClock_Config+0xc8>)
 8000fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb8:	60bb      	str	r3, [r7, #8]
 8000fba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	607b      	str	r3, [r7, #4]
 8000fc0:	4a21      	ldr	r2, [pc, #132]	; (8001048 <SystemClock_Config+0xcc>)
 8000fc2:	4b21      	ldr	r3, [pc, #132]	; (8001048 <SystemClock_Config+0xcc>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fca:	6013      	str	r3, [r2, #0]
 8000fcc:	4b1e      	ldr	r3, [pc, #120]	; (8001048 <SystemClock_Config+0xcc>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fd4:	607b      	str	r3, [r7, #4]
 8000fd6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fdc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fe0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fe6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fec:	2304      	movs	r3, #4
 8000fee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000ff0:	2348      	movs	r3, #72	; 0x48
 8000ff2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ffc:	f107 0320 	add.w	r3, r7, #32
 8001000:	4618      	mov	r0, r3
 8001002:	f001 ff21 	bl	8002e48 <HAL_RCC_OscConfig>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800100c:	f000 f947 	bl	800129e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001010:	230f      	movs	r3, #15
 8001012:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001014:	2302      	movs	r3, #2
 8001016:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800101c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001020:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001022:	2300      	movs	r3, #0
 8001024:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001026:	f107 030c 	add.w	r3, r7, #12
 800102a:	2102      	movs	r1, #2
 800102c:	4618      	mov	r0, r3
 800102e:	f002 f97b 	bl	8003328 <HAL_RCC_ClockConfig>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001038:	f000 f931 	bl	800129e <Error_Handler>
  }
}
 800103c:	bf00      	nop
 800103e:	3750      	adds	r7, #80	; 0x50
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40023800 	.word	0x40023800
 8001048:	40007000 	.word	0x40007000

0800104c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b096      	sub	sp, #88	; 0x58
 8001050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001052:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	609a      	str	r2, [r3, #8]
 800105e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001060:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800106a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	605a      	str	r2, [r3, #4]
 8001074:	609a      	str	r2, [r3, #8]
 8001076:	60da      	str	r2, [r3, #12]
 8001078:	611a      	str	r2, [r3, #16]
 800107a:	615a      	str	r2, [r3, #20]
 800107c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800107e:	1d3b      	adds	r3, r7, #4
 8001080:	2220      	movs	r2, #32
 8001082:	2100      	movs	r1, #0
 8001084:	4618      	mov	r0, r3
 8001086:	f006 fd91 	bl	8007bac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800108a:	4b51      	ldr	r3, [pc, #324]	; (80011d0 <MX_TIM1_Init+0x184>)
 800108c:	4a51      	ldr	r2, [pc, #324]	; (80011d4 <MX_TIM1_Init+0x188>)
 800108e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 360;
 8001090:	4b4f      	ldr	r3, [pc, #316]	; (80011d0 <MX_TIM1_Init+0x184>)
 8001092:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001096:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001098:	4b4d      	ldr	r3, [pc, #308]	; (80011d0 <MX_TIM1_Init+0x184>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 800109e:	4b4c      	ldr	r3, [pc, #304]	; (80011d0 <MX_TIM1_Init+0x184>)
 80010a0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80010a4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010a6:	4b4a      	ldr	r3, [pc, #296]	; (80011d0 <MX_TIM1_Init+0x184>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010ac:	4b48      	ldr	r3, [pc, #288]	; (80011d0 <MX_TIM1_Init+0x184>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010b2:	4b47      	ldr	r3, [pc, #284]	; (80011d0 <MX_TIM1_Init+0x184>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010b8:	4845      	ldr	r0, [pc, #276]	; (80011d0 <MX_TIM1_Init+0x184>)
 80010ba:	f002 faff 	bl	80036bc <HAL_TIM_Base_Init>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80010c4:	f000 f8eb 	bl	800129e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010cc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010d2:	4619      	mov	r1, r3
 80010d4:	483e      	ldr	r0, [pc, #248]	; (80011d0 <MX_TIM1_Init+0x184>)
 80010d6:	f002 fc55 	bl	8003984 <HAL_TIM_ConfigClockSource>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80010e0:	f000 f8dd 	bl	800129e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010e4:	483a      	ldr	r0, [pc, #232]	; (80011d0 <MX_TIM1_Init+0x184>)
 80010e6:	f002 fb14 	bl	8003712 <HAL_TIM_PWM_Init>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80010f0:	f000 f8d5 	bl	800129e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010f4:	2300      	movs	r3, #0
 80010f6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010f8:	2300      	movs	r3, #0
 80010fa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001100:	4619      	mov	r1, r3
 8001102:	4833      	ldr	r0, [pc, #204]	; (80011d0 <MX_TIM1_Init+0x184>)
 8001104:	f003 f806 	bl	8004114 <HAL_TIMEx_MasterConfigSynchronization>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800110e:	f000 f8c6 	bl	800129e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001112:	2360      	movs	r3, #96	; 0x60
 8001114:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 50;
 8001116:	2332      	movs	r3, #50	; 0x32
 8001118:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800111a:	2300      	movs	r3, #0
 800111c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800111e:	2300      	movs	r3, #0
 8001120:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001122:	2300      	movs	r3, #0
 8001124:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001126:	2300      	movs	r3, #0
 8001128:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800112a:	2300      	movs	r3, #0
 800112c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800112e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001132:	2200      	movs	r2, #0
 8001134:	4619      	mov	r1, r3
 8001136:	4826      	ldr	r0, [pc, #152]	; (80011d0 <MX_TIM1_Init+0x184>)
 8001138:	f002 fb5e 	bl	80037f8 <HAL_TIM_PWM_ConfigChannel>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001142:	f000 f8ac 	bl	800129e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001146:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800114a:	2204      	movs	r2, #4
 800114c:	4619      	mov	r1, r3
 800114e:	4820      	ldr	r0, [pc, #128]	; (80011d0 <MX_TIM1_Init+0x184>)
 8001150:	f002 fb52 	bl	80037f8 <HAL_TIM_PWM_ConfigChannel>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 800115a:	f000 f8a0 	bl	800129e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800115e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001162:	2208      	movs	r2, #8
 8001164:	4619      	mov	r1, r3
 8001166:	481a      	ldr	r0, [pc, #104]	; (80011d0 <MX_TIM1_Init+0x184>)
 8001168:	f002 fb46 	bl	80037f8 <HAL_TIM_PWM_ConfigChannel>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001172:	f000 f894 	bl	800129e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001176:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800117a:	220c      	movs	r2, #12
 800117c:	4619      	mov	r1, r3
 800117e:	4814      	ldr	r0, [pc, #80]	; (80011d0 <MX_TIM1_Init+0x184>)
 8001180:	f002 fb3a 	bl	80037f8 <HAL_TIM_PWM_ConfigChannel>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800118a:	f000 f888 	bl	800129e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800118e:	2300      	movs	r3, #0
 8001190:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001192:	2300      	movs	r3, #0
 8001194:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001196:	2300      	movs	r3, #0
 8001198:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800119a:	2300      	movs	r3, #0
 800119c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800119e:	2300      	movs	r3, #0
 80011a0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011a6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011a8:	2300      	movs	r3, #0
 80011aa:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011ac:	1d3b      	adds	r3, r7, #4
 80011ae:	4619      	mov	r1, r3
 80011b0:	4807      	ldr	r0, [pc, #28]	; (80011d0 <MX_TIM1_Init+0x184>)
 80011b2:	f003 f82b 	bl	800420c <HAL_TIMEx_ConfigBreakDeadTime>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 80011bc:	f000 f86f 	bl	800129e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80011c0:	4803      	ldr	r0, [pc, #12]	; (80011d0 <MX_TIM1_Init+0x184>)
 80011c2:	f000 f8bd 	bl	8001340 <HAL_TIM_MspPostInit>

}
 80011c6:	bf00      	nop
 80011c8:	3758      	adds	r7, #88	; 0x58
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000210 	.word	0x20000210
 80011d4:	40010000 	.word	0x40010000

080011d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	4a17      	ldr	r2, [pc, #92]	; (8001240 <MX_GPIO_Init+0x68>)
 80011e4:	4b16      	ldr	r3, [pc, #88]	; (8001240 <MX_GPIO_Init+0x68>)
 80011e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011ec:	6313      	str	r3, [r2, #48]	; 0x30
 80011ee:	4b14      	ldr	r3, [pc, #80]	; (8001240 <MX_GPIO_Init+0x68>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	4a10      	ldr	r2, [pc, #64]	; (8001240 <MX_GPIO_Init+0x68>)
 8001200:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <MX_GPIO_Init+0x68>)
 8001202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001204:	f043 0310 	orr.w	r3, r3, #16
 8001208:	6313      	str	r3, [r2, #48]	; 0x30
 800120a:	4b0d      	ldr	r3, [pc, #52]	; (8001240 <MX_GPIO_Init+0x68>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	f003 0310 	and.w	r3, r3, #16
 8001212:	60bb      	str	r3, [r7, #8]
 8001214:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	607b      	str	r3, [r7, #4]
 800121a:	4a09      	ldr	r2, [pc, #36]	; (8001240 <MX_GPIO_Init+0x68>)
 800121c:	4b08      	ldr	r3, [pc, #32]	; (8001240 <MX_GPIO_Init+0x68>)
 800121e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b06      	ldr	r3, [pc, #24]	; (8001240 <MX_GPIO_Init+0x68>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	607b      	str	r3, [r7, #4]
 8001230:	687b      	ldr	r3, [r7, #4]

}
 8001232:	bf00      	nop
 8001234:	3714      	adds	r7, #20
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	40023800 	.word	0x40023800

08001244 <CDC_ReceiveCallBack>:


/* USER CODE BEGIN 4 */
void CDC_ReceiveCallBack(uint8_t * buf,uint32_t len){
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
	struct Angles ang;
	ang.ang1[0] = (char)buf[0];
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	723b      	strb	r3, [r7, #8]
	ang.ang1[1] = (char)buf[1];
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	3301      	adds	r3, #1
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	727b      	strb	r3, [r7, #9]
	ang.ang2[0] = (char)buf[2];
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3302      	adds	r3, #2
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	72bb      	strb	r3, [r7, #10]
	ang.ang2[1] = (char)buf[3];
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	3303      	adds	r3, #3
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	72fb      	strb	r3, [r7, #11]
	ang.ang3[0] = (char)buf[4];
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3304      	adds	r3, #4
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	733b      	strb	r3, [r7, #12]
	ang.ang3[1] = (char)buf[5];
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3305      	adds	r3, #5
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	737b      	strb	r3, [r7, #13]
	ang.ang4[0] = (char)buf[6];
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	3306      	adds	r3, #6
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	73bb      	strb	r3, [r7, #14]
	ang.ang4[1] = (char)buf[7];
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3307      	adds	r3, #7
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	73fb      	strb	r3, [r7, #15]

    //HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12);
  	servo_sweep(&ang);
 800128c:	f107 0308 	add.w	r3, r7, #8
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff fd95 	bl	8000dc0 <servo_sweep>
}
 8001296:	bf00      	nop
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800129e:	b480      	push	{r7}
 80012a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80012a2:	bf00      	nop
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	607b      	str	r3, [r7, #4]
 80012b6:	4a10      	ldr	r2, [pc, #64]	; (80012f8 <HAL_MspInit+0x4c>)
 80012b8:	4b0f      	ldr	r3, [pc, #60]	; (80012f8 <HAL_MspInit+0x4c>)
 80012ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012c0:	6453      	str	r3, [r2, #68]	; 0x44
 80012c2:	4b0d      	ldr	r3, [pc, #52]	; (80012f8 <HAL_MspInit+0x4c>)
 80012c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ca:	607b      	str	r3, [r7, #4]
 80012cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	603b      	str	r3, [r7, #0]
 80012d2:	4a09      	ldr	r2, [pc, #36]	; (80012f8 <HAL_MspInit+0x4c>)
 80012d4:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <HAL_MspInit+0x4c>)
 80012d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012dc:	6413      	str	r3, [r2, #64]	; 0x40
 80012de:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <HAL_MspInit+0x4c>)
 80012e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e6:	603b      	str	r3, [r7, #0]
 80012e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	40023800 	.word	0x40023800

080012fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a0b      	ldr	r2, [pc, #44]	; (8001338 <HAL_TIM_Base_MspInit+0x3c>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d10d      	bne.n	800132a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	4a0a      	ldr	r2, [pc, #40]	; (800133c <HAL_TIM_Base_MspInit+0x40>)
 8001314:	4b09      	ldr	r3, [pc, #36]	; (800133c <HAL_TIM_Base_MspInit+0x40>)
 8001316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	6453      	str	r3, [r2, #68]	; 0x44
 800131e:	4b07      	ldr	r3, [pc, #28]	; (800133c <HAL_TIM_Base_MspInit+0x40>)
 8001320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800132a:	bf00      	nop
 800132c:	3714      	adds	r7, #20
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	40010000 	.word	0x40010000
 800133c:	40023800 	.word	0x40023800

08001340 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b088      	sub	sp, #32
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001348:	f107 030c 	add.w	r3, r7, #12
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a12      	ldr	r2, [pc, #72]	; (80013a8 <HAL_TIM_MspPostInit+0x68>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d11e      	bne.n	80013a0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	60bb      	str	r3, [r7, #8]
 8001366:	4a11      	ldr	r2, [pc, #68]	; (80013ac <HAL_TIM_MspPostInit+0x6c>)
 8001368:	4b10      	ldr	r3, [pc, #64]	; (80013ac <HAL_TIM_MspPostInit+0x6c>)
 800136a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136c:	f043 0310 	orr.w	r3, r3, #16
 8001370:	6313      	str	r3, [r2, #48]	; 0x30
 8001372:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <HAL_TIM_MspPostInit+0x6c>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	f003 0310 	and.w	r3, r3, #16
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 800137e:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8001382:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001384:	2302      	movs	r3, #2
 8001386:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138c:	2300      	movs	r3, #0
 800138e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001390:	2301      	movs	r3, #1
 8001392:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001394:	f107 030c 	add.w	r3, r7, #12
 8001398:	4619      	mov	r1, r3
 800139a:	4805      	ldr	r0, [pc, #20]	; (80013b0 <HAL_TIM_MspPostInit+0x70>)
 800139c:	f000 fa28 	bl	80017f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80013a0:	bf00      	nop
 80013a2:	3720      	adds	r7, #32
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40010000 	.word	0x40010000
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40021000 	.word	0x40021000

080013b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr

080013c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013c2:	b480      	push	{r7}
 80013c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013c6:	e7fe      	b.n	80013c6 <HardFault_Handler+0x4>

080013c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013cc:	e7fe      	b.n	80013cc <MemManage_Handler+0x4>

080013ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013d2:	e7fe      	b.n	80013d2 <BusFault_Handler+0x4>

080013d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013d8:	e7fe      	b.n	80013d8 <UsageFault_Handler+0x4>

080013da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr

080013f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001408:	f000 f8a0 	bl	800154c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}

08001410 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001414:	4802      	ldr	r0, [pc, #8]	; (8001420 <OTG_FS_IRQHandler+0x10>)
 8001416:	f000 fcd5 	bl	8001dc4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20001724 	.word	0x20001724

08001424 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800142c:	4b11      	ldr	r3, [pc, #68]	; (8001474 <_sbrk+0x50>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d102      	bne.n	800143a <_sbrk+0x16>
		heap_end = &end;
 8001434:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <_sbrk+0x50>)
 8001436:	4a10      	ldr	r2, [pc, #64]	; (8001478 <_sbrk+0x54>)
 8001438:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800143a:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <_sbrk+0x50>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001440:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <_sbrk+0x50>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4413      	add	r3, r2
 8001448:	466a      	mov	r2, sp
 800144a:	4293      	cmp	r3, r2
 800144c:	d907      	bls.n	800145e <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800144e:	f006 fb73 	bl	8007b38 <__errno>
 8001452:	4602      	mov	r2, r0
 8001454:	230c      	movs	r3, #12
 8001456:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001458:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800145c:	e006      	b.n	800146c <_sbrk+0x48>
	}

	heap_end += incr;
 800145e:	4b05      	ldr	r3, [pc, #20]	; (8001474 <_sbrk+0x50>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4413      	add	r3, r2
 8001466:	4a03      	ldr	r2, [pc, #12]	; (8001474 <_sbrk+0x50>)
 8001468:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800146a:	68fb      	ldr	r3, [r7, #12]
}
 800146c:	4618      	mov	r0, r3
 800146e:	3710      	adds	r7, #16
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	20000200 	.word	0x20000200
 8001478:	20001b30 	.word	0x20001b30

0800147c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001480:	4a08      	ldr	r2, [pc, #32]	; (80014a4 <SystemInit+0x28>)
 8001482:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <SystemInit+0x28>)
 8001484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001488:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800148c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001490:	4b04      	ldr	r3, [pc, #16]	; (80014a4 <SystemInit+0x28>)
 8001492:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001496:	609a      	str	r2, [r3, #8]
#endif
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014ac:	4a0e      	ldr	r2, [pc, #56]	; (80014e8 <HAL_Init+0x40>)
 80014ae:	4b0e      	ldr	r3, [pc, #56]	; (80014e8 <HAL_Init+0x40>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014b8:	4a0b      	ldr	r2, [pc, #44]	; (80014e8 <HAL_Init+0x40>)
 80014ba:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <HAL_Init+0x40>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014c4:	4a08      	ldr	r2, [pc, #32]	; (80014e8 <HAL_Init+0x40>)
 80014c6:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <HAL_Init+0x40>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d0:	2003      	movs	r0, #3
 80014d2:	f000 f94b 	bl	800176c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014d6:	2000      	movs	r0, #0
 80014d8:	f000 f808 	bl	80014ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014dc:	f7ff fee6 	bl	80012ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40023c00 	.word	0x40023c00

080014ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014f4:	4b12      	ldr	r3, [pc, #72]	; (8001540 <HAL_InitTick+0x54>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	4b12      	ldr	r3, [pc, #72]	; (8001544 <HAL_InitTick+0x58>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	4619      	mov	r1, r3
 80014fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001502:	fbb3 f3f1 	udiv	r3, r3, r1
 8001506:	fbb2 f3f3 	udiv	r3, r2, r3
 800150a:	4618      	mov	r0, r3
 800150c:	f000 f963 	bl	80017d6 <HAL_SYSTICK_Config>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e00e      	b.n	8001538 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2b0f      	cmp	r3, #15
 800151e:	d80a      	bhi.n	8001536 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001520:	2200      	movs	r2, #0
 8001522:	6879      	ldr	r1, [r7, #4]
 8001524:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001528:	f000 f92b 	bl	8001782 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800152c:	4a06      	ldr	r2, [pc, #24]	; (8001548 <HAL_InitTick+0x5c>)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001532:	2300      	movs	r3, #0
 8001534:	e000      	b.n	8001538 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
}
 8001538:	4618      	mov	r0, r3
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20000000 	.word	0x20000000
 8001544:	20000008 	.word	0x20000008
 8001548:	20000004 	.word	0x20000004

0800154c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001550:	4b06      	ldr	r3, [pc, #24]	; (800156c <HAL_IncTick+0x20>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	461a      	mov	r2, r3
 8001556:	4b06      	ldr	r3, [pc, #24]	; (8001570 <HAL_IncTick+0x24>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4413      	add	r3, r2
 800155c:	4a04      	ldr	r2, [pc, #16]	; (8001570 <HAL_IncTick+0x24>)
 800155e:	6013      	str	r3, [r2, #0]
}
 8001560:	bf00      	nop
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	20000008 	.word	0x20000008
 8001570:	20000250 	.word	0x20000250

08001574 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  return uwTick;
 8001578:	4b03      	ldr	r3, [pc, #12]	; (8001588 <HAL_GetTick+0x14>)
 800157a:	681b      	ldr	r3, [r3, #0]
}
 800157c:	4618      	mov	r0, r3
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	20000250 	.word	0x20000250

0800158c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001594:	f7ff ffee 	bl	8001574 <HAL_GetTick>
 8001598:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015a4:	d005      	beq.n	80015b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015a6:	4b09      	ldr	r3, [pc, #36]	; (80015cc <HAL_Delay+0x40>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	461a      	mov	r2, r3
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	4413      	add	r3, r2
 80015b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015b2:	bf00      	nop
 80015b4:	f7ff ffde 	bl	8001574 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	1ad2      	subs	r2, r2, r3
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d3f7      	bcc.n	80015b4 <HAL_Delay+0x28>
  {
  }
}
 80015c4:	bf00      	nop
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20000008 	.word	0x20000008

080015d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015e0:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <__NVIC_SetPriorityGrouping+0x44>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015e6:	68ba      	ldr	r2, [r7, #8]
 80015e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015ec:	4013      	ands	r3, r2
 80015ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001600:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001602:	4a04      	ldr	r2, [pc, #16]	; (8001614 <__NVIC_SetPriorityGrouping+0x44>)
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	60d3      	str	r3, [r2, #12]
}
 8001608:	bf00      	nop
 800160a:	3714      	adds	r7, #20
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	e000ed00 	.word	0xe000ed00

08001618 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800161c:	4b04      	ldr	r3, [pc, #16]	; (8001630 <__NVIC_GetPriorityGrouping+0x18>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	0a1b      	lsrs	r3, r3, #8
 8001622:	f003 0307 	and.w	r3, r3, #7
}
 8001626:	4618      	mov	r0, r3
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	e000ed00 	.word	0xe000ed00

08001634 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800163e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001642:	2b00      	cmp	r3, #0
 8001644:	db0b      	blt.n	800165e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001646:	4909      	ldr	r1, [pc, #36]	; (800166c <__NVIC_EnableIRQ+0x38>)
 8001648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164c:	095b      	lsrs	r3, r3, #5
 800164e:	79fa      	ldrb	r2, [r7, #7]
 8001650:	f002 021f 	and.w	r2, r2, #31
 8001654:	2001      	movs	r0, #1
 8001656:	fa00 f202 	lsl.w	r2, r0, r2
 800165a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800165e:	bf00      	nop
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	e000e100 	.word	0xe000e100

08001670 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	6039      	str	r1, [r7, #0]
 800167a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800167c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001680:	2b00      	cmp	r3, #0
 8001682:	db0a      	blt.n	800169a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001684:	490d      	ldr	r1, [pc, #52]	; (80016bc <__NVIC_SetPriority+0x4c>)
 8001686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168a:	683a      	ldr	r2, [r7, #0]
 800168c:	b2d2      	uxtb	r2, r2
 800168e:	0112      	lsls	r2, r2, #4
 8001690:	b2d2      	uxtb	r2, r2
 8001692:	440b      	add	r3, r1
 8001694:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001698:	e00a      	b.n	80016b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800169a:	4909      	ldr	r1, [pc, #36]	; (80016c0 <__NVIC_SetPriority+0x50>)
 800169c:	79fb      	ldrb	r3, [r7, #7]
 800169e:	f003 030f 	and.w	r3, r3, #15
 80016a2:	3b04      	subs	r3, #4
 80016a4:	683a      	ldr	r2, [r7, #0]
 80016a6:	b2d2      	uxtb	r2, r2
 80016a8:	0112      	lsls	r2, r2, #4
 80016aa:	b2d2      	uxtb	r2, r2
 80016ac:	440b      	add	r3, r1
 80016ae:	761a      	strb	r2, [r3, #24]
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	e000e100 	.word	0xe000e100
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b089      	sub	sp, #36	; 0x24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	f1c3 0307 	rsb	r3, r3, #7
 80016de:	2b04      	cmp	r3, #4
 80016e0:	bf28      	it	cs
 80016e2:	2304      	movcs	r3, #4
 80016e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	3304      	adds	r3, #4
 80016ea:	2b06      	cmp	r3, #6
 80016ec:	d902      	bls.n	80016f4 <NVIC_EncodePriority+0x30>
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	3b03      	subs	r3, #3
 80016f2:	e000      	b.n	80016f6 <NVIC_EncodePriority+0x32>
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f8:	2201      	movs	r2, #1
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	1e5a      	subs	r2, r3, #1
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	401a      	ands	r2, r3
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800170a:	2101      	movs	r1, #1
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	fa01 f303 	lsl.w	r3, r1, r3
 8001712:	1e59      	subs	r1, r3, #1
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001718:	4313      	orrs	r3, r2
         );
}
 800171a:	4618      	mov	r0, r3
 800171c:	3724      	adds	r7, #36	; 0x24
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
	...

08001728 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	3b01      	subs	r3, #1
 8001734:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001738:	d301      	bcc.n	800173e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800173a:	2301      	movs	r3, #1
 800173c:	e00f      	b.n	800175e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800173e:	4a0a      	ldr	r2, [pc, #40]	; (8001768 <SysTick_Config+0x40>)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	3b01      	subs	r3, #1
 8001744:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001746:	210f      	movs	r1, #15
 8001748:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800174c:	f7ff ff90 	bl	8001670 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001750:	4b05      	ldr	r3, [pc, #20]	; (8001768 <SysTick_Config+0x40>)
 8001752:	2200      	movs	r2, #0
 8001754:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001756:	4b04      	ldr	r3, [pc, #16]	; (8001768 <SysTick_Config+0x40>)
 8001758:	2207      	movs	r2, #7
 800175a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	e000e010 	.word	0xe000e010

0800176c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f7ff ff2b 	bl	80015d0 <__NVIC_SetPriorityGrouping>
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001782:	b580      	push	{r7, lr}
 8001784:	b086      	sub	sp, #24
 8001786:	af00      	add	r7, sp, #0
 8001788:	4603      	mov	r3, r0
 800178a:	60b9      	str	r1, [r7, #8]
 800178c:	607a      	str	r2, [r7, #4]
 800178e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001794:	f7ff ff40 	bl	8001618 <__NVIC_GetPriorityGrouping>
 8001798:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	68b9      	ldr	r1, [r7, #8]
 800179e:	6978      	ldr	r0, [r7, #20]
 80017a0:	f7ff ff90 	bl	80016c4 <NVIC_EncodePriority>
 80017a4:	4602      	mov	r2, r0
 80017a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017aa:	4611      	mov	r1, r2
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff ff5f 	bl	8001670 <__NVIC_SetPriority>
}
 80017b2:	bf00      	nop
 80017b4:	3718      	adds	r7, #24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b082      	sub	sp, #8
 80017be:	af00      	add	r7, sp, #0
 80017c0:	4603      	mov	r3, r0
 80017c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff ff33 	bl	8001634 <__NVIC_EnableIRQ>
}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b082      	sub	sp, #8
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f7ff ffa2 	bl	8001728 <SysTick_Config>
 80017e4:	4603      	mov	r3, r0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
	...

080017f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b089      	sub	sp, #36	; 0x24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017fa:	2300      	movs	r3, #0
 80017fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017fe:	2300      	movs	r3, #0
 8001800:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001802:	2300      	movs	r3, #0
 8001804:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001806:	2300      	movs	r3, #0
 8001808:	61fb      	str	r3, [r7, #28]
 800180a:	e16b      	b.n	8001ae4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800180c:	2201      	movs	r2, #1
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	4013      	ands	r3, r2
 800181e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	429a      	cmp	r2, r3
 8001826:	f040 815a 	bne.w	8001ade <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d00b      	beq.n	800184a <HAL_GPIO_Init+0x5a>
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	2b02      	cmp	r3, #2
 8001838:	d007      	beq.n	800184a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800183e:	2b11      	cmp	r3, #17
 8001840:	d003      	beq.n	800184a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	2b12      	cmp	r3, #18
 8001848:	d130      	bne.n	80018ac <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	2203      	movs	r2, #3
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	43db      	mvns	r3, r3
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	4013      	ands	r3, r2
 8001860:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	68da      	ldr	r2, [r3, #12]
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	4313      	orrs	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001880:	2201      	movs	r2, #1
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	43db      	mvns	r3, r3
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	4013      	ands	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	091b      	lsrs	r3, r3, #4
 8001896:	f003 0201 	and.w	r2, r3, #1
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	2203      	movs	r2, #3
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	43db      	mvns	r3, r3
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	4013      	ands	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	689a      	ldr	r2, [r3, #8]
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d003      	beq.n	80018ec <HAL_GPIO_Init+0xfc>
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	2b12      	cmp	r3, #18
 80018ea:	d123      	bne.n	8001934 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	08da      	lsrs	r2, r3, #3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3208      	adds	r2, #8
 80018f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	f003 0307 	and.w	r3, r3, #7
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	220f      	movs	r2, #15
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	43db      	mvns	r3, r3
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4013      	ands	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	691a      	ldr	r2, [r3, #16]
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	4313      	orrs	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	08da      	lsrs	r2, r3, #3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	3208      	adds	r2, #8
 800192e:	69b9      	ldr	r1, [r7, #24]
 8001930:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	2203      	movs	r2, #3
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	43db      	mvns	r3, r3
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	4013      	ands	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f003 0203 	and.w	r2, r3, #3
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	4313      	orrs	r3, r2
 8001960:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001970:	2b00      	cmp	r3, #0
 8001972:	f000 80b4 	beq.w	8001ade <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	4a5f      	ldr	r2, [pc, #380]	; (8001af8 <HAL_GPIO_Init+0x308>)
 800197c:	4b5e      	ldr	r3, [pc, #376]	; (8001af8 <HAL_GPIO_Init+0x308>)
 800197e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001980:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001984:	6453      	str	r3, [r2, #68]	; 0x44
 8001986:	4b5c      	ldr	r3, [pc, #368]	; (8001af8 <HAL_GPIO_Init+0x308>)
 8001988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001992:	4a5a      	ldr	r2, [pc, #360]	; (8001afc <HAL_GPIO_Init+0x30c>)
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	089b      	lsrs	r3, r3, #2
 8001998:	3302      	adds	r3, #2
 800199a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800199e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	f003 0303 	and.w	r3, r3, #3
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	220f      	movs	r2, #15
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	43db      	mvns	r3, r3
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	4013      	ands	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a51      	ldr	r2, [pc, #324]	; (8001b00 <HAL_GPIO_Init+0x310>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d02b      	beq.n	8001a16 <HAL_GPIO_Init+0x226>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a50      	ldr	r2, [pc, #320]	; (8001b04 <HAL_GPIO_Init+0x314>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d025      	beq.n	8001a12 <HAL_GPIO_Init+0x222>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a4f      	ldr	r2, [pc, #316]	; (8001b08 <HAL_GPIO_Init+0x318>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d01f      	beq.n	8001a0e <HAL_GPIO_Init+0x21e>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a4e      	ldr	r2, [pc, #312]	; (8001b0c <HAL_GPIO_Init+0x31c>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d019      	beq.n	8001a0a <HAL_GPIO_Init+0x21a>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a4d      	ldr	r2, [pc, #308]	; (8001b10 <HAL_GPIO_Init+0x320>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d013      	beq.n	8001a06 <HAL_GPIO_Init+0x216>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a4c      	ldr	r2, [pc, #304]	; (8001b14 <HAL_GPIO_Init+0x324>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d00d      	beq.n	8001a02 <HAL_GPIO_Init+0x212>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a4b      	ldr	r2, [pc, #300]	; (8001b18 <HAL_GPIO_Init+0x328>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d007      	beq.n	80019fe <HAL_GPIO_Init+0x20e>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a4a      	ldr	r2, [pc, #296]	; (8001b1c <HAL_GPIO_Init+0x32c>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d101      	bne.n	80019fa <HAL_GPIO_Init+0x20a>
 80019f6:	2307      	movs	r3, #7
 80019f8:	e00e      	b.n	8001a18 <HAL_GPIO_Init+0x228>
 80019fa:	2308      	movs	r3, #8
 80019fc:	e00c      	b.n	8001a18 <HAL_GPIO_Init+0x228>
 80019fe:	2306      	movs	r3, #6
 8001a00:	e00a      	b.n	8001a18 <HAL_GPIO_Init+0x228>
 8001a02:	2305      	movs	r3, #5
 8001a04:	e008      	b.n	8001a18 <HAL_GPIO_Init+0x228>
 8001a06:	2304      	movs	r3, #4
 8001a08:	e006      	b.n	8001a18 <HAL_GPIO_Init+0x228>
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e004      	b.n	8001a18 <HAL_GPIO_Init+0x228>
 8001a0e:	2302      	movs	r3, #2
 8001a10:	e002      	b.n	8001a18 <HAL_GPIO_Init+0x228>
 8001a12:	2301      	movs	r3, #1
 8001a14:	e000      	b.n	8001a18 <HAL_GPIO_Init+0x228>
 8001a16:	2300      	movs	r3, #0
 8001a18:	69fa      	ldr	r2, [r7, #28]
 8001a1a:	f002 0203 	and.w	r2, r2, #3
 8001a1e:	0092      	lsls	r2, r2, #2
 8001a20:	4093      	lsls	r3, r2
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a28:	4934      	ldr	r1, [pc, #208]	; (8001afc <HAL_GPIO_Init+0x30c>)
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	089b      	lsrs	r3, r3, #2
 8001a2e:	3302      	adds	r3, #2
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a36:	4b3a      	ldr	r3, [pc, #232]	; (8001b20 <HAL_GPIO_Init+0x330>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	4013      	ands	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d003      	beq.n	8001a5a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a5a:	4a31      	ldr	r2, [pc, #196]	; (8001b20 <HAL_GPIO_Init+0x330>)
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a60:	4b2f      	ldr	r3, [pc, #188]	; (8001b20 <HAL_GPIO_Init+0x330>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d003      	beq.n	8001a84 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a84:	4a26      	ldr	r2, [pc, #152]	; (8001b20 <HAL_GPIO_Init+0x330>)
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a8a:	4b25      	ldr	r3, [pc, #148]	; (8001b20 <HAL_GPIO_Init+0x330>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	43db      	mvns	r3, r3
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	4013      	ands	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d003      	beq.n	8001aae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001aae:	4a1c      	ldr	r2, [pc, #112]	; (8001b20 <HAL_GPIO_Init+0x330>)
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ab4:	4b1a      	ldr	r3, [pc, #104]	; (8001b20 <HAL_GPIO_Init+0x330>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	43db      	mvns	r3, r3
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d003      	beq.n	8001ad8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ad8:	4a11      	ldr	r2, [pc, #68]	; (8001b20 <HAL_GPIO_Init+0x330>)
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	61fb      	str	r3, [r7, #28]
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	2b0f      	cmp	r3, #15
 8001ae8:	f67f ae90 	bls.w	800180c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001aec:	bf00      	nop
 8001aee:	3724      	adds	r7, #36	; 0x24
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	40023800 	.word	0x40023800
 8001afc:	40013800 	.word	0x40013800
 8001b00:	40020000 	.word	0x40020000
 8001b04:	40020400 	.word	0x40020400
 8001b08:	40020800 	.word	0x40020800
 8001b0c:	40020c00 	.word	0x40020c00
 8001b10:	40021000 	.word	0x40021000
 8001b14:	40021400 	.word	0x40021400
 8001b18:	40021800 	.word	0x40021800
 8001b1c:	40021c00 	.word	0x40021c00
 8001b20:	40013c00 	.word	0x40013c00

08001b24 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b26:	b08f      	sub	sp, #60	; 0x3c
 8001b28:	af0a      	add	r7, sp, #40	; 0x28
 8001b2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e10f      	b.n	8001d56 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d106      	bne.n	8001b56 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f005 fcc9 	bl	80074e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2203      	movs	r2, #3
 8001b5a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d102      	bne.n	8001b70 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f002 fcb0 	bl	80044da <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	603b      	str	r3, [r7, #0]
 8001b80:	687e      	ldr	r6, [r7, #4]
 8001b82:	466d      	mov	r5, sp
 8001b84:	f106 0410 	add.w	r4, r6, #16
 8001b88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b90:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b94:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b98:	1d33      	adds	r3, r6, #4
 8001b9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b9c:	6838      	ldr	r0, [r7, #0]
 8001b9e:	f002 fb87 	bl	80042b0 <USB_CoreInit>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d005      	beq.n	8001bb4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2202      	movs	r2, #2
 8001bac:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e0d0      	b.n	8001d56 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2100      	movs	r1, #0
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f002 fc9e 	bl	80044fc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	73fb      	strb	r3, [r7, #15]
 8001bc4:	e04a      	b.n	8001c5c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001bc6:	7bfa      	ldrb	r2, [r7, #15]
 8001bc8:	6879      	ldr	r1, [r7, #4]
 8001bca:	4613      	mov	r3, r2
 8001bcc:	00db      	lsls	r3, r3, #3
 8001bce:	1a9b      	subs	r3, r3, r2
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	440b      	add	r3, r1
 8001bd4:	333d      	adds	r3, #61	; 0x3d
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001bda:	7bfa      	ldrb	r2, [r7, #15]
 8001bdc:	6879      	ldr	r1, [r7, #4]
 8001bde:	4613      	mov	r3, r2
 8001be0:	00db      	lsls	r3, r3, #3
 8001be2:	1a9b      	subs	r3, r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	440b      	add	r3, r1
 8001be8:	333c      	adds	r3, #60	; 0x3c
 8001bea:	7bfa      	ldrb	r2, [r7, #15]
 8001bec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001bee:	7bfa      	ldrb	r2, [r7, #15]
 8001bf0:	7bfb      	ldrb	r3, [r7, #15]
 8001bf2:	b298      	uxth	r0, r3
 8001bf4:	6879      	ldr	r1, [r7, #4]
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	00db      	lsls	r3, r3, #3
 8001bfa:	1a9b      	subs	r3, r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	440b      	add	r3, r1
 8001c00:	3342      	adds	r3, #66	; 0x42
 8001c02:	4602      	mov	r2, r0
 8001c04:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c06:	7bfa      	ldrb	r2, [r7, #15]
 8001c08:	6879      	ldr	r1, [r7, #4]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	1a9b      	subs	r3, r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	440b      	add	r3, r1
 8001c14:	333f      	adds	r3, #63	; 0x3f
 8001c16:	2200      	movs	r2, #0
 8001c18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c1a:	7bfa      	ldrb	r2, [r7, #15]
 8001c1c:	6879      	ldr	r1, [r7, #4]
 8001c1e:	4613      	mov	r3, r2
 8001c20:	00db      	lsls	r3, r3, #3
 8001c22:	1a9b      	subs	r3, r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	440b      	add	r3, r1
 8001c28:	3344      	adds	r3, #68	; 0x44
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c2e:	7bfa      	ldrb	r2, [r7, #15]
 8001c30:	6879      	ldr	r1, [r7, #4]
 8001c32:	4613      	mov	r3, r2
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	1a9b      	subs	r3, r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	440b      	add	r3, r1
 8001c3c:	3348      	adds	r3, #72	; 0x48
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c42:	7bfa      	ldrb	r2, [r7, #15]
 8001c44:	6879      	ldr	r1, [r7, #4]
 8001c46:	4613      	mov	r3, r2
 8001c48:	00db      	lsls	r3, r3, #3
 8001c4a:	1a9b      	subs	r3, r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	440b      	add	r3, r1
 8001c50:	3350      	adds	r3, #80	; 0x50
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c56:	7bfb      	ldrb	r3, [r7, #15]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	73fb      	strb	r3, [r7, #15]
 8001c5c:	7bfa      	ldrb	r2, [r7, #15]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d3af      	bcc.n	8001bc6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c66:	2300      	movs	r3, #0
 8001c68:	73fb      	strb	r3, [r7, #15]
 8001c6a:	e044      	b.n	8001cf6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c6c:	7bfa      	ldrb	r2, [r7, #15]
 8001c6e:	6879      	ldr	r1, [r7, #4]
 8001c70:	4613      	mov	r3, r2
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	1a9b      	subs	r3, r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	440b      	add	r3, r1
 8001c7a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001c7e:	2200      	movs	r2, #0
 8001c80:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c82:	7bfa      	ldrb	r2, [r7, #15]
 8001c84:	6879      	ldr	r1, [r7, #4]
 8001c86:	4613      	mov	r3, r2
 8001c88:	00db      	lsls	r3, r3, #3
 8001c8a:	1a9b      	subs	r3, r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	440b      	add	r3, r1
 8001c90:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001c94:	7bfa      	ldrb	r2, [r7, #15]
 8001c96:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c98:	7bfa      	ldrb	r2, [r7, #15]
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	1a9b      	subs	r3, r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	440b      	add	r3, r1
 8001ca6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001caa:	2200      	movs	r2, #0
 8001cac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001cae:	7bfa      	ldrb	r2, [r7, #15]
 8001cb0:	6879      	ldr	r1, [r7, #4]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	00db      	lsls	r3, r3, #3
 8001cb6:	1a9b      	subs	r3, r3, r2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	440b      	add	r3, r1
 8001cbc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001cc4:	7bfa      	ldrb	r2, [r7, #15]
 8001cc6:	6879      	ldr	r1, [r7, #4]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	1a9b      	subs	r3, r3, r2
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	440b      	add	r3, r1
 8001cd2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001cda:	7bfa      	ldrb	r2, [r7, #15]
 8001cdc:	6879      	ldr	r1, [r7, #4]
 8001cde:	4613      	mov	r3, r2
 8001ce0:	00db      	lsls	r3, r3, #3
 8001ce2:	1a9b      	subs	r3, r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	440b      	add	r3, r1
 8001ce8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cf0:	7bfb      	ldrb	r3, [r7, #15]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	73fb      	strb	r3, [r7, #15]
 8001cf6:	7bfa      	ldrb	r2, [r7, #15]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d3b5      	bcc.n	8001c6c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	603b      	str	r3, [r7, #0]
 8001d06:	687e      	ldr	r6, [r7, #4]
 8001d08:	466d      	mov	r5, sp
 8001d0a:	f106 0410 	add.w	r4, r6, #16
 8001d0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d16:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d1a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d1e:	1d33      	adds	r3, r6, #4
 8001d20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d22:	6838      	ldr	r0, [r7, #0]
 8001d24:	f002 fc14 	bl	8004550 <USB_DevInit>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d005      	beq.n	8001d3a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2202      	movs	r2, #2
 8001d32:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e00d      	b.n	8001d56 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2201      	movs	r2, #1
 8001d46:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f003 fc94 	bl	800567c <USB_DevDisconnect>

  return HAL_OK;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3714      	adds	r7, #20
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d5e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b084      	sub	sp, #16
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d101      	bne.n	8001d7a <HAL_PCD_Start+0x1c>
 8001d76:	2302      	movs	r3, #2
 8001d78:	e020      	b.n	8001dbc <HAL_PCD_Start+0x5e>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d109      	bne.n	8001d9e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d005      	beq.n	8001d9e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d96:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f003 fc51 	bl	800564a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f002 fb83 	bl	80044b8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3710      	adds	r7, #16
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001dc4:	b590      	push	{r4, r7, lr}
 8001dc6:	b08d      	sub	sp, #52	; 0x34
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001dd2:	6a3b      	ldr	r3, [r7, #32]
 8001dd4:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f003 fcfa 	bl	80057d4 <USB_GetMode>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f040 83aa 	bne.w	800253c <HAL_PCD_IRQHandler+0x778>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f003 fc5e 	bl	80056ae <USB_ReadInterrupts>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f000 83a0 	beq.w	800253a <HAL_PCD_IRQHandler+0x776>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f003 fc55 	bl	80056ae <USB_ReadInterrupts>
 8001e04:	4603      	mov	r3, r0
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d107      	bne.n	8001e1e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	6812      	ldr	r2, [r2, #0]
 8001e16:	6952      	ldr	r2, [r2, #20]
 8001e18:	f002 0202 	and.w	r2, r2, #2
 8001e1c:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f003 fc43 	bl	80056ae <USB_ReadInterrupts>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	f003 0310 	and.w	r3, r3, #16
 8001e2e:	2b10      	cmp	r3, #16
 8001e30:	d161      	bne.n	8001ef6 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	6812      	ldr	r2, [r2, #0]
 8001e3a:	6992      	ldr	r2, [r2, #24]
 8001e3c:	f022 0210 	bic.w	r2, r2, #16
 8001e40:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001e42:	6a3b      	ldr	r3, [r7, #32]
 8001e44:	6a1b      	ldr	r3, [r3, #32]
 8001e46:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	f003 020f 	and.w	r2, r3, #15
 8001e4e:	4613      	mov	r3, r2
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	1a9b      	subs	r3, r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	3304      	adds	r3, #4
 8001e60:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	0c5b      	lsrs	r3, r3, #17
 8001e66:	f003 030f 	and.w	r3, r3, #15
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d124      	bne.n	8001eb8 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001e74:	4013      	ands	r3, r2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d035      	beq.n	8001ee6 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	091b      	lsrs	r3, r3, #4
 8001e82:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001e84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	6a38      	ldr	r0, [r7, #32]
 8001e8e:	f003 faaf 	bl	80053f0 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	68da      	ldr	r2, [r3, #12]
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	091b      	lsrs	r3, r3, #4
 8001e9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e9e:	441a      	add	r2, r3
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	699a      	ldr	r2, [r3, #24]
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	091b      	lsrs	r3, r3, #4
 8001eac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001eb0:	441a      	add	r2, r3
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	619a      	str	r2, [r3, #24]
 8001eb6:	e016      	b.n	8001ee6 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	0c5b      	lsrs	r3, r3, #17
 8001ebc:	f003 030f 	and.w	r3, r3, #15
 8001ec0:	2b06      	cmp	r3, #6
 8001ec2:	d110      	bne.n	8001ee6 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001eca:	2208      	movs	r2, #8
 8001ecc:	4619      	mov	r1, r3
 8001ece:	6a38      	ldr	r0, [r7, #32]
 8001ed0:	f003 fa8e 	bl	80053f0 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	699a      	ldr	r2, [r3, #24]
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	091b      	lsrs	r3, r3, #4
 8001edc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ee0:	441a      	add	r2, r3
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	6812      	ldr	r2, [r2, #0]
 8001eee:	6992      	ldr	r2, [r2, #24]
 8001ef0:	f042 0210 	orr.w	r2, r2, #16
 8001ef4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f003 fbd7 	bl	80056ae <USB_ReadInterrupts>
 8001f00:	4603      	mov	r3, r0
 8001f02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f06:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001f0a:	d16e      	bne.n	8001fea <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f003 fbdd 	bl	80056d4 <USB_ReadDevAllOutEpInterrupt>
 8001f1a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001f1c:	e062      	b.n	8001fe4 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d057      	beq.n	8001fd8 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f2e:	b2d2      	uxtb	r2, r2
 8001f30:	4611      	mov	r1, r2
 8001f32:	4618      	mov	r0, r3
 8001f34:	f003 fc02 	bl	800573c <USB_ReadDevOutEPInterrupt>
 8001f38:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d00c      	beq.n	8001f5e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f46:	015a      	lsls	r2, r3, #5
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f50:	461a      	mov	r2, r3
 8001f52:	2301      	movs	r3, #1
 8001f54:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001f56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f000 fdbf 	bl	8002adc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	f003 0308 	and.w	r3, r3, #8
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d00c      	beq.n	8001f82 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6a:	015a      	lsls	r2, r3, #5
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	4413      	add	r3, r2
 8001f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f74:	461a      	mov	r2, r3
 8001f76:	2308      	movs	r3, #8
 8001f78:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001f7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 feb9 	bl	8002cf4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	f003 0310 	and.w	r3, r3, #16
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d008      	beq.n	8001f9e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8e:	015a      	lsls	r2, r3, #5
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	4413      	add	r3, r2
 8001f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f98:	461a      	mov	r2, r3
 8001f9a:	2310      	movs	r3, #16
 8001f9c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	f003 0320 	and.w	r3, r3, #32
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d008      	beq.n	8001fba <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001faa:	015a      	lsls	r2, r3, #5
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	4413      	add	r3, r2
 8001fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	2320      	movs	r3, #32
 8001fb8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d009      	beq.n	8001fd8 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc6:	015a      	lsls	r2, r3, #5
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	4413      	add	r3, r2
 8001fcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fd6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fda:	3301      	adds	r3, #1
 8001fdc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe0:	085b      	lsrs	r3, r3, #1
 8001fe2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d199      	bne.n	8001f1e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f003 fb5d 	bl	80056ae <USB_ReadInterrupts>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ffa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001ffe:	f040 80c1 	bne.w	8002184 <HAL_PCD_IRQHandler+0x3c0>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4618      	mov	r0, r3
 8002008:	f003 fb7e 	bl	8005708 <USB_ReadDevAllInEpInterrupt>
 800200c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800200e:	2300      	movs	r3, #0
 8002010:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002012:	e0b3      	b.n	800217c <HAL_PCD_IRQHandler+0x3b8>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b00      	cmp	r3, #0
 800201c:	f000 80a8 	beq.w	8002170 <HAL_PCD_IRQHandler+0x3ac>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002026:	b2d2      	uxtb	r2, r2
 8002028:	4611      	mov	r1, r2
 800202a:	4618      	mov	r0, r3
 800202c:	f003 fba4 	bl	8005778 <USB_ReadDevInEPInterrupt>
 8002030:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	2b00      	cmp	r3, #0
 800203a:	d058      	beq.n	80020ee <HAL_PCD_IRQHandler+0x32a>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800203c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203e:	f003 030f 	and.w	r3, r3, #15
 8002042:	2201      	movs	r2, #1
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002050:	4619      	mov	r1, r3
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002058:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	43db      	mvns	r3, r3
 800205e:	4013      	ands	r3, r2
 8002060:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002064:	015a      	lsls	r2, r3, #5
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	4413      	add	r3, r2
 800206a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800206e:	461a      	mov	r2, r3
 8002070:	2301      	movs	r3, #1
 8002072:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	691b      	ldr	r3, [r3, #16]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d132      	bne.n	80020e2 <HAL_PCD_IRQHandler+0x31e>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800207c:	6879      	ldr	r1, [r7, #4]
 800207e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002080:	4613      	mov	r3, r2
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	1a9b      	subs	r3, r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	440b      	add	r3, r1
 800208a:	3348      	adds	r3, #72	; 0x48
 800208c:	6819      	ldr	r1, [r3, #0]
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002092:	4613      	mov	r3, r2
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	1a9b      	subs	r3, r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	4403      	add	r3, r0
 800209c:	3344      	adds	r3, #68	; 0x44
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4419      	add	r1, r3
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020a6:	4613      	mov	r3, r2
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	1a9b      	subs	r3, r3, r2
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	4403      	add	r3, r0
 80020b0:	3348      	adds	r3, #72	; 0x48
 80020b2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80020b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d113      	bne.n	80020e2 <HAL_PCD_IRQHandler+0x31e>
 80020ba:	6879      	ldr	r1, [r7, #4]
 80020bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020be:	4613      	mov	r3, r2
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	1a9b      	subs	r3, r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	440b      	add	r3, r1
 80020c8:	3350      	adds	r3, #80	; 0x50
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d108      	bne.n	80020e2 <HAL_PCD_IRQHandler+0x31e>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6818      	ldr	r0, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80020da:	461a      	mov	r2, r3
 80020dc:	2101      	movs	r1, #1
 80020de:	f003 fbad 	bl	800583c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80020e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	4619      	mov	r1, r3
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f005 fa7e 	bl	80075ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	f003 0308 	and.w	r3, r3, #8
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d008      	beq.n	800210a <HAL_PCD_IRQHandler+0x346>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80020f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fa:	015a      	lsls	r2, r3, #5
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	4413      	add	r3, r2
 8002100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002104:	461a      	mov	r2, r3
 8002106:	2308      	movs	r3, #8
 8002108:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	f003 0310 	and.w	r3, r3, #16
 8002110:	2b00      	cmp	r3, #0
 8002112:	d008      	beq.n	8002126 <HAL_PCD_IRQHandler+0x362>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002116:	015a      	lsls	r2, r3, #5
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	4413      	add	r3, r2
 800211c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002120:	461a      	mov	r2, r3
 8002122:	2310      	movs	r3, #16
 8002124:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800212c:	2b00      	cmp	r3, #0
 800212e:	d008      	beq.n	8002142 <HAL_PCD_IRQHandler+0x37e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002132:	015a      	lsls	r2, r3, #5
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	4413      	add	r3, r2
 8002138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800213c:	461a      	mov	r2, r3
 800213e:	2340      	movs	r3, #64	; 0x40
 8002140:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d008      	beq.n	800215e <HAL_PCD_IRQHandler+0x39a>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214e:	015a      	lsls	r2, r3, #5
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	4413      	add	r3, r2
 8002154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002158:	461a      	mov	r2, r3
 800215a:	2302      	movs	r3, #2
 800215c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002164:	2b00      	cmp	r3, #0
 8002166:	d003      	beq.n	8002170 <HAL_PCD_IRQHandler+0x3ac>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002168:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 fc27 	bl	80029be <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002172:	3301      	adds	r3, #1
 8002174:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002178:	085b      	lsrs	r3, r3, #1
 800217a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800217c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800217e:	2b00      	cmp	r3, #0
 8002180:	f47f af48 	bne.w	8002014 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f003 fa90 	bl	80056ae <USB_ReadInterrupts>
 800218e:	4603      	mov	r3, r0
 8002190:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002194:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002198:	d123      	bne.n	80021e2 <HAL_PCD_IRQHandler+0x41e>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021a0:	461a      	mov	r2, r3
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f023 0301 	bic.w	r3, r3, #1
 80021ae:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d108      	bne.n	80021cc <HAL_PCD_IRQHandler+0x408>
      {
        hpcd->LPM_State = LPM_L0;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80021c2:	2100      	movs	r1, #0
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f000 fe33 	bl	8002e30 <HAL_PCDEx_LPM_Callback>
 80021ca:	e002      	b.n	80021d2 <HAL_PCD_IRQHandler+0x40e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f005 fa85 	bl	80076dc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	6812      	ldr	r2, [r2, #0]
 80021da:	6952      	ldr	r2, [r2, #20]
 80021dc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80021e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f003 fa61 	bl	80056ae <USB_ReadInterrupts>
 80021ec:	4603      	mov	r3, r0
 80021ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021f6:	d112      	bne.n	800221e <HAL_PCD_IRQHandler+0x45a>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	2b01      	cmp	r3, #1
 8002206:	d102      	bne.n	800220e <HAL_PCD_IRQHandler+0x44a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f005 fa3f 	bl	800768c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	6812      	ldr	r2, [r2, #0]
 8002216:	6952      	ldr	r2, [r2, #20]
 8002218:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800221c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4618      	mov	r0, r3
 8002224:	f003 fa43 	bl	80056ae <USB_ReadInterrupts>
 8002228:	4603      	mov	r3, r0
 800222a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800222e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002232:	f040 80d2 	bne.w	80023da <HAL_PCD_IRQHandler+0x616>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800223c:	461a      	mov	r2, r3
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f023 0301 	bic.w	r3, r3, #1
 800224a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2110      	movs	r1, #16
 8002252:	4618      	mov	r0, r3
 8002254:	f002 fae2 	bl	800481c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002258:	2300      	movs	r3, #0
 800225a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800225c:	e05a      	b.n	8002314 <HAL_PCD_IRQHandler+0x550>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800225e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002260:	015a      	lsls	r2, r3, #5
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	4413      	add	r3, r2
 8002266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800226a:	461a      	mov	r2, r3
 800226c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002270:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002274:	015a      	lsls	r2, r3, #5
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	4413      	add	r3, r2
 800227a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800227e:	4619      	mov	r1, r3
 8002280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002282:	015a      	lsls	r2, r3, #5
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	4413      	add	r3, r2
 8002288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002292:	600b      	str	r3, [r1, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002296:	015a      	lsls	r2, r3, #5
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	4413      	add	r3, r2
 800229c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022a0:	4619      	mov	r1, r3
 80022a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a4:	015a      	lsls	r2, r3, #5
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	4413      	add	r3, r2
 80022aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80022b4:	600b      	str	r3, [r1, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80022b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b8:	015a      	lsls	r2, r3, #5
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	4413      	add	r3, r2
 80022be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022c2:	461a      	mov	r2, r3
 80022c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80022c8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80022ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022cc:	015a      	lsls	r2, r3, #5
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	4413      	add	r3, r2
 80022d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022d6:	4619      	mov	r1, r3
 80022d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022da:	015a      	lsls	r2, r3, #5
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	4413      	add	r3, r2
 80022e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80022ea:	600b      	str	r3, [r1, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80022ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ee:	015a      	lsls	r2, r3, #5
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	4413      	add	r3, r2
 80022f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022f8:	4619      	mov	r1, r3
 80022fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022fc:	015a      	lsls	r2, r3, #5
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	4413      	add	r3, r2
 8002302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800230c:	600b      	str	r3, [r1, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800230e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002310:	3301      	adds	r3, #1
 8002312:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685a      	ldr	r2, [r3, #4]
 8002318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800231a:	429a      	cmp	r2, r3
 800231c:	d89f      	bhi.n	800225e <HAL_PCD_IRQHandler+0x49a>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002324:	461a      	mov	r2, r3
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002332:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002338:	2b00      	cmp	r3, #0
 800233a:	d018      	beq.n	800236e <HAL_PCD_IRQHandler+0x5aa>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002342:	461a      	mov	r2, r3
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800234a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800234e:	f043 030b 	orr.w	r3, r3, #11
 8002352:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800235c:	461a      	mov	r2, r3
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002366:	f043 030b 	orr.w	r3, r3, #11
 800236a:	6453      	str	r3, [r2, #68]	; 0x44
 800236c:	e017      	b.n	800239e <HAL_PCD_IRQHandler+0x5da>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002374:	461a      	mov	r2, r3
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002382:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002386:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800238e:	461a      	mov	r2, r3
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	f043 030b 	orr.w	r3, r3, #11
 800239c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023a4:	461a      	mov	r2, r3
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80023b2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6818      	ldr	r0, [r3, #0]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80023c4:	461a      	mov	r2, r3
 80023c6:	f003 fa39 	bl	800583c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	6812      	ldr	r2, [r2, #0]
 80023d2:	6952      	ldr	r2, [r2, #20]
 80023d4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80023d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4618      	mov	r0, r3
 80023e0:	f003 f965 	bl	80056ae <USB_ReadInterrupts>
 80023e4:	4603      	mov	r3, r0
 80023e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023ee:	d124      	bne.n	800243a <HAL_PCD_IRQHandler+0x676>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f003 f9fb 	bl	80057f0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4618      	mov	r0, r3
 8002400:	f002 fa6e 	bl	80048e0 <USB_GetDevSpeed>
 8002404:	4603      	mov	r3, r0
 8002406:	461a      	mov	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681c      	ldr	r4, [r3, #0]
 8002410:	f001 f948 	bl	80036a4 <HAL_RCC_GetHCLKFreq>
 8002414:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800241a:	b2db      	uxtb	r3, r3
 800241c:	461a      	mov	r2, r3
 800241e:	4620      	mov	r0, r4
 8002420:	f001 ffa8 	bl	8004374 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f005 f908 	bl	800763a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	6812      	ldr	r2, [r2, #0]
 8002432:	6952      	ldr	r2, [r2, #20]
 8002434:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002438:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4618      	mov	r0, r3
 8002440:	f003 f935 	bl	80056ae <USB_ReadInterrupts>
 8002444:	4603      	mov	r3, r0
 8002446:	f003 0308 	and.w	r3, r3, #8
 800244a:	2b08      	cmp	r3, #8
 800244c:	d10a      	bne.n	8002464 <HAL_PCD_IRQHandler+0x6a0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f005 f8e5 	bl	800761e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	6812      	ldr	r2, [r2, #0]
 800245c:	6952      	ldr	r2, [r2, #20]
 800245e:	f002 0208 	and.w	r2, r2, #8
 8002462:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4618      	mov	r0, r3
 800246a:	f003 f920 	bl	80056ae <USB_ReadInterrupts>
 800246e:	4603      	mov	r3, r0
 8002470:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002474:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002478:	d10f      	bne.n	800249a <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800247a:	2300      	movs	r3, #0
 800247c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800247e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002480:	b2db      	uxtb	r3, r3
 8002482:	4619      	mov	r1, r3
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f005 f949 	bl	800771c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	6812      	ldr	r2, [r2, #0]
 8002492:	6952      	ldr	r2, [r2, #20]
 8002494:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002498:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f003 f905 	bl	80056ae <USB_ReadInterrupts>
 80024a4:	4603      	mov	r3, r0
 80024a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024ae:	d10f      	bne.n	80024d0 <HAL_PCD_IRQHandler+0x70c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80024b0:	2300      	movs	r3, #0
 80024b2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80024b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	4619      	mov	r1, r3
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f005 f91c 	bl	80076f8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	6812      	ldr	r2, [r2, #0]
 80024c8:	6952      	ldr	r2, [r2, #20]
 80024ca:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80024ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f003 f8ea 	bl	80056ae <USB_ReadInterrupts>
 80024da:	4603      	mov	r3, r0
 80024dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80024e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024e4:	d10a      	bne.n	80024fc <HAL_PCD_IRQHandler+0x738>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f005 f92a 	bl	8007740 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	6812      	ldr	r2, [r2, #0]
 80024f4:	6952      	ldr	r2, [r2, #20]
 80024f6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80024fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4618      	mov	r0, r3
 8002502:	f003 f8d4 	bl	80056ae <USB_ReadInterrupts>
 8002506:	4603      	mov	r3, r0
 8002508:	f003 0304 	and.w	r3, r3, #4
 800250c:	2b04      	cmp	r3, #4
 800250e:	d115      	bne.n	800253c <HAL_PCD_IRQHandler+0x778>
    {
      temp = hpcd->Instance->GOTGINT;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	f003 0304 	and.w	r3, r3, #4
 800251e:	2b00      	cmp	r3, #0
 8002520:	d002      	beq.n	8002528 <HAL_PCD_IRQHandler+0x764>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f005 f91a 	bl	800775c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	6812      	ldr	r2, [r2, #0]
 8002530:	6851      	ldr	r1, [r2, #4]
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	430a      	orrs	r2, r1
 8002536:	605a      	str	r2, [r3, #4]
 8002538:	e000      	b.n	800253c <HAL_PCD_IRQHandler+0x778>
      return;
 800253a:	bf00      	nop
    }
  }
}
 800253c:	3734      	adds	r7, #52	; 0x34
 800253e:	46bd      	mov	sp, r7
 8002540:	bd90      	pop	{r4, r7, pc}

08002542 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b082      	sub	sp, #8
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
 800254a:	460b      	mov	r3, r1
 800254c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002554:	2b01      	cmp	r3, #1
 8002556:	d101      	bne.n	800255c <HAL_PCD_SetAddress+0x1a>
 8002558:	2302      	movs	r3, #2
 800255a:	e013      	b.n	8002584 <HAL_PCD_SetAddress+0x42>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	78fa      	ldrb	r2, [r7, #3]
 8002568:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	78fa      	ldrb	r2, [r7, #3]
 8002572:	4611      	mov	r1, r2
 8002574:	4618      	mov	r0, r3
 8002576:	f003 f840 	bl	80055fa <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002582:	2300      	movs	r3, #0
}
 8002584:	4618      	mov	r0, r3
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	4608      	mov	r0, r1
 8002596:	4611      	mov	r1, r2
 8002598:	461a      	mov	r2, r3
 800259a:	4603      	mov	r3, r0
 800259c:	70fb      	strb	r3, [r7, #3]
 800259e:	460b      	mov	r3, r1
 80025a0:	803b      	strh	r3, [r7, #0]
 80025a2:	4613      	mov	r3, r2
 80025a4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80025a6:	2300      	movs	r3, #0
 80025a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80025aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	da0f      	bge.n	80025d2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025b2:	78fb      	ldrb	r3, [r7, #3]
 80025b4:	f003 020f 	and.w	r2, r3, #15
 80025b8:	4613      	mov	r3, r2
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	1a9b      	subs	r3, r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	3338      	adds	r3, #56	; 0x38
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	4413      	add	r3, r2
 80025c6:	3304      	adds	r3, #4
 80025c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2201      	movs	r2, #1
 80025ce:	705a      	strb	r2, [r3, #1]
 80025d0:	e00f      	b.n	80025f2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025d2:	78fb      	ldrb	r3, [r7, #3]
 80025d4:	f003 020f 	and.w	r2, r3, #15
 80025d8:	4613      	mov	r3, r2
 80025da:	00db      	lsls	r3, r3, #3
 80025dc:	1a9b      	subs	r3, r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	4413      	add	r3, r2
 80025e8:	3304      	adds	r3, #4
 80025ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2200      	movs	r2, #0
 80025f0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80025f2:	78fb      	ldrb	r3, [r7, #3]
 80025f4:	f003 030f 	and.w	r3, r3, #15
 80025f8:	b2da      	uxtb	r2, r3
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80025fe:	883a      	ldrh	r2, [r7, #0]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	78ba      	ldrb	r2, [r7, #2]
 8002608:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	785b      	ldrb	r3, [r3, #1]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d004      	beq.n	800261c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	b29a      	uxth	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800261c:	78bb      	ldrb	r3, [r7, #2]
 800261e:	2b02      	cmp	r3, #2
 8002620:	d102      	bne.n	8002628 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800262e:	2b01      	cmp	r3, #1
 8002630:	d101      	bne.n	8002636 <HAL_PCD_EP_Open+0xaa>
 8002632:	2302      	movs	r3, #2
 8002634:	e00e      	b.n	8002654 <HAL_PCD_EP_Open+0xc8>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2201      	movs	r2, #1
 800263a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68f9      	ldr	r1, [r7, #12]
 8002644:	4618      	mov	r0, r3
 8002646:	f002 f970 	bl	800492a <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002652:	7afb      	ldrb	r3, [r7, #11]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3710      	adds	r7, #16
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	460b      	mov	r3, r1
 8002666:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002668:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800266c:	2b00      	cmp	r3, #0
 800266e:	da0f      	bge.n	8002690 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002670:	78fb      	ldrb	r3, [r7, #3]
 8002672:	f003 020f 	and.w	r2, r3, #15
 8002676:	4613      	mov	r3, r2
 8002678:	00db      	lsls	r3, r3, #3
 800267a:	1a9b      	subs	r3, r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	3338      	adds	r3, #56	; 0x38
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	4413      	add	r3, r2
 8002684:	3304      	adds	r3, #4
 8002686:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2201      	movs	r2, #1
 800268c:	705a      	strb	r2, [r3, #1]
 800268e:	e00f      	b.n	80026b0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002690:	78fb      	ldrb	r3, [r7, #3]
 8002692:	f003 020f 	and.w	r2, r3, #15
 8002696:	4613      	mov	r3, r2
 8002698:	00db      	lsls	r3, r3, #3
 800269a:	1a9b      	subs	r3, r3, r2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	4413      	add	r3, r2
 80026a6:	3304      	adds	r3, #4
 80026a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2200      	movs	r2, #0
 80026ae:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80026b0:	78fb      	ldrb	r3, [r7, #3]
 80026b2:	f003 030f 	and.w	r3, r3, #15
 80026b6:	b2da      	uxtb	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d101      	bne.n	80026ca <HAL_PCD_EP_Close+0x6e>
 80026c6:	2302      	movs	r3, #2
 80026c8:	e00e      	b.n	80026e8 <HAL_PCD_EP_Close+0x8c>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68f9      	ldr	r1, [r7, #12]
 80026d8:	4618      	mov	r0, r3
 80026da:	f002 f9b1 	bl	8004a40 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3710      	adds	r7, #16
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	607a      	str	r2, [r7, #4]
 80026fa:	603b      	str	r3, [r7, #0]
 80026fc:	460b      	mov	r3, r1
 80026fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002700:	7afb      	ldrb	r3, [r7, #11]
 8002702:	f003 020f 	and.w	r2, r3, #15
 8002706:	4613      	mov	r3, r2
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	1a9b      	subs	r3, r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	4413      	add	r3, r2
 8002716:	3304      	adds	r3, #4
 8002718:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	2200      	movs	r2, #0
 800272a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	2200      	movs	r2, #0
 8002730:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002732:	7afb      	ldrb	r3, [r7, #11]
 8002734:	f003 030f 	and.w	r3, r3, #15
 8002738:	b2da      	uxtb	r2, r3
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d102      	bne.n	800274c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800274c:	7afb      	ldrb	r3, [r7, #11]
 800274e:	f003 030f 	and.w	r3, r3, #15
 8002752:	2b00      	cmp	r3, #0
 8002754:	d109      	bne.n	800276a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6818      	ldr	r0, [r3, #0]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	b2db      	uxtb	r3, r3
 8002760:	461a      	mov	r2, r3
 8002762:	6979      	ldr	r1, [r7, #20]
 8002764:	f002 fcac 	bl	80050c0 <USB_EP0StartXfer>
 8002768:	e008      	b.n	800277c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6818      	ldr	r0, [r3, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	b2db      	uxtb	r3, r3
 8002774:	461a      	mov	r2, r3
 8002776:	6979      	ldr	r1, [r7, #20]
 8002778:	f002 fa46 	bl	8004c08 <USB_EPStartXfer>
  }

  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3718      	adds	r7, #24
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002786:	b480      	push	{r7}
 8002788:	b083      	sub	sp, #12
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
 800278e:	460b      	mov	r3, r1
 8002790:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002792:	78fb      	ldrb	r3, [r7, #3]
 8002794:	f003 020f 	and.w	r2, r3, #15
 8002798:	6879      	ldr	r1, [r7, #4]
 800279a:	4613      	mov	r3, r2
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	1a9b      	subs	r3, r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	440b      	add	r3, r1
 80027a4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80027a8:	681b      	ldr	r3, [r3, #0]
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr

080027b6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b086      	sub	sp, #24
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	60f8      	str	r0, [r7, #12]
 80027be:	607a      	str	r2, [r7, #4]
 80027c0:	603b      	str	r3, [r7, #0]
 80027c2:	460b      	mov	r3, r1
 80027c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027c6:	7afb      	ldrb	r3, [r7, #11]
 80027c8:	f003 020f 	and.w	r2, r3, #15
 80027cc:	4613      	mov	r3, r2
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	1a9b      	subs	r3, r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	3338      	adds	r3, #56	; 0x38
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	4413      	add	r3, r2
 80027da:	3304      	adds	r3, #4
 80027dc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	2200      	movs	r2, #0
 80027ee:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	2201      	movs	r2, #1
 80027f4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027f6:	7afb      	ldrb	r3, [r7, #11]
 80027f8:	f003 030f 	and.w	r3, r3, #15
 80027fc:	b2da      	uxtb	r2, r3
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	2b01      	cmp	r3, #1
 8002808:	d102      	bne.n	8002810 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002810:	7afb      	ldrb	r3, [r7, #11]
 8002812:	f003 030f 	and.w	r3, r3, #15
 8002816:	2b00      	cmp	r3, #0
 8002818:	d109      	bne.n	800282e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6818      	ldr	r0, [r3, #0]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	b2db      	uxtb	r3, r3
 8002824:	461a      	mov	r2, r3
 8002826:	6979      	ldr	r1, [r7, #20]
 8002828:	f002 fc4a 	bl	80050c0 <USB_EP0StartXfer>
 800282c:	e008      	b.n	8002840 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6818      	ldr	r0, [r3, #0]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	b2db      	uxtb	r3, r3
 8002838:	461a      	mov	r2, r3
 800283a:	6979      	ldr	r1, [r7, #20]
 800283c:	f002 f9e4 	bl	8004c08 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3718      	adds	r7, #24
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b084      	sub	sp, #16
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
 8002852:	460b      	mov	r3, r1
 8002854:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002856:	78fb      	ldrb	r3, [r7, #3]
 8002858:	f003 020f 	and.w	r2, r3, #15
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	429a      	cmp	r2, r3
 8002862:	d901      	bls.n	8002868 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e050      	b.n	800290a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002868:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800286c:	2b00      	cmp	r3, #0
 800286e:	da0f      	bge.n	8002890 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002870:	78fb      	ldrb	r3, [r7, #3]
 8002872:	f003 020f 	and.w	r2, r3, #15
 8002876:	4613      	mov	r3, r2
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	1a9b      	subs	r3, r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	3338      	adds	r3, #56	; 0x38
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	4413      	add	r3, r2
 8002884:	3304      	adds	r3, #4
 8002886:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2201      	movs	r2, #1
 800288c:	705a      	strb	r2, [r3, #1]
 800288e:	e00d      	b.n	80028ac <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002890:	78fa      	ldrb	r2, [r7, #3]
 8002892:	4613      	mov	r3, r2
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	1a9b      	subs	r3, r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	4413      	add	r3, r2
 80028a2:	3304      	adds	r3, #4
 80028a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2201      	movs	r2, #1
 80028b0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028b2:	78fb      	ldrb	r3, [r7, #3]
 80028b4:	f003 030f 	and.w	r3, r3, #15
 80028b8:	b2da      	uxtb	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d101      	bne.n	80028cc <HAL_PCD_EP_SetStall+0x82>
 80028c8:	2302      	movs	r3, #2
 80028ca:	e01e      	b.n	800290a <HAL_PCD_EP_SetStall+0xc0>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68f9      	ldr	r1, [r7, #12]
 80028da:	4618      	mov	r0, r3
 80028dc:	f002 fdb1 	bl	8005442 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80028e0:	78fb      	ldrb	r3, [r7, #3]
 80028e2:	f003 030f 	and.w	r3, r3, #15
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d10a      	bne.n	8002900 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6818      	ldr	r0, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	b2d9      	uxtb	r1, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80028fa:	461a      	mov	r2, r3
 80028fc:	f002 ff9e 	bl	800583c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b084      	sub	sp, #16
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
 800291a:	460b      	mov	r3, r1
 800291c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800291e:	78fb      	ldrb	r3, [r7, #3]
 8002920:	f003 020f 	and.w	r2, r3, #15
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	429a      	cmp	r2, r3
 800292a:	d901      	bls.n	8002930 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e042      	b.n	80029b6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002930:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002934:	2b00      	cmp	r3, #0
 8002936:	da0f      	bge.n	8002958 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002938:	78fb      	ldrb	r3, [r7, #3]
 800293a:	f003 020f 	and.w	r2, r3, #15
 800293e:	4613      	mov	r3, r2
 8002940:	00db      	lsls	r3, r3, #3
 8002942:	1a9b      	subs	r3, r3, r2
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	3338      	adds	r3, #56	; 0x38
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	4413      	add	r3, r2
 800294c:	3304      	adds	r3, #4
 800294e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2201      	movs	r2, #1
 8002954:	705a      	strb	r2, [r3, #1]
 8002956:	e00f      	b.n	8002978 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002958:	78fb      	ldrb	r3, [r7, #3]
 800295a:	f003 020f 	and.w	r2, r3, #15
 800295e:	4613      	mov	r3, r2
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	1a9b      	subs	r3, r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	4413      	add	r3, r2
 800296e:	3304      	adds	r3, #4
 8002970:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2200      	movs	r2, #0
 8002976:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2200      	movs	r2, #0
 800297c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800297e:	78fb      	ldrb	r3, [r7, #3]
 8002980:	f003 030f 	and.w	r3, r3, #15
 8002984:	b2da      	uxtb	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002990:	2b01      	cmp	r3, #1
 8002992:	d101      	bne.n	8002998 <HAL_PCD_EP_ClrStall+0x86>
 8002994:	2302      	movs	r3, #2
 8002996:	e00e      	b.n	80029b6 <HAL_PCD_EP_ClrStall+0xa4>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68f9      	ldr	r1, [r7, #12]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f002 fdbd 	bl	8005526 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b08a      	sub	sp, #40	; 0x28
 80029c2:	af02      	add	r7, sp, #8
 80029c4:	6078      	str	r0, [r7, #4]
 80029c6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80029d2:	683a      	ldr	r2, [r7, #0]
 80029d4:	4613      	mov	r3, r2
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	1a9b      	subs	r3, r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	3338      	adds	r3, #56	; 0x38
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	4413      	add	r3, r2
 80029e2:	3304      	adds	r3, #4
 80029e4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	699a      	ldr	r2, [r3, #24]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d901      	bls.n	80029f6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e06d      	b.n	8002ad2 <PCD_WriteEmptyTxFifo+0x114>
  }

  len = ep->xfer_len - ep->xfer_count;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	695a      	ldr	r2, [r3, #20]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	689a      	ldr	r2, [r3, #8]
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d202      	bcs.n	8002a12 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	3303      	adds	r3, #3
 8002a16:	089b      	lsrs	r3, r3, #2
 8002a18:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a1a:	e02b      	b.n	8002a74 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	695a      	ldr	r2, [r3, #20]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d202      	bcs.n	8002a38 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	3303      	adds	r3, #3
 8002a3c:	089b      	lsrs	r3, r3, #2
 8002a3e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	68d9      	ldr	r1, [r3, #12]
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	b2da      	uxtb	r2, r3
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	4603      	mov	r3, r0
 8002a56:	6978      	ldr	r0, [r7, #20]
 8002a58:	f002 fc95 	bl	8005386 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	68da      	ldr	r2, [r3, #12]
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	441a      	add	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	699a      	ldr	r2, [r3, #24]
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	441a      	add	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	015a      	lsls	r2, r3, #5
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d309      	bcc.n	8002a9e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	699a      	ldr	r2, [r3, #24]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d203      	bcs.n	8002a9e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1be      	bne.n	8002a1c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	695a      	ldr	r2, [r3, #20]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d812      	bhi.n	8002ad0 <PCD_WriteEmptyTxFifo+0x112>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	f003 030f 	and.w	r3, r3, #15
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002abe:	4619      	mov	r1, r3
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ac6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	43db      	mvns	r3, r3
 8002acc:	4013      	ands	r3, r2
 8002ace:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3720      	adds	r7, #32
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
	...

08002adc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b086      	sub	sp, #24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	333c      	adds	r3, #60	; 0x3c
 8002af4:	3304      	adds	r3, #4
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	015a      	lsls	r2, r3, #5
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	4413      	add	r3, r2
 8002b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	f040 80a0 	bne.w	8002c54 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	f003 0308 	and.w	r3, r3, #8
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d015      	beq.n	8002b4a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	4a72      	ldr	r2, [pc, #456]	; (8002cec <PCD_EP_OutXfrComplete_int+0x210>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	f240 80dd 	bls.w	8002ce2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f000 80d7 	beq.w	8002ce2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	015a      	lsls	r2, r3, #5
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b40:	461a      	mov	r2, r3
 8002b42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b46:	6093      	str	r3, [r2, #8]
 8002b48:	e0cb      	b.n	8002ce2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	f003 0320 	and.w	r3, r3, #32
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d009      	beq.n	8002b68 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	015a      	lsls	r2, r3, #5
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b60:	461a      	mov	r2, r3
 8002b62:	2320      	movs	r3, #32
 8002b64:	6093      	str	r3, [r2, #8]
 8002b66:	e0bc      	b.n	8002ce2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f040 80b7 	bne.w	8002ce2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	4a5d      	ldr	r2, [pc, #372]	; (8002cec <PCD_EP_OutXfrComplete_int+0x210>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d90f      	bls.n	8002b9c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00a      	beq.n	8002b9c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	015a      	lsls	r2, r3, #5
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b92:	461a      	mov	r2, r3
 8002b94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b98:	6093      	str	r3, [r2, #8]
 8002b9a:	e0a2      	b.n	8002ce2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002b9c:	6879      	ldr	r1, [r7, #4]
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	1a9b      	subs	r3, r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	440b      	add	r3, r1
 8002baa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002bae:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	0159      	lsls	r1, r3, #5
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	440b      	add	r3, r1
 8002bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002bc2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	1a9b      	subs	r3, r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	4403      	add	r3, r0
 8002bd2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002bd6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002bd8:	6879      	ldr	r1, [r7, #4]
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	1a9b      	subs	r3, r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	440b      	add	r3, r1
 8002be6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002bea:	6819      	ldr	r1, [r3, #0]
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	683a      	ldr	r2, [r7, #0]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	1a9b      	subs	r3, r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	4403      	add	r3, r0
 8002bfa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4419      	add	r1, r3
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	4613      	mov	r3, r2
 8002c08:	00db      	lsls	r3, r3, #3
 8002c0a:	1a9b      	subs	r3, r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	4403      	add	r3, r0
 8002c10:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002c14:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d114      	bne.n	8002c46 <PCD_EP_OutXfrComplete_int+0x16a>
 8002c1c:	6879      	ldr	r1, [r7, #4]
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	4613      	mov	r3, r2
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	1a9b      	subs	r3, r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	440b      	add	r3, r1
 8002c2a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d108      	bne.n	8002c46 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6818      	ldr	r0, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002c3e:	461a      	mov	r2, r3
 8002c40:	2101      	movs	r1, #1
 8002c42:	f002 fdfb 	bl	800583c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f004 fcb1 	bl	80075b4 <HAL_PCD_DataOutStageCallback>
 8002c52:	e046      	b.n	8002ce2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	4a26      	ldr	r2, [pc, #152]	; (8002cf0 <PCD_EP_OutXfrComplete_int+0x214>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d124      	bne.n	8002ca6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00a      	beq.n	8002c7c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	015a      	lsls	r2, r3, #5
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c72:	461a      	mov	r2, r3
 8002c74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c78:	6093      	str	r3, [r2, #8]
 8002c7a:	e032      	b.n	8002ce2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	f003 0320 	and.w	r3, r3, #32
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d008      	beq.n	8002c98 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	015a      	lsls	r2, r3, #5
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c92:	461a      	mov	r2, r3
 8002c94:	2320      	movs	r3, #32
 8002c96:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f004 fc88 	bl	80075b4 <HAL_PCD_DataOutStageCallback>
 8002ca4:	e01d      	b.n	8002ce2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d114      	bne.n	8002cd6 <PCD_EP_OutXfrComplete_int+0x1fa>
 8002cac:	6879      	ldr	r1, [r7, #4]
 8002cae:	683a      	ldr	r2, [r7, #0]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	1a9b      	subs	r3, r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	440b      	add	r3, r1
 8002cba:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d108      	bne.n	8002cd6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6818      	ldr	r0, [r3, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002cce:	461a      	mov	r2, r3
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	f002 fdb3 	bl	800583c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	4619      	mov	r1, r3
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f004 fc69 	bl	80075b4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3718      	adds	r7, #24
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	4f54300a 	.word	0x4f54300a
 8002cf0:	4f54310a 	.word	0x4f54310a

08002cf4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	333c      	adds	r3, #60	; 0x3c
 8002d0c:	3304      	adds	r3, #4
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	015a      	lsls	r2, r3, #5
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	4413      	add	r3, r2
 8002d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	4a15      	ldr	r2, [pc, #84]	; (8002d7c <PCD_EP_OutSetupPacket_int+0x88>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d90e      	bls.n	8002d48 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d009      	beq.n	8002d48 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	015a      	lsls	r2, r3, #5
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d40:	461a      	mov	r2, r3
 8002d42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d46:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f004 fc21 	bl	8007590 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	4a0a      	ldr	r2, [pc, #40]	; (8002d7c <PCD_EP_OutSetupPacket_int+0x88>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d90c      	bls.n	8002d70 <PCD_EP_OutSetupPacket_int+0x7c>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d108      	bne.n	8002d70 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6818      	ldr	r0, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002d68:	461a      	mov	r2, r3
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	f002 fd66 	bl	800583c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3718      	adds	r7, #24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	4f54300a 	.word	0x4f54300a

08002d80 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	460b      	mov	r3, r1
 8002d8a:	70fb      	strb	r3, [r7, #3]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d96:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002d98:	78fb      	ldrb	r3, [r7, #3]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d107      	bne.n	8002dae <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	883a      	ldrh	r2, [r7, #0]
 8002da4:	0411      	lsls	r1, r2, #16
 8002da6:	68ba      	ldr	r2, [r7, #8]
 8002da8:	430a      	orrs	r2, r1
 8002daa:	629a      	str	r2, [r3, #40]	; 0x28
 8002dac:	e028      	b.n	8002e00 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db4:	0c1b      	lsrs	r3, r3, #16
 8002db6:	68ba      	ldr	r2, [r7, #8]
 8002db8:	4413      	add	r3, r2
 8002dba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	73fb      	strb	r3, [r7, #15]
 8002dc0:	e00d      	b.n	8002dde <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	7bfb      	ldrb	r3, [r7, #15]
 8002dc8:	3340      	adds	r3, #64	; 0x40
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	4413      	add	r3, r2
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	0c1b      	lsrs	r3, r3, #16
 8002dd2:	68ba      	ldr	r2, [r7, #8]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002dd8:	7bfb      	ldrb	r3, [r7, #15]
 8002dda:	3301      	adds	r3, #1
 8002ddc:	73fb      	strb	r3, [r7, #15]
 8002dde:	7bfa      	ldrb	r2, [r7, #15]
 8002de0:	78fb      	ldrb	r3, [r7, #3]
 8002de2:	3b01      	subs	r3, #1
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d3ec      	bcc.n	8002dc2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6819      	ldr	r1, [r3, #0]
 8002dec:	78fb      	ldrb	r3, [r7, #3]
 8002dee:	3b01      	subs	r3, #1
 8002df0:	883a      	ldrh	r2, [r7, #0]
 8002df2:	0410      	lsls	r0, r2, #16
 8002df4:	68ba      	ldr	r2, [r7, #8]
 8002df6:	4302      	orrs	r2, r0
 8002df8:	3340      	adds	r3, #64	; 0x40
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3714      	adds	r7, #20
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr

08002e0e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	b083      	sub	sp, #12
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
 8002e16:	460b      	mov	r3, r1
 8002e18:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	887a      	ldrh	r2, [r7, #2]
 8002e20:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	460b      	mov	r3, r1
 8002e3a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e25b      	b.n	8003312 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d075      	beq.n	8002f52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e66:	4ba3      	ldr	r3, [pc, #652]	; (80030f4 <HAL_RCC_OscConfig+0x2ac>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f003 030c 	and.w	r3, r3, #12
 8002e6e:	2b04      	cmp	r3, #4
 8002e70:	d00c      	beq.n	8002e8c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e72:	4ba0      	ldr	r3, [pc, #640]	; (80030f4 <HAL_RCC_OscConfig+0x2ac>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e7a:	2b08      	cmp	r3, #8
 8002e7c:	d112      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e7e:	4b9d      	ldr	r3, [pc, #628]	; (80030f4 <HAL_RCC_OscConfig+0x2ac>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e8a:	d10b      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e8c:	4b99      	ldr	r3, [pc, #612]	; (80030f4 <HAL_RCC_OscConfig+0x2ac>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d05b      	beq.n	8002f50 <HAL_RCC_OscConfig+0x108>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d157      	bne.n	8002f50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e236      	b.n	8003312 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eac:	d106      	bne.n	8002ebc <HAL_RCC_OscConfig+0x74>
 8002eae:	4a91      	ldr	r2, [pc, #580]	; (80030f4 <HAL_RCC_OscConfig+0x2ac>)
 8002eb0:	4b90      	ldr	r3, [pc, #576]	; (80030f4 <HAL_RCC_OscConfig+0x2ac>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eb8:	6013      	str	r3, [r2, #0]
 8002eba:	e01d      	b.n	8002ef8 <HAL_RCC_OscConfig+0xb0>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ec4:	d10c      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x98>
 8002ec6:	4a8b      	ldr	r2, [pc, #556]	; (80030f4 <HAL_RCC_OscConfig+0x2ac>)
 8002ec8:	4b8a      	ldr	r3, [pc, #552]	; (80030f4 <HAL_RCC_OscConfig+0x2ac>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ed0:	6013      	str	r3, [r2, #0]
 8002ed2:	4a88      	ldr	r2, [pc, #544]	; (80030f4 <HAL_RCC_OscConfig+0x2ac>)
 8002ed4:	4b87      	ldr	r3, [pc, #540]	; (80030f4 <HAL_RCC_OscConfig+0x2ac>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002edc:	6013      	str	r3, [r2, #0]
 8002ede:	e00b      	b.n	8002ef8 <HAL_RCC_OscConfig+0xb0>
 8002ee0:	4a84      	ldr	r2, [pc, #528]	; (80030f4 <HAL_RCC_OscConfig+0x2ac>)
 8002ee2:	4b84      	ldr	r3, [pc, #528]	; (80030f4 <HAL_RCC_OscConfig+0x2ac>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eea:	6013      	str	r3, [r2, #0]
 8002eec:	4a81      	ldr	r2, [pc, #516]	; (80030f4 <HAL_RCC_OscConfig+0x2ac>)
 8002eee:	4b81      	ldr	r3, [pc, #516]	; (80030f4 <HAL_RCC_OscConfig+0x2ac>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ef6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d013      	beq.n	8002f28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f00:	f7fe fb38 	bl	8001574 <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f08:	f7fe fb34 	bl	8001574 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b64      	cmp	r3, #100	; 0x64
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e1fb      	b.n	8003312 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f1a:	4b76      	ldr	r3, [pc, #472]	; (80030f4 <HAL_RCC_OscConfig+0x2ac>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d0f0      	beq.n	8002f08 <HAL_RCC_OscConfig+0xc0>
 8002f26:	e014      	b.n	8002f52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f28:	f7fe fb24 	bl	8001574 <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f30:	f7fe fb20 	bl	8001574 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b64      	cmp	r3, #100	; 0x64
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e1e7      	b.n	8003312 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f42:	4b6c      	ldr	r3, [pc, #432]	; (80030f4 <HAL_RCC_OscConfig+0x2ac>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1f0      	bne.n	8002f30 <HAL_RCC_OscConfig+0xe8>
 8002f4e:	e000      	b.n	8002f52 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d063      	beq.n	8003026 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f5e:	4b65      	ldr	r3, [pc, #404]	; (80030f4 <HAL_RCC_OscConfig+0x2ac>)
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f003 030c 	and.w	r3, r3, #12
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00b      	beq.n	8002f82 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f6a:	4b62      	ldr	r3, [pc, #392]	; (80030f4 <HAL_RCC_OscConfig+0x2ac>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f72:	2b08      	cmp	r3, #8
 8002f74:	d11c      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f76:	4b5f      	ldr	r3, [pc, #380]	; (80030f4 <HAL_RCC_OscConfig+0x2ac>)
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d116      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f82:	4b5c      	ldr	r3, [pc, #368]	; (80030f4 <HAL_RCC_OscConfig+0x2ac>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d005      	beq.n	8002f9a <HAL_RCC_OscConfig+0x152>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d001      	beq.n	8002f9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e1bb      	b.n	8003312 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f9a:	4956      	ldr	r1, [pc, #344]	; (80030f4 <HAL_RCC_OscConfig+0x2ac>)
 8002f9c:	4b55      	ldr	r3, [pc, #340]	; (80030f4 <HAL_RCC_OscConfig+0x2ac>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	00db      	lsls	r3, r3, #3
 8002faa:	4313      	orrs	r3, r2
 8002fac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fae:	e03a      	b.n	8003026 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d020      	beq.n	8002ffa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fb8:	4b4f      	ldr	r3, [pc, #316]	; (80030f8 <HAL_RCC_OscConfig+0x2b0>)
 8002fba:	2201      	movs	r2, #1
 8002fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fbe:	f7fe fad9 	bl	8001574 <HAL_GetTick>
 8002fc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fc4:	e008      	b.n	8002fd8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fc6:	f7fe fad5 	bl	8001574 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e19c      	b.n	8003312 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fd8:	4b46      	ldr	r3, [pc, #280]	; (80030f4 <HAL_RCC_OscConfig+0x2ac>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d0f0      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fe4:	4943      	ldr	r1, [pc, #268]	; (80030f4 <HAL_RCC_OscConfig+0x2ac>)
 8002fe6:	4b43      	ldr	r3, [pc, #268]	; (80030f4 <HAL_RCC_OscConfig+0x2ac>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	00db      	lsls	r3, r3, #3
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	600b      	str	r3, [r1, #0]
 8002ff8:	e015      	b.n	8003026 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ffa:	4b3f      	ldr	r3, [pc, #252]	; (80030f8 <HAL_RCC_OscConfig+0x2b0>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003000:	f7fe fab8 	bl	8001574 <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003006:	e008      	b.n	800301a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003008:	f7fe fab4 	bl	8001574 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b02      	cmp	r3, #2
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e17b      	b.n	8003312 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800301a:	4b36      	ldr	r3, [pc, #216]	; (80030f4 <HAL_RCC_OscConfig+0x2ac>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1f0      	bne.n	8003008 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0308 	and.w	r3, r3, #8
 800302e:	2b00      	cmp	r3, #0
 8003030:	d030      	beq.n	8003094 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d016      	beq.n	8003068 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800303a:	4b30      	ldr	r3, [pc, #192]	; (80030fc <HAL_RCC_OscConfig+0x2b4>)
 800303c:	2201      	movs	r2, #1
 800303e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003040:	f7fe fa98 	bl	8001574 <HAL_GetTick>
 8003044:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003046:	e008      	b.n	800305a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003048:	f7fe fa94 	bl	8001574 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b02      	cmp	r3, #2
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e15b      	b.n	8003312 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800305a:	4b26      	ldr	r3, [pc, #152]	; (80030f4 <HAL_RCC_OscConfig+0x2ac>)
 800305c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d0f0      	beq.n	8003048 <HAL_RCC_OscConfig+0x200>
 8003066:	e015      	b.n	8003094 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003068:	4b24      	ldr	r3, [pc, #144]	; (80030fc <HAL_RCC_OscConfig+0x2b4>)
 800306a:	2200      	movs	r2, #0
 800306c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800306e:	f7fe fa81 	bl	8001574 <HAL_GetTick>
 8003072:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003074:	e008      	b.n	8003088 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003076:	f7fe fa7d 	bl	8001574 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	2b02      	cmp	r3, #2
 8003082:	d901      	bls.n	8003088 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e144      	b.n	8003312 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003088:	4b1a      	ldr	r3, [pc, #104]	; (80030f4 <HAL_RCC_OscConfig+0x2ac>)
 800308a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1f0      	bne.n	8003076 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0304 	and.w	r3, r3, #4
 800309c:	2b00      	cmp	r3, #0
 800309e:	f000 80a0 	beq.w	80031e2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030a2:	2300      	movs	r3, #0
 80030a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030a6:	4b13      	ldr	r3, [pc, #76]	; (80030f4 <HAL_RCC_OscConfig+0x2ac>)
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d10f      	bne.n	80030d2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030b2:	2300      	movs	r3, #0
 80030b4:	60bb      	str	r3, [r7, #8]
 80030b6:	4a0f      	ldr	r2, [pc, #60]	; (80030f4 <HAL_RCC_OscConfig+0x2ac>)
 80030b8:	4b0e      	ldr	r3, [pc, #56]	; (80030f4 <HAL_RCC_OscConfig+0x2ac>)
 80030ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030c0:	6413      	str	r3, [r2, #64]	; 0x40
 80030c2:	4b0c      	ldr	r3, [pc, #48]	; (80030f4 <HAL_RCC_OscConfig+0x2ac>)
 80030c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ca:	60bb      	str	r3, [r7, #8]
 80030cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030ce:	2301      	movs	r3, #1
 80030d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d2:	4b0b      	ldr	r3, [pc, #44]	; (8003100 <HAL_RCC_OscConfig+0x2b8>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d121      	bne.n	8003122 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030de:	4a08      	ldr	r2, [pc, #32]	; (8003100 <HAL_RCC_OscConfig+0x2b8>)
 80030e0:	4b07      	ldr	r3, [pc, #28]	; (8003100 <HAL_RCC_OscConfig+0x2b8>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030ea:	f7fe fa43 	bl	8001574 <HAL_GetTick>
 80030ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f0:	e011      	b.n	8003116 <HAL_RCC_OscConfig+0x2ce>
 80030f2:	bf00      	nop
 80030f4:	40023800 	.word	0x40023800
 80030f8:	42470000 	.word	0x42470000
 80030fc:	42470e80 	.word	0x42470e80
 8003100:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003104:	f7fe fa36 	bl	8001574 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b02      	cmp	r3, #2
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e0fd      	b.n	8003312 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003116:	4b81      	ldr	r3, [pc, #516]	; (800331c <HAL_RCC_OscConfig+0x4d4>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800311e:	2b00      	cmp	r3, #0
 8003120:	d0f0      	beq.n	8003104 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d106      	bne.n	8003138 <HAL_RCC_OscConfig+0x2f0>
 800312a:	4a7d      	ldr	r2, [pc, #500]	; (8003320 <HAL_RCC_OscConfig+0x4d8>)
 800312c:	4b7c      	ldr	r3, [pc, #496]	; (8003320 <HAL_RCC_OscConfig+0x4d8>)
 800312e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003130:	f043 0301 	orr.w	r3, r3, #1
 8003134:	6713      	str	r3, [r2, #112]	; 0x70
 8003136:	e01c      	b.n	8003172 <HAL_RCC_OscConfig+0x32a>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	2b05      	cmp	r3, #5
 800313e:	d10c      	bne.n	800315a <HAL_RCC_OscConfig+0x312>
 8003140:	4a77      	ldr	r2, [pc, #476]	; (8003320 <HAL_RCC_OscConfig+0x4d8>)
 8003142:	4b77      	ldr	r3, [pc, #476]	; (8003320 <HAL_RCC_OscConfig+0x4d8>)
 8003144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003146:	f043 0304 	orr.w	r3, r3, #4
 800314a:	6713      	str	r3, [r2, #112]	; 0x70
 800314c:	4a74      	ldr	r2, [pc, #464]	; (8003320 <HAL_RCC_OscConfig+0x4d8>)
 800314e:	4b74      	ldr	r3, [pc, #464]	; (8003320 <HAL_RCC_OscConfig+0x4d8>)
 8003150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003152:	f043 0301 	orr.w	r3, r3, #1
 8003156:	6713      	str	r3, [r2, #112]	; 0x70
 8003158:	e00b      	b.n	8003172 <HAL_RCC_OscConfig+0x32a>
 800315a:	4a71      	ldr	r2, [pc, #452]	; (8003320 <HAL_RCC_OscConfig+0x4d8>)
 800315c:	4b70      	ldr	r3, [pc, #448]	; (8003320 <HAL_RCC_OscConfig+0x4d8>)
 800315e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003160:	f023 0301 	bic.w	r3, r3, #1
 8003164:	6713      	str	r3, [r2, #112]	; 0x70
 8003166:	4a6e      	ldr	r2, [pc, #440]	; (8003320 <HAL_RCC_OscConfig+0x4d8>)
 8003168:	4b6d      	ldr	r3, [pc, #436]	; (8003320 <HAL_RCC_OscConfig+0x4d8>)
 800316a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800316c:	f023 0304 	bic.w	r3, r3, #4
 8003170:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d015      	beq.n	80031a6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800317a:	f7fe f9fb 	bl	8001574 <HAL_GetTick>
 800317e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003180:	e00a      	b.n	8003198 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003182:	f7fe f9f7 	bl	8001574 <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003190:	4293      	cmp	r3, r2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e0bc      	b.n	8003312 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003198:	4b61      	ldr	r3, [pc, #388]	; (8003320 <HAL_RCC_OscConfig+0x4d8>)
 800319a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d0ee      	beq.n	8003182 <HAL_RCC_OscConfig+0x33a>
 80031a4:	e014      	b.n	80031d0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031a6:	f7fe f9e5 	bl	8001574 <HAL_GetTick>
 80031aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031ac:	e00a      	b.n	80031c4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031ae:	f7fe f9e1 	bl	8001574 <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031bc:	4293      	cmp	r3, r2
 80031be:	d901      	bls.n	80031c4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e0a6      	b.n	8003312 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031c4:	4b56      	ldr	r3, [pc, #344]	; (8003320 <HAL_RCC_OscConfig+0x4d8>)
 80031c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c8:	f003 0302 	and.w	r3, r3, #2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1ee      	bne.n	80031ae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031d0:	7dfb      	ldrb	r3, [r7, #23]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d105      	bne.n	80031e2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031d6:	4a52      	ldr	r2, [pc, #328]	; (8003320 <HAL_RCC_OscConfig+0x4d8>)
 80031d8:	4b51      	ldr	r3, [pc, #324]	; (8003320 <HAL_RCC_OscConfig+0x4d8>)
 80031da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f000 8092 	beq.w	8003310 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031ec:	4b4c      	ldr	r3, [pc, #304]	; (8003320 <HAL_RCC_OscConfig+0x4d8>)
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f003 030c 	and.w	r3, r3, #12
 80031f4:	2b08      	cmp	r3, #8
 80031f6:	d05c      	beq.n	80032b2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	699b      	ldr	r3, [r3, #24]
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d141      	bne.n	8003284 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003200:	4b48      	ldr	r3, [pc, #288]	; (8003324 <HAL_RCC_OscConfig+0x4dc>)
 8003202:	2200      	movs	r2, #0
 8003204:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003206:	f7fe f9b5 	bl	8001574 <HAL_GetTick>
 800320a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800320c:	e008      	b.n	8003220 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800320e:	f7fe f9b1 	bl	8001574 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	2b02      	cmp	r3, #2
 800321a:	d901      	bls.n	8003220 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e078      	b.n	8003312 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003220:	4b3f      	ldr	r3, [pc, #252]	; (8003320 <HAL_RCC_OscConfig+0x4d8>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1f0      	bne.n	800320e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800322c:	493c      	ldr	r1, [pc, #240]	; (8003320 <HAL_RCC_OscConfig+0x4d8>)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	69da      	ldr	r2, [r3, #28]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	431a      	orrs	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323c:	019b      	lsls	r3, r3, #6
 800323e:	431a      	orrs	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003244:	085b      	lsrs	r3, r3, #1
 8003246:	3b01      	subs	r3, #1
 8003248:	041b      	lsls	r3, r3, #16
 800324a:	431a      	orrs	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003250:	061b      	lsls	r3, r3, #24
 8003252:	4313      	orrs	r3, r2
 8003254:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003256:	4b33      	ldr	r3, [pc, #204]	; (8003324 <HAL_RCC_OscConfig+0x4dc>)
 8003258:	2201      	movs	r2, #1
 800325a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800325c:	f7fe f98a 	bl	8001574 <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003262:	e008      	b.n	8003276 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003264:	f7fe f986 	bl	8001574 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e04d      	b.n	8003312 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003276:	4b2a      	ldr	r3, [pc, #168]	; (8003320 <HAL_RCC_OscConfig+0x4d8>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d0f0      	beq.n	8003264 <HAL_RCC_OscConfig+0x41c>
 8003282:	e045      	b.n	8003310 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003284:	4b27      	ldr	r3, [pc, #156]	; (8003324 <HAL_RCC_OscConfig+0x4dc>)
 8003286:	2200      	movs	r2, #0
 8003288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800328a:	f7fe f973 	bl	8001574 <HAL_GetTick>
 800328e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003290:	e008      	b.n	80032a4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003292:	f7fe f96f 	bl	8001574 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d901      	bls.n	80032a4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e036      	b.n	8003312 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032a4:	4b1e      	ldr	r3, [pc, #120]	; (8003320 <HAL_RCC_OscConfig+0x4d8>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d1f0      	bne.n	8003292 <HAL_RCC_OscConfig+0x44a>
 80032b0:	e02e      	b.n	8003310 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d101      	bne.n	80032be <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e029      	b.n	8003312 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032be:	4b18      	ldr	r3, [pc, #96]	; (8003320 <HAL_RCC_OscConfig+0x4d8>)
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	69db      	ldr	r3, [r3, #28]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d11c      	bne.n	800330c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032dc:	429a      	cmp	r2, r3
 80032de:	d115      	bne.n	800330c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032e6:	4013      	ands	r3, r2
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d10d      	bne.n	800330c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d106      	bne.n	800330c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003308:	429a      	cmp	r2, r3
 800330a:	d001      	beq.n	8003310 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e000      	b.n	8003312 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3718      	adds	r7, #24
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	40007000 	.word	0x40007000
 8003320:	40023800 	.word	0x40023800
 8003324:	42470060 	.word	0x42470060

08003328 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d101      	bne.n	800333c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e0cc      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800333c:	4b68      	ldr	r3, [pc, #416]	; (80034e0 <HAL_RCC_ClockConfig+0x1b8>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 020f 	and.w	r2, r3, #15
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	429a      	cmp	r2, r3
 8003348:	d20c      	bcs.n	8003364 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800334a:	4b65      	ldr	r3, [pc, #404]	; (80034e0 <HAL_RCC_ClockConfig+0x1b8>)
 800334c:	683a      	ldr	r2, [r7, #0]
 800334e:	b2d2      	uxtb	r2, r2
 8003350:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003352:	4b63      	ldr	r3, [pc, #396]	; (80034e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 020f 	and.w	r2, r3, #15
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	429a      	cmp	r2, r3
 800335e:	d001      	beq.n	8003364 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e0b8      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d020      	beq.n	80033b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0304 	and.w	r3, r3, #4
 8003378:	2b00      	cmp	r3, #0
 800337a:	d005      	beq.n	8003388 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800337c:	4a59      	ldr	r2, [pc, #356]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 800337e:	4b59      	ldr	r3, [pc, #356]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003386:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0308 	and.w	r3, r3, #8
 8003390:	2b00      	cmp	r3, #0
 8003392:	d005      	beq.n	80033a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003394:	4a53      	ldr	r2, [pc, #332]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003396:	4b53      	ldr	r3, [pc, #332]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800339e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033a0:	4950      	ldr	r1, [pc, #320]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 80033a2:	4b50      	ldr	r3, [pc, #320]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d044      	beq.n	8003448 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d107      	bne.n	80033d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033c6:	4b47      	ldr	r3, [pc, #284]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d119      	bne.n	8003406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e07f      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d003      	beq.n	80033e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033e2:	2b03      	cmp	r3, #3
 80033e4:	d107      	bne.n	80033f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033e6:	4b3f      	ldr	r3, [pc, #252]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d109      	bne.n	8003406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e06f      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033f6:	4b3b      	ldr	r3, [pc, #236]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e067      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003406:	4937      	ldr	r1, [pc, #220]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003408:	4b36      	ldr	r3, [pc, #216]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f023 0203 	bic.w	r2, r3, #3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	4313      	orrs	r3, r2
 8003416:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003418:	f7fe f8ac 	bl	8001574 <HAL_GetTick>
 800341c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800341e:	e00a      	b.n	8003436 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003420:	f7fe f8a8 	bl	8001574 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	f241 3288 	movw	r2, #5000	; 0x1388
 800342e:	4293      	cmp	r3, r2
 8003430:	d901      	bls.n	8003436 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e04f      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003436:	4b2b      	ldr	r3, [pc, #172]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f003 020c 	and.w	r2, r3, #12
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	429a      	cmp	r2, r3
 8003446:	d1eb      	bne.n	8003420 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003448:	4b25      	ldr	r3, [pc, #148]	; (80034e0 <HAL_RCC_ClockConfig+0x1b8>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 020f 	and.w	r2, r3, #15
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	429a      	cmp	r2, r3
 8003454:	d90c      	bls.n	8003470 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003456:	4b22      	ldr	r3, [pc, #136]	; (80034e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	b2d2      	uxtb	r2, r2
 800345c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800345e:	4b20      	ldr	r3, [pc, #128]	; (80034e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 020f 	and.w	r2, r3, #15
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	429a      	cmp	r2, r3
 800346a:	d001      	beq.n	8003470 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e032      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0304 	and.w	r3, r3, #4
 8003478:	2b00      	cmp	r3, #0
 800347a:	d008      	beq.n	800348e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800347c:	4919      	ldr	r1, [pc, #100]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 800347e:	4b19      	ldr	r3, [pc, #100]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	4313      	orrs	r3, r2
 800348c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0308 	and.w	r3, r3, #8
 8003496:	2b00      	cmp	r3, #0
 8003498:	d009      	beq.n	80034ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800349a:	4912      	ldr	r1, [pc, #72]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 800349c:	4b11      	ldr	r3, [pc, #68]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	00db      	lsls	r3, r3, #3
 80034aa:	4313      	orrs	r3, r2
 80034ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034ae:	f000 f821 	bl	80034f4 <HAL_RCC_GetSysClockFreq>
 80034b2:	4601      	mov	r1, r0
 80034b4:	4b0b      	ldr	r3, [pc, #44]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	091b      	lsrs	r3, r3, #4
 80034ba:	f003 030f 	and.w	r3, r3, #15
 80034be:	4a0a      	ldr	r2, [pc, #40]	; (80034e8 <HAL_RCC_ClockConfig+0x1c0>)
 80034c0:	5cd3      	ldrb	r3, [r2, r3]
 80034c2:	fa21 f303 	lsr.w	r3, r1, r3
 80034c6:	4a09      	ldr	r2, [pc, #36]	; (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 80034c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034ca:	4b09      	ldr	r3, [pc, #36]	; (80034f0 <HAL_RCC_ClockConfig+0x1c8>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7fe f80c 	bl	80014ec <HAL_InitTick>

  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3710      	adds	r7, #16
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	40023c00 	.word	0x40023c00
 80034e4:	40023800 	.word	0x40023800
 80034e8:	08007dac 	.word	0x08007dac
 80034ec:	20000000 	.word	0x20000000
 80034f0:	20000004 	.word	0x20000004

080034f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034f8:	b08f      	sub	sp, #60	; 0x3c
 80034fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80034fc:	2300      	movs	r3, #0
 80034fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003500:	2300      	movs	r3, #0
 8003502:	637b      	str	r3, [r7, #52]	; 0x34
 8003504:	2300      	movs	r3, #0
 8003506:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 8003508:	2300      	movs	r3, #0
 800350a:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800350c:	4b62      	ldr	r3, [pc, #392]	; (8003698 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f003 030c 	and.w	r3, r3, #12
 8003514:	2b04      	cmp	r3, #4
 8003516:	d007      	beq.n	8003528 <HAL_RCC_GetSysClockFreq+0x34>
 8003518:	2b08      	cmp	r3, #8
 800351a:	d008      	beq.n	800352e <HAL_RCC_GetSysClockFreq+0x3a>
 800351c:	2b00      	cmp	r3, #0
 800351e:	f040 80b2 	bne.w	8003686 <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003522:	4b5e      	ldr	r3, [pc, #376]	; (800369c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003524:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 8003526:	e0b1      	b.n	800368c <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003528:	4b5d      	ldr	r3, [pc, #372]	; (80036a0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800352a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800352c:	e0ae      	b.n	800368c <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800352e:	4b5a      	ldr	r3, [pc, #360]	; (8003698 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003536:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003538:	4b57      	ldr	r3, [pc, #348]	; (8003698 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d04e      	beq.n	80035e2 <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003544:	4b54      	ldr	r3, [pc, #336]	; (8003698 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	099b      	lsrs	r3, r3, #6
 800354a:	f04f 0400 	mov.w	r4, #0
 800354e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003552:	f04f 0200 	mov.w	r2, #0
 8003556:	ea01 0103 	and.w	r1, r1, r3
 800355a:	ea02 0204 	and.w	r2, r2, r4
 800355e:	460b      	mov	r3, r1
 8003560:	4614      	mov	r4, r2
 8003562:	0160      	lsls	r0, r4, #5
 8003564:	6278      	str	r0, [r7, #36]	; 0x24
 8003566:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003568:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 800356c:	6278      	str	r0, [r7, #36]	; 0x24
 800356e:	015b      	lsls	r3, r3, #5
 8003570:	623b      	str	r3, [r7, #32]
 8003572:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003576:	1a5b      	subs	r3, r3, r1
 8003578:	eb64 0402 	sbc.w	r4, r4, r2
 800357c:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8003580:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8003584:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8003588:	ebb8 0803 	subs.w	r8, r8, r3
 800358c:	eb69 0904 	sbc.w	r9, r9, r4
 8003590:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003594:	61fb      	str	r3, [r7, #28]
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800359c:	61fb      	str	r3, [r7, #28]
 800359e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80035a2:	61bb      	str	r3, [r7, #24]
 80035a4:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80035a8:	eb18 0801 	adds.w	r8, r8, r1
 80035ac:	eb49 0902 	adc.w	r9, r9, r2
 80035b0:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80035b4:	617b      	str	r3, [r7, #20]
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80035bc:	617b      	str	r3, [r7, #20]
 80035be:	ea4f 2348 	mov.w	r3, r8, lsl #9
 80035c2:	613b      	str	r3, [r7, #16]
 80035c4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80035c8:	4640      	mov	r0, r8
 80035ca:	4649      	mov	r1, r9
 80035cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ce:	f04f 0400 	mov.w	r4, #0
 80035d2:	461a      	mov	r2, r3
 80035d4:	4623      	mov	r3, r4
 80035d6:	f7fd f9e9 	bl	80009ac <__aeabi_uldivmod>
 80035da:	4603      	mov	r3, r0
 80035dc:	460c      	mov	r4, r1
 80035de:	637b      	str	r3, [r7, #52]	; 0x34
 80035e0:	e043      	b.n	800366a <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035e2:	4b2d      	ldr	r3, [pc, #180]	; (8003698 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	099b      	lsrs	r3, r3, #6
 80035e8:	f04f 0400 	mov.w	r4, #0
 80035ec:	f240 11ff 	movw	r1, #511	; 0x1ff
 80035f0:	f04f 0200 	mov.w	r2, #0
 80035f4:	ea01 0103 	and.w	r1, r1, r3
 80035f8:	ea02 0204 	and.w	r2, r2, r4
 80035fc:	460b      	mov	r3, r1
 80035fe:	4614      	mov	r4, r2
 8003600:	0160      	lsls	r0, r4, #5
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	68f8      	ldr	r0, [r7, #12]
 8003606:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	015b      	lsls	r3, r3, #5
 800360e:	60bb      	str	r3, [r7, #8]
 8003610:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003614:	1a5b      	subs	r3, r3, r1
 8003616:	eb64 0402 	sbc.w	r4, r4, r2
 800361a:	01a6      	lsls	r6, r4, #6
 800361c:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8003620:	019d      	lsls	r5, r3, #6
 8003622:	1aed      	subs	r5, r5, r3
 8003624:	eb66 0604 	sbc.w	r6, r6, r4
 8003628:	00f3      	lsls	r3, r6, #3
 800362a:	607b      	str	r3, [r7, #4]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8003632:	607b      	str	r3, [r7, #4]
 8003634:	00eb      	lsls	r3, r5, #3
 8003636:	603b      	str	r3, [r7, #0]
 8003638:	e897 0060 	ldmia.w	r7, {r5, r6}
 800363c:	186d      	adds	r5, r5, r1
 800363e:	eb46 0602 	adc.w	r6, r6, r2
 8003642:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 8003646:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 800364a:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 800364e:	4655      	mov	r5, sl
 8003650:	465e      	mov	r6, fp
 8003652:	4628      	mov	r0, r5
 8003654:	4631      	mov	r1, r6
 8003656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003658:	f04f 0400 	mov.w	r4, #0
 800365c:	461a      	mov	r2, r3
 800365e:	4623      	mov	r3, r4
 8003660:	f7fd f9a4 	bl	80009ac <__aeabi_uldivmod>
 8003664:	4603      	mov	r3, r0
 8003666:	460c      	mov	r4, r1
 8003668:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800366a:	4b0b      	ldr	r3, [pc, #44]	; (8003698 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	0c1b      	lsrs	r3, r3, #16
 8003670:	f003 0303 	and.w	r3, r3, #3
 8003674:	3301      	adds	r3, #1
 8003676:	005b      	lsls	r3, r3, #1
 8003678:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 800367a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800367c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003682:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003684:	e002      	b.n	800368c <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003686:	4b05      	ldr	r3, [pc, #20]	; (800369c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003688:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800368a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800368c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800368e:	4618      	mov	r0, r3
 8003690:	373c      	adds	r7, #60	; 0x3c
 8003692:	46bd      	mov	sp, r7
 8003694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003698:	40023800 	.word	0x40023800
 800369c:	00f42400 	.word	0x00f42400
 80036a0:	007a1200 	.word	0x007a1200

080036a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036a8:	4b03      	ldr	r3, [pc, #12]	; (80036b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80036aa:	681b      	ldr	r3, [r3, #0]
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	20000000 	.word	0x20000000

080036bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e01d      	b.n	800370a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d106      	bne.n	80036e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f7fd fe0a 	bl	80012fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2202      	movs	r2, #2
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	3304      	adds	r3, #4
 80036f8:	4619      	mov	r1, r3
 80036fa:	4610      	mov	r0, r2
 80036fc:	f000 f9fa 	bl	8003af4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003712:	b580      	push	{r7, lr}
 8003714:	b082      	sub	sp, #8
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d101      	bne.n	8003724 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e01d      	b.n	8003760 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800372a:	b2db      	uxtb	r3, r3
 800372c:	2b00      	cmp	r3, #0
 800372e:	d106      	bne.n	800373e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f000 f815 	bl	8003768 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2202      	movs	r2, #2
 8003742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	3304      	adds	r3, #4
 800374e:	4619      	mov	r1, r3
 8003750:	4610      	mov	r0, r2
 8003752:	f000 f9cf 	bl	8003af4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3708      	adds	r7, #8
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003770:	bf00      	nop
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2201      	movs	r2, #1
 800378c:	6839      	ldr	r1, [r7, #0]
 800378e:	4618      	mov	r0, r3
 8003790:	f000 fc9a 	bl	80040c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a15      	ldr	r2, [pc, #84]	; (80037f0 <HAL_TIM_PWM_Start+0x74>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d004      	beq.n	80037a8 <HAL_TIM_PWM_Start+0x2c>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a14      	ldr	r2, [pc, #80]	; (80037f4 <HAL_TIM_PWM_Start+0x78>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d101      	bne.n	80037ac <HAL_TIM_PWM_Start+0x30>
 80037a8:	2301      	movs	r3, #1
 80037aa:	e000      	b.n	80037ae <HAL_TIM_PWM_Start+0x32>
 80037ac:	2300      	movs	r3, #0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d007      	beq.n	80037c2 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	6812      	ldr	r2, [r2, #0]
 80037ba:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80037bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f003 0307 	and.w	r3, r3, #7
 80037cc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2b06      	cmp	r3, #6
 80037d2:	d007      	beq.n	80037e4 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	6812      	ldr	r2, [r2, #0]
 80037dc:	6812      	ldr	r2, [r2, #0]
 80037de:	f042 0201 	orr.w	r2, r2, #1
 80037e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	40010000 	.word	0x40010000
 80037f4:	40010400 	.word	0x40010400

080037f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	60b9      	str	r1, [r7, #8]
 8003802:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800380a:	2b01      	cmp	r3, #1
 800380c:	d101      	bne.n	8003812 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800380e:	2302      	movs	r3, #2
 8003810:	e0b4      	b.n	800397c <HAL_TIM_PWM_ConfigChannel+0x184>
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2202      	movs	r2, #2
 800381e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2b0c      	cmp	r3, #12
 8003826:	f200 809f 	bhi.w	8003968 <HAL_TIM_PWM_ConfigChannel+0x170>
 800382a:	a201      	add	r2, pc, #4	; (adr r2, 8003830 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800382c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003830:	08003865 	.word	0x08003865
 8003834:	08003969 	.word	0x08003969
 8003838:	08003969 	.word	0x08003969
 800383c:	08003969 	.word	0x08003969
 8003840:	080038a5 	.word	0x080038a5
 8003844:	08003969 	.word	0x08003969
 8003848:	08003969 	.word	0x08003969
 800384c:	08003969 	.word	0x08003969
 8003850:	080038e7 	.word	0x080038e7
 8003854:	08003969 	.word	0x08003969
 8003858:	08003969 	.word	0x08003969
 800385c:	08003969 	.word	0x08003969
 8003860:	08003927 	.word	0x08003927
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68b9      	ldr	r1, [r7, #8]
 800386a:	4618      	mov	r0, r3
 800386c:	f000 f9e2 	bl	8003c34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	6812      	ldr	r2, [r2, #0]
 8003878:	6992      	ldr	r2, [r2, #24]
 800387a:	f042 0208 	orr.w	r2, r2, #8
 800387e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68fa      	ldr	r2, [r7, #12]
 8003886:	6812      	ldr	r2, [r2, #0]
 8003888:	6992      	ldr	r2, [r2, #24]
 800388a:	f022 0204 	bic.w	r2, r2, #4
 800388e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	6812      	ldr	r2, [r2, #0]
 8003898:	6991      	ldr	r1, [r2, #24]
 800389a:	68ba      	ldr	r2, [r7, #8]
 800389c:	6912      	ldr	r2, [r2, #16]
 800389e:	430a      	orrs	r2, r1
 80038a0:	619a      	str	r2, [r3, #24]
      break;
 80038a2:	e062      	b.n	800396a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68b9      	ldr	r1, [r7, #8]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f000 fa32 	bl	8003d14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	6812      	ldr	r2, [r2, #0]
 80038b8:	6992      	ldr	r2, [r2, #24]
 80038ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	6812      	ldr	r2, [r2, #0]
 80038c8:	6992      	ldr	r2, [r2, #24]
 80038ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	6812      	ldr	r2, [r2, #0]
 80038d8:	6991      	ldr	r1, [r2, #24]
 80038da:	68ba      	ldr	r2, [r7, #8]
 80038dc:	6912      	ldr	r2, [r2, #16]
 80038de:	0212      	lsls	r2, r2, #8
 80038e0:	430a      	orrs	r2, r1
 80038e2:	619a      	str	r2, [r3, #24]
      break;
 80038e4:	e041      	b.n	800396a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68b9      	ldr	r1, [r7, #8]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f000 fa87 	bl	8003e00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	6812      	ldr	r2, [r2, #0]
 80038fa:	69d2      	ldr	r2, [r2, #28]
 80038fc:	f042 0208 	orr.w	r2, r2, #8
 8003900:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68fa      	ldr	r2, [r7, #12]
 8003908:	6812      	ldr	r2, [r2, #0]
 800390a:	69d2      	ldr	r2, [r2, #28]
 800390c:	f022 0204 	bic.w	r2, r2, #4
 8003910:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	6812      	ldr	r2, [r2, #0]
 800391a:	69d1      	ldr	r1, [r2, #28]
 800391c:	68ba      	ldr	r2, [r7, #8]
 800391e:	6912      	ldr	r2, [r2, #16]
 8003920:	430a      	orrs	r2, r1
 8003922:	61da      	str	r2, [r3, #28]
      break;
 8003924:	e021      	b.n	800396a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68b9      	ldr	r1, [r7, #8]
 800392c:	4618      	mov	r0, r3
 800392e:	f000 fadb 	bl	8003ee8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	6812      	ldr	r2, [r2, #0]
 800393a:	69d2      	ldr	r2, [r2, #28]
 800393c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003940:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	6812      	ldr	r2, [r2, #0]
 800394a:	69d2      	ldr	r2, [r2, #28]
 800394c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003950:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	6812      	ldr	r2, [r2, #0]
 800395a:	69d1      	ldr	r1, [r2, #28]
 800395c:	68ba      	ldr	r2, [r7, #8]
 800395e:	6912      	ldr	r2, [r2, #16]
 8003960:	0212      	lsls	r2, r2, #8
 8003962:	430a      	orrs	r2, r1
 8003964:	61da      	str	r2, [r3, #28]
      break;
 8003966:	e000      	b.n	800396a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003968:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2201      	movs	r2, #1
 800396e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800397a:	2300      	movs	r3, #0
}
 800397c:	4618      	mov	r0, r3
 800397e:	3710      	adds	r7, #16
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003994:	2b01      	cmp	r3, #1
 8003996:	d101      	bne.n	800399c <HAL_TIM_ConfigClockSource+0x18>
 8003998:	2302      	movs	r3, #2
 800399a:	e0a6      	b.n	8003aea <HAL_TIM_ConfigClockSource+0x166>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2202      	movs	r2, #2
 80039a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80039ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039c2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68fa      	ldr	r2, [r7, #12]
 80039ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2b40      	cmp	r3, #64	; 0x40
 80039d2:	d067      	beq.n	8003aa4 <HAL_TIM_ConfigClockSource+0x120>
 80039d4:	2b40      	cmp	r3, #64	; 0x40
 80039d6:	d80b      	bhi.n	80039f0 <HAL_TIM_ConfigClockSource+0x6c>
 80039d8:	2b10      	cmp	r3, #16
 80039da:	d073      	beq.n	8003ac4 <HAL_TIM_ConfigClockSource+0x140>
 80039dc:	2b10      	cmp	r3, #16
 80039de:	d802      	bhi.n	80039e6 <HAL_TIM_ConfigClockSource+0x62>
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d06f      	beq.n	8003ac4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80039e4:	e078      	b.n	8003ad8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80039e6:	2b20      	cmp	r3, #32
 80039e8:	d06c      	beq.n	8003ac4 <HAL_TIM_ConfigClockSource+0x140>
 80039ea:	2b30      	cmp	r3, #48	; 0x30
 80039ec:	d06a      	beq.n	8003ac4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80039ee:	e073      	b.n	8003ad8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80039f0:	2b70      	cmp	r3, #112	; 0x70
 80039f2:	d00d      	beq.n	8003a10 <HAL_TIM_ConfigClockSource+0x8c>
 80039f4:	2b70      	cmp	r3, #112	; 0x70
 80039f6:	d804      	bhi.n	8003a02 <HAL_TIM_ConfigClockSource+0x7e>
 80039f8:	2b50      	cmp	r3, #80	; 0x50
 80039fa:	d033      	beq.n	8003a64 <HAL_TIM_ConfigClockSource+0xe0>
 80039fc:	2b60      	cmp	r3, #96	; 0x60
 80039fe:	d041      	beq.n	8003a84 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003a00:	e06a      	b.n	8003ad8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003a02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a06:	d066      	beq.n	8003ad6 <HAL_TIM_ConfigClockSource+0x152>
 8003a08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a0c:	d017      	beq.n	8003a3e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003a0e:	e063      	b.n	8003ad8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6818      	ldr	r0, [r3, #0]
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	6899      	ldr	r1, [r3, #8]
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	685a      	ldr	r2, [r3, #4]
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	f000 fb32 	bl	8004088 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a32:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	609a      	str	r2, [r3, #8]
      break;
 8003a3c:	e04c      	b.n	8003ad8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6818      	ldr	r0, [r3, #0]
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	6899      	ldr	r1, [r3, #8]
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	685a      	ldr	r2, [r3, #4]
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	f000 fb1b 	bl	8004088 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	6812      	ldr	r2, [r2, #0]
 8003a5a:	6892      	ldr	r2, [r2, #8]
 8003a5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a60:	609a      	str	r2, [r3, #8]
      break;
 8003a62:	e039      	b.n	8003ad8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6818      	ldr	r0, [r3, #0]
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	6859      	ldr	r1, [r3, #4]
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	461a      	mov	r2, r3
 8003a72:	f000 fa8f 	bl	8003f94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2150      	movs	r1, #80	; 0x50
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f000 fae8 	bl	8004052 <TIM_ITRx_SetConfig>
      break;
 8003a82:	e029      	b.n	8003ad8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6818      	ldr	r0, [r3, #0]
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	6859      	ldr	r1, [r3, #4]
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	461a      	mov	r2, r3
 8003a92:	f000 faae 	bl	8003ff2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2160      	movs	r1, #96	; 0x60
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f000 fad8 	bl	8004052 <TIM_ITRx_SetConfig>
      break;
 8003aa2:	e019      	b.n	8003ad8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6818      	ldr	r0, [r3, #0]
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	6859      	ldr	r1, [r3, #4]
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	f000 fa6f 	bl	8003f94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2140      	movs	r1, #64	; 0x40
 8003abc:	4618      	mov	r0, r3
 8003abe:	f000 fac8 	bl	8004052 <TIM_ITRx_SetConfig>
      break;
 8003ac2:	e009      	b.n	8003ad8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4619      	mov	r1, r3
 8003ace:	4610      	mov	r0, r2
 8003ad0:	f000 fabf 	bl	8004052 <TIM_ITRx_SetConfig>
      break;
 8003ad4:	e000      	b.n	8003ad8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003ad6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
	...

08003af4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b085      	sub	sp, #20
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a40      	ldr	r2, [pc, #256]	; (8003c08 <TIM_Base_SetConfig+0x114>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d013      	beq.n	8003b34 <TIM_Base_SetConfig+0x40>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b12:	d00f      	beq.n	8003b34 <TIM_Base_SetConfig+0x40>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a3d      	ldr	r2, [pc, #244]	; (8003c0c <TIM_Base_SetConfig+0x118>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d00b      	beq.n	8003b34 <TIM_Base_SetConfig+0x40>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a3c      	ldr	r2, [pc, #240]	; (8003c10 <TIM_Base_SetConfig+0x11c>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d007      	beq.n	8003b34 <TIM_Base_SetConfig+0x40>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a3b      	ldr	r2, [pc, #236]	; (8003c14 <TIM_Base_SetConfig+0x120>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d003      	beq.n	8003b34 <TIM_Base_SetConfig+0x40>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4a3a      	ldr	r2, [pc, #232]	; (8003c18 <TIM_Base_SetConfig+0x124>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d108      	bne.n	8003b46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a2f      	ldr	r2, [pc, #188]	; (8003c08 <TIM_Base_SetConfig+0x114>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d02b      	beq.n	8003ba6 <TIM_Base_SetConfig+0xb2>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b54:	d027      	beq.n	8003ba6 <TIM_Base_SetConfig+0xb2>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a2c      	ldr	r2, [pc, #176]	; (8003c0c <TIM_Base_SetConfig+0x118>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d023      	beq.n	8003ba6 <TIM_Base_SetConfig+0xb2>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a2b      	ldr	r2, [pc, #172]	; (8003c10 <TIM_Base_SetConfig+0x11c>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d01f      	beq.n	8003ba6 <TIM_Base_SetConfig+0xb2>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a2a      	ldr	r2, [pc, #168]	; (8003c14 <TIM_Base_SetConfig+0x120>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d01b      	beq.n	8003ba6 <TIM_Base_SetConfig+0xb2>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a29      	ldr	r2, [pc, #164]	; (8003c18 <TIM_Base_SetConfig+0x124>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d017      	beq.n	8003ba6 <TIM_Base_SetConfig+0xb2>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a28      	ldr	r2, [pc, #160]	; (8003c1c <TIM_Base_SetConfig+0x128>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d013      	beq.n	8003ba6 <TIM_Base_SetConfig+0xb2>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a27      	ldr	r2, [pc, #156]	; (8003c20 <TIM_Base_SetConfig+0x12c>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d00f      	beq.n	8003ba6 <TIM_Base_SetConfig+0xb2>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a26      	ldr	r2, [pc, #152]	; (8003c24 <TIM_Base_SetConfig+0x130>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d00b      	beq.n	8003ba6 <TIM_Base_SetConfig+0xb2>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a25      	ldr	r2, [pc, #148]	; (8003c28 <TIM_Base_SetConfig+0x134>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d007      	beq.n	8003ba6 <TIM_Base_SetConfig+0xb2>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a24      	ldr	r2, [pc, #144]	; (8003c2c <TIM_Base_SetConfig+0x138>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d003      	beq.n	8003ba6 <TIM_Base_SetConfig+0xb2>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a23      	ldr	r2, [pc, #140]	; (8003c30 <TIM_Base_SetConfig+0x13c>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d108      	bne.n	8003bb8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	689a      	ldr	r2, [r3, #8]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a0a      	ldr	r2, [pc, #40]	; (8003c08 <TIM_Base_SetConfig+0x114>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d003      	beq.n	8003bec <TIM_Base_SetConfig+0xf8>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a0c      	ldr	r2, [pc, #48]	; (8003c18 <TIM_Base_SetConfig+0x124>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d103      	bne.n	8003bf4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	691a      	ldr	r2, [r3, #16]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	615a      	str	r2, [r3, #20]
}
 8003bfa:	bf00      	nop
 8003bfc:	3714      	adds	r7, #20
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	40010000 	.word	0x40010000
 8003c0c:	40000400 	.word	0x40000400
 8003c10:	40000800 	.word	0x40000800
 8003c14:	40000c00 	.word	0x40000c00
 8003c18:	40010400 	.word	0x40010400
 8003c1c:	40014000 	.word	0x40014000
 8003c20:	40014400 	.word	0x40014400
 8003c24:	40014800 	.word	0x40014800
 8003c28:	40001800 	.word	0x40001800
 8003c2c:	40001c00 	.word	0x40001c00
 8003c30:	40002000 	.word	0x40002000

08003c34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b087      	sub	sp, #28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a1b      	ldr	r3, [r3, #32]
 8003c42:	f023 0201 	bic.w	r2, r3, #1
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f023 0303 	bic.w	r3, r3, #3
 8003c6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	f023 0302 	bic.w	r3, r3, #2
 8003c7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	697a      	ldr	r2, [r7, #20]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a20      	ldr	r2, [pc, #128]	; (8003d0c <TIM_OC1_SetConfig+0xd8>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d003      	beq.n	8003c98 <TIM_OC1_SetConfig+0x64>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a1f      	ldr	r2, [pc, #124]	; (8003d10 <TIM_OC1_SetConfig+0xdc>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d10c      	bne.n	8003cb2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	f023 0308 	bic.w	r3, r3, #8
 8003c9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	697a      	ldr	r2, [r7, #20]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	f023 0304 	bic.w	r3, r3, #4
 8003cb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a15      	ldr	r2, [pc, #84]	; (8003d0c <TIM_OC1_SetConfig+0xd8>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d003      	beq.n	8003cc2 <TIM_OC1_SetConfig+0x8e>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a14      	ldr	r2, [pc, #80]	; (8003d10 <TIM_OC1_SetConfig+0xdc>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d111      	bne.n	8003ce6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003cd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	685a      	ldr	r2, [r3, #4]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	621a      	str	r2, [r3, #32]
}
 8003d00:	bf00      	nop
 8003d02:	371c      	adds	r7, #28
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr
 8003d0c:	40010000 	.word	0x40010000
 8003d10:	40010400 	.word	0x40010400

08003d14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b087      	sub	sp, #28
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	f023 0210 	bic.w	r2, r3, #16
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	021b      	lsls	r3, r3, #8
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	f023 0320 	bic.w	r3, r3, #32
 8003d5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	011b      	lsls	r3, r3, #4
 8003d66:	697a      	ldr	r2, [r7, #20]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a22      	ldr	r2, [pc, #136]	; (8003df8 <TIM_OC2_SetConfig+0xe4>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d003      	beq.n	8003d7c <TIM_OC2_SetConfig+0x68>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a21      	ldr	r2, [pc, #132]	; (8003dfc <TIM_OC2_SetConfig+0xe8>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d10d      	bne.n	8003d98 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	011b      	lsls	r3, r3, #4
 8003d8a:	697a      	ldr	r2, [r7, #20]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d96:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a17      	ldr	r2, [pc, #92]	; (8003df8 <TIM_OC2_SetConfig+0xe4>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d003      	beq.n	8003da8 <TIM_OC2_SetConfig+0x94>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a16      	ldr	r2, [pc, #88]	; (8003dfc <TIM_OC2_SetConfig+0xe8>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d113      	bne.n	8003dd0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003dae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003db6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	695b      	ldr	r3, [r3, #20]
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	693a      	ldr	r2, [r7, #16]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685a      	ldr	r2, [r3, #4]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	697a      	ldr	r2, [r7, #20]
 8003de8:	621a      	str	r2, [r3, #32]
}
 8003dea:	bf00      	nop
 8003dec:	371c      	adds	r7, #28
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	40010000 	.word	0x40010000
 8003dfc:	40010400 	.word	0x40010400

08003e00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b087      	sub	sp, #28
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a1b      	ldr	r3, [r3, #32]
 8003e1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	69db      	ldr	r3, [r3, #28]
 8003e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f023 0303 	bic.w	r3, r3, #3
 8003e36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	021b      	lsls	r3, r3, #8
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a21      	ldr	r2, [pc, #132]	; (8003ee0 <TIM_OC3_SetConfig+0xe0>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d003      	beq.n	8003e66 <TIM_OC3_SetConfig+0x66>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a20      	ldr	r2, [pc, #128]	; (8003ee4 <TIM_OC3_SetConfig+0xe4>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d10d      	bne.n	8003e82 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	021b      	lsls	r3, r3, #8
 8003e74:	697a      	ldr	r2, [r7, #20]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a16      	ldr	r2, [pc, #88]	; (8003ee0 <TIM_OC3_SetConfig+0xe0>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d003      	beq.n	8003e92 <TIM_OC3_SetConfig+0x92>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a15      	ldr	r2, [pc, #84]	; (8003ee4 <TIM_OC3_SetConfig+0xe4>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d113      	bne.n	8003eba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ea0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	011b      	lsls	r3, r3, #4
 8003ea8:	693a      	ldr	r2, [r7, #16]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	011b      	lsls	r3, r3, #4
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	685a      	ldr	r2, [r3, #4]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	697a      	ldr	r2, [r7, #20]
 8003ed2:	621a      	str	r2, [r3, #32]
}
 8003ed4:	bf00      	nop
 8003ed6:	371c      	adds	r7, #28
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr
 8003ee0:	40010000 	.word	0x40010000
 8003ee4:	40010400 	.word	0x40010400

08003ee8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b087      	sub	sp, #28
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
 8003ef6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	69db      	ldr	r3, [r3, #28]
 8003f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	021b      	lsls	r3, r3, #8
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	031b      	lsls	r3, r3, #12
 8003f3a:	693a      	ldr	r2, [r7, #16]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a12      	ldr	r2, [pc, #72]	; (8003f8c <TIM_OC4_SetConfig+0xa4>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d003      	beq.n	8003f50 <TIM_OC4_SetConfig+0x68>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a11      	ldr	r2, [pc, #68]	; (8003f90 <TIM_OC4_SetConfig+0xa8>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d109      	bne.n	8003f64 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	695b      	ldr	r3, [r3, #20]
 8003f5c:	019b      	lsls	r3, r3, #6
 8003f5e:	697a      	ldr	r2, [r7, #20]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	697a      	ldr	r2, [r7, #20]
 8003f68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	685a      	ldr	r2, [r3, #4]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	621a      	str	r2, [r3, #32]
}
 8003f7e:	bf00      	nop
 8003f80:	371c      	adds	r7, #28
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	40010000 	.word	0x40010000
 8003f90:	40010400 	.word	0x40010400

08003f94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b087      	sub	sp, #28
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6a1b      	ldr	r3, [r3, #32]
 8003fa4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	f023 0201 	bic.w	r2, r3, #1
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	011b      	lsls	r3, r3, #4
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	f023 030a 	bic.w	r3, r3, #10
 8003fd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fd2:	697a      	ldr	r2, [r7, #20]
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	693a      	ldr	r2, [r7, #16]
 8003fde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	621a      	str	r2, [r3, #32]
}
 8003fe6:	bf00      	nop
 8003fe8:	371c      	adds	r7, #28
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr

08003ff2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b087      	sub	sp, #28
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	60f8      	str	r0, [r7, #12]
 8003ffa:	60b9      	str	r1, [r7, #8]
 8003ffc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6a1b      	ldr	r3, [r3, #32]
 8004002:	f023 0210 	bic.w	r2, r3, #16
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6a1b      	ldr	r3, [r3, #32]
 8004014:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800401c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	031b      	lsls	r3, r3, #12
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	4313      	orrs	r3, r2
 8004026:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800402e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	011b      	lsls	r3, r3, #4
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	4313      	orrs	r3, r2
 8004038:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	697a      	ldr	r2, [r7, #20]
 800403e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	693a      	ldr	r2, [r7, #16]
 8004044:	621a      	str	r2, [r3, #32]
}
 8004046:	bf00      	nop
 8004048:	371c      	adds	r7, #28
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr

08004052 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004052:	b480      	push	{r7}
 8004054:	b085      	sub	sp, #20
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
 800405a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004068:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800406a:	683a      	ldr	r2, [r7, #0]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4313      	orrs	r3, r2
 8004070:	f043 0307 	orr.w	r3, r3, #7
 8004074:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68fa      	ldr	r2, [r7, #12]
 800407a:	609a      	str	r2, [r3, #8]
}
 800407c:	bf00      	nop
 800407e:	3714      	adds	r7, #20
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004088:	b480      	push	{r7}
 800408a:	b087      	sub	sp, #28
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
 8004094:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	021a      	lsls	r2, r3, #8
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	431a      	orrs	r2, r3
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	697a      	ldr	r2, [r7, #20]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	609a      	str	r2, [r3, #8]
}
 80040bc:	bf00      	nop
 80040be:	371c      	adds	r7, #28
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b087      	sub	sp, #28
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	f003 031f 	and.w	r3, r3, #31
 80040da:	2201      	movs	r2, #1
 80040dc:	fa02 f303 	lsl.w	r3, r2, r3
 80040e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6a1a      	ldr	r2, [r3, #32]
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	43db      	mvns	r3, r3
 80040ea:	401a      	ands	r2, r3
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6a1a      	ldr	r2, [r3, #32]
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	f003 031f 	and.w	r3, r3, #31
 80040fa:	6879      	ldr	r1, [r7, #4]
 80040fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004100:	431a      	orrs	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	621a      	str	r2, [r3, #32]
}
 8004106:	bf00      	nop
 8004108:	371c      	adds	r7, #28
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
	...

08004114 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004114:	b480      	push	{r7}
 8004116:	b085      	sub	sp, #20
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004124:	2b01      	cmp	r3, #1
 8004126:	d101      	bne.n	800412c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004128:	2302      	movs	r3, #2
 800412a:	e05a      	b.n	80041e2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2202      	movs	r2, #2
 8004138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004152:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	4313      	orrs	r3, r2
 800415c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a21      	ldr	r2, [pc, #132]	; (80041f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d022      	beq.n	80041b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004178:	d01d      	beq.n	80041b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a1d      	ldr	r2, [pc, #116]	; (80041f4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d018      	beq.n	80041b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a1b      	ldr	r2, [pc, #108]	; (80041f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d013      	beq.n	80041b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a1a      	ldr	r2, [pc, #104]	; (80041fc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d00e      	beq.n	80041b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a18      	ldr	r2, [pc, #96]	; (8004200 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d009      	beq.n	80041b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a17      	ldr	r2, [pc, #92]	; (8004204 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d004      	beq.n	80041b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a15      	ldr	r2, [pc, #84]	; (8004208 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d10c      	bne.n	80041d0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	68ba      	ldr	r2, [r7, #8]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68ba      	ldr	r2, [r7, #8]
 80041ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3714      	adds	r7, #20
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	40010000 	.word	0x40010000
 80041f4:	40000400 	.word	0x40000400
 80041f8:	40000800 	.word	0x40000800
 80041fc:	40000c00 	.word	0x40000c00
 8004200:	40010400 	.word	0x40010400
 8004204:	40014000 	.word	0x40014000
 8004208:	40001800 	.word	0x40001800

0800420c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800420c:	b480      	push	{r7}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004216:	2300      	movs	r3, #0
 8004218:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004220:	2b01      	cmp	r3, #1
 8004222:	d101      	bne.n	8004228 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004224:	2302      	movs	r3, #2
 8004226:	e03d      	b.n	80042a4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	4313      	orrs	r3, r2
 800423c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	4313      	orrs	r3, r2
 800424a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	4313      	orrs	r3, r2
 8004258:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4313      	orrs	r3, r2
 8004266:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	4313      	orrs	r3, r2
 8004274:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	695b      	ldr	r3, [r3, #20]
 8004280:	4313      	orrs	r3, r2
 8004282:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	69db      	ldr	r3, [r3, #28]
 800428e:	4313      	orrs	r3, r2
 8004290:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042a2:	2300      	movs	r3, #0
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3714      	adds	r7, #20
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80042b0:	b084      	sub	sp, #16
 80042b2:	b580      	push	{r7, lr}
 80042b4:	b084      	sub	sp, #16
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
 80042ba:	f107 001c 	add.w	r0, r7, #28
 80042be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80042c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d122      	bne.n	800430e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80042dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80042f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d105      	bne.n	8004302 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f001 fafc 	bl	8005900 <USB_CoreReset>
 8004308:	4603      	mov	r3, r0
 800430a:	73fb      	strb	r3, [r7, #15]
 800430c:	e01a      	b.n	8004344 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f001 faf0 	bl	8005900 <USB_CoreReset>
 8004320:	4603      	mov	r3, r0
 8004322:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004324:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004326:	2b00      	cmp	r3, #0
 8004328:	d106      	bne.n	8004338 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800432e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	639a      	str	r2, [r3, #56]	; 0x38
 8004336:	e005      	b.n	8004344 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800433c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004346:	2b01      	cmp	r3, #1
 8004348:	d10b      	bne.n	8004362 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f043 0206 	orr.w	r2, r3, #6
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f043 0220 	orr.w	r2, r3, #32
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004362:	7bfb      	ldrb	r3, [r7, #15]
}
 8004364:	4618      	mov	r0, r3
 8004366:	3710      	adds	r7, #16
 8004368:	46bd      	mov	sp, r7
 800436a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800436e:	b004      	add	sp, #16
 8004370:	4770      	bx	lr
	...

08004374 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004374:	b480      	push	{r7}
 8004376:	b087      	sub	sp, #28
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	4613      	mov	r3, r2
 8004380:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004382:	79fb      	ldrb	r3, [r7, #7]
 8004384:	2b02      	cmp	r3, #2
 8004386:	d165      	bne.n	8004454 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	4a41      	ldr	r2, [pc, #260]	; (8004490 <USB_SetTurnaroundTime+0x11c>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d906      	bls.n	800439e <USB_SetTurnaroundTime+0x2a>
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	4a40      	ldr	r2, [pc, #256]	; (8004494 <USB_SetTurnaroundTime+0x120>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d802      	bhi.n	800439e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004398:	230f      	movs	r3, #15
 800439a:	617b      	str	r3, [r7, #20]
 800439c:	e062      	b.n	8004464 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	4a3c      	ldr	r2, [pc, #240]	; (8004494 <USB_SetTurnaroundTime+0x120>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d906      	bls.n	80043b4 <USB_SetTurnaroundTime+0x40>
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	4a3b      	ldr	r2, [pc, #236]	; (8004498 <USB_SetTurnaroundTime+0x124>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d802      	bhi.n	80043b4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80043ae:	230e      	movs	r3, #14
 80043b0:	617b      	str	r3, [r7, #20]
 80043b2:	e057      	b.n	8004464 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	4a38      	ldr	r2, [pc, #224]	; (8004498 <USB_SetTurnaroundTime+0x124>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d906      	bls.n	80043ca <USB_SetTurnaroundTime+0x56>
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	4a37      	ldr	r2, [pc, #220]	; (800449c <USB_SetTurnaroundTime+0x128>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d802      	bhi.n	80043ca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80043c4:	230d      	movs	r3, #13
 80043c6:	617b      	str	r3, [r7, #20]
 80043c8:	e04c      	b.n	8004464 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	4a33      	ldr	r2, [pc, #204]	; (800449c <USB_SetTurnaroundTime+0x128>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d906      	bls.n	80043e0 <USB_SetTurnaroundTime+0x6c>
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	4a32      	ldr	r2, [pc, #200]	; (80044a0 <USB_SetTurnaroundTime+0x12c>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d802      	bhi.n	80043e0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80043da:	230c      	movs	r3, #12
 80043dc:	617b      	str	r3, [r7, #20]
 80043de:	e041      	b.n	8004464 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	4a2f      	ldr	r2, [pc, #188]	; (80044a0 <USB_SetTurnaroundTime+0x12c>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d906      	bls.n	80043f6 <USB_SetTurnaroundTime+0x82>
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	4a2e      	ldr	r2, [pc, #184]	; (80044a4 <USB_SetTurnaroundTime+0x130>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d802      	bhi.n	80043f6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80043f0:	230b      	movs	r3, #11
 80043f2:	617b      	str	r3, [r7, #20]
 80043f4:	e036      	b.n	8004464 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	4a2a      	ldr	r2, [pc, #168]	; (80044a4 <USB_SetTurnaroundTime+0x130>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d906      	bls.n	800440c <USB_SetTurnaroundTime+0x98>
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	4a29      	ldr	r2, [pc, #164]	; (80044a8 <USB_SetTurnaroundTime+0x134>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d802      	bhi.n	800440c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004406:	230a      	movs	r3, #10
 8004408:	617b      	str	r3, [r7, #20]
 800440a:	e02b      	b.n	8004464 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	4a26      	ldr	r2, [pc, #152]	; (80044a8 <USB_SetTurnaroundTime+0x134>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d906      	bls.n	8004422 <USB_SetTurnaroundTime+0xae>
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	4a25      	ldr	r2, [pc, #148]	; (80044ac <USB_SetTurnaroundTime+0x138>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d802      	bhi.n	8004422 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800441c:	2309      	movs	r3, #9
 800441e:	617b      	str	r3, [r7, #20]
 8004420:	e020      	b.n	8004464 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	4a21      	ldr	r2, [pc, #132]	; (80044ac <USB_SetTurnaroundTime+0x138>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d906      	bls.n	8004438 <USB_SetTurnaroundTime+0xc4>
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	4a20      	ldr	r2, [pc, #128]	; (80044b0 <USB_SetTurnaroundTime+0x13c>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d802      	bhi.n	8004438 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004432:	2308      	movs	r3, #8
 8004434:	617b      	str	r3, [r7, #20]
 8004436:	e015      	b.n	8004464 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	4a1d      	ldr	r2, [pc, #116]	; (80044b0 <USB_SetTurnaroundTime+0x13c>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d906      	bls.n	800444e <USB_SetTurnaroundTime+0xda>
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	4a1c      	ldr	r2, [pc, #112]	; (80044b4 <USB_SetTurnaroundTime+0x140>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d802      	bhi.n	800444e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004448:	2307      	movs	r3, #7
 800444a:	617b      	str	r3, [r7, #20]
 800444c:	e00a      	b.n	8004464 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800444e:	2306      	movs	r3, #6
 8004450:	617b      	str	r3, [r7, #20]
 8004452:	e007      	b.n	8004464 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004454:	79fb      	ldrb	r3, [r7, #7]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d102      	bne.n	8004460 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800445a:	2309      	movs	r3, #9
 800445c:	617b      	str	r3, [r7, #20]
 800445e:	e001      	b.n	8004464 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004460:	2309      	movs	r3, #9
 8004462:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	68da      	ldr	r2, [r3, #12]
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	029b      	lsls	r3, r3, #10
 8004478:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800447c:	431a      	orrs	r2, r3
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	371c      	adds	r7, #28
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr
 8004490:	00d8acbf 	.word	0x00d8acbf
 8004494:	00e4e1bf 	.word	0x00e4e1bf
 8004498:	00f423ff 	.word	0x00f423ff
 800449c:	0106737f 	.word	0x0106737f
 80044a0:	011a499f 	.word	0x011a499f
 80044a4:	01312cff 	.word	0x01312cff
 80044a8:	014ca43f 	.word	0x014ca43f
 80044ac:	016e35ff 	.word	0x016e35ff
 80044b0:	01a6ab1f 	.word	0x01a6ab1f
 80044b4:	01e847ff 	.word	0x01e847ff

080044b8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f043 0201 	orr.w	r2, r3, #1
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	370c      	adds	r7, #12
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr

080044da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80044da:	b480      	push	{r7}
 80044dc:	b083      	sub	sp, #12
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f023 0201 	bic.w	r2, r3, #1
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	460b      	mov	r3, r1
 8004506:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004514:	78fb      	ldrb	r3, [r7, #3]
 8004516:	2b01      	cmp	r3, #1
 8004518:	d106      	bne.n	8004528 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	60da      	str	r2, [r3, #12]
 8004526:	e00b      	b.n	8004540 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004528:	78fb      	ldrb	r3, [r7, #3]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d106      	bne.n	800453c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	60da      	str	r2, [r3, #12]
 800453a:	e001      	b.n	8004540 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e003      	b.n	8004548 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004540:	2032      	movs	r0, #50	; 0x32
 8004542:	f7fd f823 	bl	800158c <HAL_Delay>

  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3708      	adds	r7, #8
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004550:	b084      	sub	sp, #16
 8004552:	b580      	push	{r7, lr}
 8004554:	b086      	sub	sp, #24
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
 800455a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800455e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004562:	2300      	movs	r3, #0
 8004564:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800456a:	2300      	movs	r3, #0
 800456c:	613b      	str	r3, [r7, #16]
 800456e:	e009      	b.n	8004584 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	3340      	adds	r3, #64	; 0x40
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	4413      	add	r3, r2
 800457a:	2200      	movs	r2, #0
 800457c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	3301      	adds	r3, #1
 8004582:	613b      	str	r3, [r7, #16]
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	2b0e      	cmp	r3, #14
 8004588:	d9f2      	bls.n	8004570 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800458a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800458c:	2b00      	cmp	r3, #0
 800458e:	d11d      	bne.n	80045cc <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004596:	461a      	mov	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f043 0302 	orr.w	r3, r3, #2
 80045a4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045aa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	639a      	str	r2, [r3, #56]	; 0x38
 80045ca:	e00b      	b.n	80045e4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045dc:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80045ea:	461a      	mov	r2, r3
 80045ec:	2300      	movs	r3, #0
 80045ee:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045f6:	461a      	mov	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004604:	2b01      	cmp	r3, #1
 8004606:	d10c      	bne.n	8004622 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800460a:	2b00      	cmp	r3, #0
 800460c:	d104      	bne.n	8004618 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800460e:	2100      	movs	r1, #0
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 f94b 	bl	80048ac <USB_SetDevSpeed>
 8004616:	e008      	b.n	800462a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004618:	2101      	movs	r1, #1
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 f946 	bl	80048ac <USB_SetDevSpeed>
 8004620:	e003      	b.n	800462a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004622:	2103      	movs	r1, #3
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f000 f941 	bl	80048ac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800462a:	2110      	movs	r1, #16
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 f8f5 	bl	800481c <USB_FlushTxFifo>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d001      	beq.n	800463c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f000 f913 	bl	8004868 <USB_FlushRxFifo>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d001      	beq.n	800464c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004652:	461a      	mov	r2, r3
 8004654:	2300      	movs	r3, #0
 8004656:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800465e:	461a      	mov	r2, r3
 8004660:	2300      	movs	r3, #0
 8004662:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800466a:	461a      	mov	r2, r3
 800466c:	2300      	movs	r3, #0
 800466e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004670:	2300      	movs	r3, #0
 8004672:	613b      	str	r3, [r7, #16]
 8004674:	e043      	b.n	80046fe <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	015a      	lsls	r2, r3, #5
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	4413      	add	r3, r2
 800467e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004688:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800468c:	d118      	bne.n	80046c0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d10a      	bne.n	80046aa <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	015a      	lsls	r2, r3, #5
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	4413      	add	r3, r2
 800469c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046a0:	461a      	mov	r2, r3
 80046a2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80046a6:	6013      	str	r3, [r2, #0]
 80046a8:	e013      	b.n	80046d2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	015a      	lsls	r2, r3, #5
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	4413      	add	r3, r2
 80046b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046b6:	461a      	mov	r2, r3
 80046b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80046bc:	6013      	str	r3, [r2, #0]
 80046be:	e008      	b.n	80046d2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	015a      	lsls	r2, r3, #5
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	4413      	add	r3, r2
 80046c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046cc:	461a      	mov	r2, r3
 80046ce:	2300      	movs	r3, #0
 80046d0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	015a      	lsls	r2, r3, #5
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	4413      	add	r3, r2
 80046da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046de:	461a      	mov	r2, r3
 80046e0:	2300      	movs	r3, #0
 80046e2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	015a      	lsls	r2, r3, #5
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	4413      	add	r3, r2
 80046ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046f0:	461a      	mov	r2, r3
 80046f2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80046f6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	3301      	adds	r3, #1
 80046fc:	613b      	str	r3, [r7, #16]
 80046fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	429a      	cmp	r2, r3
 8004704:	d8b7      	bhi.n	8004676 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004706:	2300      	movs	r3, #0
 8004708:	613b      	str	r3, [r7, #16]
 800470a:	e043      	b.n	8004794 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	015a      	lsls	r2, r3, #5
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	4413      	add	r3, r2
 8004714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800471e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004722:	d118      	bne.n	8004756 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d10a      	bne.n	8004740 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	015a      	lsls	r2, r3, #5
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	4413      	add	r3, r2
 8004732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004736:	461a      	mov	r2, r3
 8004738:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800473c:	6013      	str	r3, [r2, #0]
 800473e:	e013      	b.n	8004768 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	015a      	lsls	r2, r3, #5
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	4413      	add	r3, r2
 8004748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800474c:	461a      	mov	r2, r3
 800474e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004752:	6013      	str	r3, [r2, #0]
 8004754:	e008      	b.n	8004768 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	015a      	lsls	r2, r3, #5
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	4413      	add	r3, r2
 800475e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004762:	461a      	mov	r2, r3
 8004764:	2300      	movs	r3, #0
 8004766:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	015a      	lsls	r2, r3, #5
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	4413      	add	r3, r2
 8004770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004774:	461a      	mov	r2, r3
 8004776:	2300      	movs	r3, #0
 8004778:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	015a      	lsls	r2, r3, #5
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	4413      	add	r3, r2
 8004782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004786:	461a      	mov	r2, r3
 8004788:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800478c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	3301      	adds	r3, #1
 8004792:	613b      	str	r3, [r7, #16]
 8004794:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	429a      	cmp	r2, r3
 800479a:	d8b7      	bhi.n	800470c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047a2:	461a      	mov	r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047b0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80047be:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80047c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d105      	bne.n	80047d2 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	f043 0210 	orr.w	r2, r3, #16
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	699a      	ldr	r2, [r3, #24]
 80047d6:	4b10      	ldr	r3, [pc, #64]	; (8004818 <USB_DevInit+0x2c8>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80047de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d005      	beq.n	80047f0 <USB_DevInit+0x2a0>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	f043 0208 	orr.w	r2, r3, #8
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80047f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d107      	bne.n	8004806 <USB_DevInit+0x2b6>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047fe:	f043 0304 	orr.w	r3, r3, #4
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004806:	7dfb      	ldrb	r3, [r7, #23]
}
 8004808:	4618      	mov	r0, r3
 800480a:	3718      	adds	r7, #24
 800480c:	46bd      	mov	sp, r7
 800480e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004812:	b004      	add	sp, #16
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	803c3800 	.word	0x803c3800

0800481c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800481c:	b480      	push	{r7}
 800481e:	b085      	sub	sp, #20
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004826:	2300      	movs	r3, #0
 8004828:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	019b      	lsls	r3, r3, #6
 800482e:	f043 0220 	orr.w	r2, r3, #32
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	3301      	adds	r3, #1
 800483a:	60fb      	str	r3, [r7, #12]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	4a09      	ldr	r2, [pc, #36]	; (8004864 <USB_FlushTxFifo+0x48>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d901      	bls.n	8004848 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e006      	b.n	8004856 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	f003 0320 	and.w	r3, r3, #32
 8004850:	2b20      	cmp	r3, #32
 8004852:	d0f0      	beq.n	8004836 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3714      	adds	r7, #20
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop
 8004864:	00030d40 	.word	0x00030d40

08004868 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004868:	b480      	push	{r7}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004870:	2300      	movs	r3, #0
 8004872:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2210      	movs	r2, #16
 8004878:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	3301      	adds	r3, #1
 800487e:	60fb      	str	r3, [r7, #12]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	4a09      	ldr	r2, [pc, #36]	; (80048a8 <USB_FlushRxFifo+0x40>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d901      	bls.n	800488c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e006      	b.n	800489a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	f003 0310 	and.w	r3, r3, #16
 8004894:	2b10      	cmp	r3, #16
 8004896:	d0f0      	beq.n	800487a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3714      	adds	r7, #20
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	00030d40 	.word	0x00030d40

080048ac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	460b      	mov	r3, r1
 80048b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048c2:	4619      	mov	r1, r3
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	78fb      	ldrb	r3, [r7, #3]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3714      	adds	r7, #20
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b087      	sub	sp, #28
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	f003 0306 	and.w	r3, r3, #6
 80048f8:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d102      	bne.n	8004906 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004900:	2300      	movs	r3, #0
 8004902:	75fb      	strb	r3, [r7, #23]
 8004904:	e00a      	b.n	800491c <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2b02      	cmp	r3, #2
 800490a:	d002      	beq.n	8004912 <USB_GetDevSpeed+0x32>
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2b06      	cmp	r3, #6
 8004910:	d102      	bne.n	8004918 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004912:	2302      	movs	r3, #2
 8004914:	75fb      	strb	r3, [r7, #23]
 8004916:	e001      	b.n	800491c <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004918:	230f      	movs	r3, #15
 800491a:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800491c:	7dfb      	ldrb	r3, [r7, #23]
}
 800491e:	4618      	mov	r0, r3
 8004920:	371c      	adds	r7, #28
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr

0800492a <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800492a:	b480      	push	{r7}
 800492c:	b085      	sub	sp, #20
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
 8004932:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	785b      	ldrb	r3, [r3, #1]
 8004942:	2b01      	cmp	r3, #1
 8004944:	d13c      	bne.n	80049c0 <USB_ActivateEndpoint+0x96>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800494c:	4618      	mov	r0, r3
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004954:	69da      	ldr	r2, [r3, #28]
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	f003 030f 	and.w	r3, r3, #15
 800495e:	2101      	movs	r1, #1
 8004960:	fa01 f303 	lsl.w	r3, r1, r3
 8004964:	b29b      	uxth	r3, r3
 8004966:	4313      	orrs	r3, r2
 8004968:	61c3      	str	r3, [r0, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	015a      	lsls	r2, r3, #5
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	4413      	add	r3, r2
 8004972:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d158      	bne.n	8004a32 <USB_ActivateEndpoint+0x108>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	015a      	lsls	r2, r3, #5
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	4413      	add	r3, r2
 8004988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800498c:	4618      	mov	r0, r3
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	015a      	lsls	r2, r3, #5
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	4413      	add	r3, r2
 8004996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	78db      	ldrb	r3, [r3, #3]
 80049a8:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80049aa:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	059b      	lsls	r3, r3, #22
 80049b0:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80049b2:	4313      	orrs	r3, r2
 80049b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049bc:	6003      	str	r3, [r0, #0]
 80049be:	e038      	b.n	8004a32 <USB_ActivateEndpoint+0x108>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049c6:	4618      	mov	r0, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049ce:	69da      	ldr	r2, [r3, #28]
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	f003 030f 	and.w	r3, r3, #15
 80049d8:	2101      	movs	r1, #1
 80049da:	fa01 f303 	lsl.w	r3, r1, r3
 80049de:	041b      	lsls	r3, r3, #16
 80049e0:	4313      	orrs	r3, r2
 80049e2:	61c3      	str	r3, [r0, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	015a      	lsls	r2, r3, #5
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	4413      	add	r3, r2
 80049ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d11b      	bne.n	8004a32 <USB_ActivateEndpoint+0x108>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	015a      	lsls	r2, r3, #5
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	4413      	add	r3, r2
 8004a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a06:	4618      	mov	r0, r3
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	015a      	lsls	r2, r3, #5
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	4413      	add	r3, r2
 8004a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	78db      	ldrb	r3, [r3, #3]
 8004a22:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004a24:	430b      	orrs	r3, r1
 8004a26:	4313      	orrs	r3, r2
 8004a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a30:	6003      	str	r3, [r0, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004a32:	2300      	movs	r3, #0
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3714      	adds	r7, #20
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b085      	sub	sp, #20
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	785b      	ldrb	r3, [r3, #1]
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d165      	bne.n	8004b28 <USB_DeactivateEndpoint+0xe8>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	015a      	lsls	r2, r3, #5
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	4413      	add	r3, r2
 8004a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a72:	d121      	bne.n	8004ab8 <USB_DeactivateEndpoint+0x78>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	015a      	lsls	r2, r3, #5
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a80:	4619      	mov	r1, r3
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	015a      	lsls	r2, r3, #5
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	4413      	add	r3, r2
 8004a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004a94:	600b      	str	r3, [r1, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	015a      	lsls	r2, r3, #5
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	015a      	lsls	r2, r3, #5
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	4413      	add	r3, r2
 8004aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ab6:	600b      	str	r3, [r1, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004abe:	4618      	mov	r0, r3
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ac6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	f003 030f 	and.w	r3, r3, #15
 8004ad0:	2101      	movs	r1, #1
 8004ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	43db      	mvns	r3, r3
 8004ada:	4013      	ands	r3, r2
 8004adc:	63c3      	str	r3, [r0, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aec:	69da      	ldr	r2, [r3, #28]
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	f003 030f 	and.w	r3, r3, #15
 8004af6:	2101      	movs	r1, #1
 8004af8:	fa01 f303 	lsl.w	r3, r1, r3
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	43db      	mvns	r3, r3
 8004b00:	4013      	ands	r3, r2
 8004b02:	61c3      	str	r3, [r0, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	015a      	lsls	r2, r3, #5
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b10:	4619      	mov	r1, r3
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	015a      	lsls	r2, r3, #5
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	4413      	add	r3, r2
 8004b1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	4b37      	ldr	r3, [pc, #220]	; (8004c00 <USB_DeactivateEndpoint+0x1c0>)
 8004b22:	4013      	ands	r3, r2
 8004b24:	600b      	str	r3, [r1, #0]
 8004b26:	e064      	b.n	8004bf2 <USB_DeactivateEndpoint+0x1b2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	015a      	lsls	r2, r3, #5
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	4413      	add	r3, r2
 8004b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b3e:	d121      	bne.n	8004b84 <USB_DeactivateEndpoint+0x144>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	015a      	lsls	r2, r3, #5
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	4413      	add	r3, r2
 8004b48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b4c:	4619      	mov	r1, r3
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	015a      	lsls	r2, r3, #5
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	4413      	add	r3, r2
 8004b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b60:	600b      	str	r3, [r1, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	015a      	lsls	r2, r3, #5
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	4413      	add	r3, r2
 8004b6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b6e:	4619      	mov	r1, r3
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	015a      	lsls	r2, r3, #5
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	4413      	add	r3, r2
 8004b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b82:	600b      	str	r3, [r1, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	f003 030f 	and.w	r3, r3, #15
 8004b9c:	2101      	movs	r1, #1
 8004b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8004ba2:	041b      	lsls	r3, r3, #16
 8004ba4:	43db      	mvns	r3, r3
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	63c3      	str	r3, [r0, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bb8:	69da      	ldr	r2, [r3, #28]
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	f003 030f 	and.w	r3, r3, #15
 8004bc2:	2101      	movs	r1, #1
 8004bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8004bc8:	041b      	lsls	r3, r3, #16
 8004bca:	43db      	mvns	r3, r3
 8004bcc:	4013      	ands	r3, r2
 8004bce:	61c3      	str	r3, [r0, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	015a      	lsls	r2, r3, #5
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bdc:	4619      	mov	r1, r3
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	015a      	lsls	r2, r3, #5
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	4413      	add	r3, r2
 8004be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	4b05      	ldr	r3, [pc, #20]	; (8004c04 <USB_DeactivateEndpoint+0x1c4>)
 8004bee:	4013      	ands	r3, r2
 8004bf0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004bf2:	2300      	movs	r3, #0
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3714      	adds	r7, #20
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr
 8004c00:	ec337800 	.word	0xec337800
 8004c04:	eff37800 	.word	0xeff37800

08004c08 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b08a      	sub	sp, #40	; 0x28
 8004c0c:	af02      	add	r7, sp, #8
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	4613      	mov	r3, r2
 8004c14:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	785b      	ldrb	r3, [r3, #1]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	f040 816c 	bne.w	8004f02 <USB_EPStartXfer+0x2fa>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d135      	bne.n	8004c9e <USB_EPStartXfer+0x96>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	015a      	lsls	r2, r3, #5
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	4413      	add	r3, r2
 8004c3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c3e:	4619      	mov	r1, r3
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	015a      	lsls	r2, r3, #5
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	4413      	add	r3, r2
 8004c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c52:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c56:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	015a      	lsls	r2, r3, #5
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	4413      	add	r3, r2
 8004c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c64:	4619      	mov	r1, r3
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	015a      	lsls	r2, r3, #5
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c78:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	015a      	lsls	r2, r3, #5
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	4413      	add	r3, r2
 8004c82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c86:	4619      	mov	r1, r3
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	015a      	lsls	r2, r3, #5
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	4413      	add	r3, r2
 8004c90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	0cdb      	lsrs	r3, r3, #19
 8004c98:	04db      	lsls	r3, r3, #19
 8004c9a:	610b      	str	r3, [r1, #16]
 8004c9c:	e07a      	b.n	8004d94 <USB_EPStartXfer+0x18c>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	015a      	lsls	r2, r3, #5
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004caa:	4619      	mov	r1, r3
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	015a      	lsls	r2, r3, #5
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	0cdb      	lsrs	r3, r3, #19
 8004cbc:	04db      	lsls	r3, r3, #19
 8004cbe:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	015a      	lsls	r2, r3, #5
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ccc:	4619      	mov	r1, r3
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	015a      	lsls	r2, r3, #5
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ce0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ce4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	015a      	lsls	r2, r3, #5
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	4413      	add	r3, r2
 8004cee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	015a      	lsls	r2, r3, #5
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d00:	691a      	ldr	r2, [r3, #16]
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	6959      	ldr	r1, [r3, #20]
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	440b      	add	r3, r1
 8004d0c:	1e59      	subs	r1, r3, #1
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d16:	04d9      	lsls	r1, r3, #19
 8004d18:	4ba1      	ldr	r3, [pc, #644]	; (8004fa0 <USB_EPStartXfer+0x398>)
 8004d1a:	400b      	ands	r3, r1
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	6103      	str	r3, [r0, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	015a      	lsls	r2, r3, #5
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	4413      	add	r3, r2
 8004d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	015a      	lsls	r2, r3, #5
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	4413      	add	r3, r2
 8004d36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d3a:	691a      	ldr	r2, [r3, #16]
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	695b      	ldr	r3, [r3, #20]
 8004d40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d44:	4313      	orrs	r3, r2
 8004d46:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	78db      	ldrb	r3, [r3, #3]
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d121      	bne.n	8004d94 <USB_EPStartXfer+0x18c>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	015a      	lsls	r2, r3, #5
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	4413      	add	r3, r2
 8004d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	015a      	lsls	r2, r3, #5
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	4413      	add	r3, r2
 8004d66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004d70:	610b      	str	r3, [r1, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	015a      	lsls	r2, r3, #5
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	4413      	add	r3, r2
 8004d7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d7e:	4619      	mov	r1, r3
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	015a      	lsls	r2, r3, #5
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	4413      	add	r3, r2
 8004d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d92:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004d94:	79fb      	ldrb	r3, [r7, #7]
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d14e      	bne.n	8004e38 <USB_EPStartXfer+0x230>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d009      	beq.n	8004db6 <USB_EPStartXfer+0x1ae>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	015a      	lsls	r2, r3, #5
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	4413      	add	r3, r2
 8004daa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dae:	461a      	mov	r2, r3
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	78db      	ldrb	r3, [r3, #3]
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d12a      	bne.n	8004e14 <USB_EPStartXfer+0x20c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d111      	bne.n	8004df2 <USB_EPStartXfer+0x1ea>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	015a      	lsls	r2, r3, #5
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	4413      	add	r3, r2
 8004dd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dda:	4619      	mov	r1, r3
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	015a      	lsls	r2, r3, #5
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	4413      	add	r3, r2
 8004de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004dee:	600b      	str	r3, [r1, #0]
 8004df0:	e010      	b.n	8004e14 <USB_EPStartXfer+0x20c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	015a      	lsls	r2, r3, #5
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	4413      	add	r3, r2
 8004dfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dfe:	4619      	mov	r1, r3
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	015a      	lsls	r2, r3, #5
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	4413      	add	r3, r2
 8004e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e12:	600b      	str	r3, [r1, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	015a      	lsls	r2, r3, #5
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e20:	4619      	mov	r1, r3
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	015a      	lsls	r2, r3, #5
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	4413      	add	r3, r2
 8004e2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e34:	600b      	str	r3, [r1, #0]
 8004e36:	e13c      	b.n	80050b2 <USB_EPStartXfer+0x4aa>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	015a      	lsls	r2, r3, #5
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	4413      	add	r3, r2
 8004e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e44:	4619      	mov	r1, r3
 8004e46:	69bb      	ldr	r3, [r7, #24]
 8004e48:	015a      	lsls	r2, r3, #5
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e58:	600b      	str	r3, [r1, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	78db      	ldrb	r3, [r3, #3]
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d016      	beq.n	8004e90 <USB_EPStartXfer+0x288>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	f000 8123 	beq.w	80050b2 <USB_EPStartXfer+0x4aa>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e72:	4618      	mov	r0, r3
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	f003 030f 	and.w	r3, r3, #15
 8004e84:	2101      	movs	r1, #1
 8004e86:	fa01 f303 	lsl.w	r3, r1, r3
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	6343      	str	r3, [r0, #52]	; 0x34
 8004e8e:	e110      	b.n	80050b2 <USB_EPStartXfer+0x4aa>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d111      	bne.n	8004ec4 <USB_EPStartXfer+0x2bc>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	015a      	lsls	r2, r3, #5
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	4413      	add	r3, r2
 8004ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eac:	4619      	mov	r1, r3
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	015a      	lsls	r2, r3, #5
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	4413      	add	r3, r2
 8004eb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ec0:	600b      	str	r3, [r1, #0]
 8004ec2:	e010      	b.n	8004ee6 <USB_EPStartXfer+0x2de>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	015a      	lsls	r2, r3, #5
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	4413      	add	r3, r2
 8004ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	015a      	lsls	r2, r3, #5
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	4413      	add	r3, r2
 8004eda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ee4:	600b      	str	r3, [r1, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	68d9      	ldr	r1, [r3, #12]
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	781a      	ldrb	r2, [r3, #0]
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	695b      	ldr	r3, [r3, #20]
 8004ef2:	b298      	uxth	r0, r3
 8004ef4:	79fb      	ldrb	r3, [r7, #7]
 8004ef6:	9300      	str	r3, [sp, #0]
 8004ef8:	4603      	mov	r3, r0
 8004efa:	68f8      	ldr	r0, [r7, #12]
 8004efc:	f000 fa43 	bl	8005386 <USB_WritePacket>
 8004f00:	e0d7      	b.n	80050b2 <USB_EPStartXfer+0x4aa>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	015a      	lsls	r2, r3, #5
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	4413      	add	r3, r2
 8004f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f0e:	4619      	mov	r1, r3
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	015a      	lsls	r2, r3, #5
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	4413      	add	r3, r2
 8004f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	0cdb      	lsrs	r3, r3, #19
 8004f20:	04db      	lsls	r3, r3, #19
 8004f22:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	015a      	lsls	r2, r3, #5
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f30:	4619      	mov	r1, r3
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	015a      	lsls	r2, r3, #5
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	4413      	add	r3, r2
 8004f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f44:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f48:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	695b      	ldr	r3, [r3, #20]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d128      	bne.n	8004fa4 <USB_EPStartXfer+0x39c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	015a      	lsls	r2, r3, #5
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	4413      	add	r3, r2
 8004f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f5e:	4619      	mov	r1, r3
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	015a      	lsls	r2, r3, #5
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	4413      	add	r3, r2
 8004f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f6c:	691a      	ldr	r2, [r3, #16]
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f76:	4313      	orrs	r3, r2
 8004f78:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	015a      	lsls	r2, r3, #5
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	4413      	add	r3, r2
 8004f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f86:	4619      	mov	r1, r3
 8004f88:	69bb      	ldr	r3, [r7, #24]
 8004f8a:	015a      	lsls	r2, r3, #5
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	4413      	add	r3, r2
 8004f90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f9a:	610b      	str	r3, [r1, #16]
 8004f9c:	e038      	b.n	8005010 <USB_EPStartXfer+0x408>
 8004f9e:	bf00      	nop
 8004fa0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	695a      	ldr	r2, [r3, #20]
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	4413      	add	r3, r2
 8004fae:	1e5a      	subs	r2, r3, #1
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fb8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004fba:	69bb      	ldr	r3, [r7, #24]
 8004fbc:	015a      	lsls	r2, r3, #5
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	4413      	add	r3, r2
 8004fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	015a      	lsls	r2, r3, #5
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	4413      	add	r3, r2
 8004fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fd4:	691a      	ldr	r2, [r3, #16]
 8004fd6:	8afb      	ldrh	r3, [r7, #22]
 8004fd8:	04d9      	lsls	r1, r3, #19
 8004fda:	4b38      	ldr	r3, [pc, #224]	; (80050bc <USB_EPStartXfer+0x4b4>)
 8004fdc:	400b      	ands	r3, r1
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	6103      	str	r3, [r0, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	015a      	lsls	r2, r3, #5
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	4413      	add	r3, r2
 8004fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fee:	4618      	mov	r0, r3
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	015a      	lsls	r2, r3, #5
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	4413      	add	r3, r2
 8004ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ffc:	691a      	ldr	r2, [r3, #16]
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	8af9      	ldrh	r1, [r7, #22]
 8005004:	fb01 f303 	mul.w	r3, r1, r3
 8005008:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800500c:	4313      	orrs	r3, r2
 800500e:	6103      	str	r3, [r0, #16]
    }

    if (dma == 1U)
 8005010:	79fb      	ldrb	r3, [r7, #7]
 8005012:	2b01      	cmp	r3, #1
 8005014:	d10d      	bne.n	8005032 <USB_EPStartXfer+0x42a>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d009      	beq.n	8005032 <USB_EPStartXfer+0x42a>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	015a      	lsls	r2, r3, #5
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	4413      	add	r3, r2
 8005026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800502a:	461a      	mov	r2, r3
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	6153      	str	r3, [r2, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	78db      	ldrb	r3, [r3, #3]
 8005036:	2b01      	cmp	r3, #1
 8005038:	d12a      	bne.n	8005090 <USB_EPStartXfer+0x488>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005046:	2b00      	cmp	r3, #0
 8005048:	d111      	bne.n	800506e <USB_EPStartXfer+0x466>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	015a      	lsls	r2, r3, #5
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	4413      	add	r3, r2
 8005052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005056:	4619      	mov	r1, r3
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	015a      	lsls	r2, r3, #5
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	4413      	add	r3, r2
 8005060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800506a:	600b      	str	r3, [r1, #0]
 800506c:	e010      	b.n	8005090 <USB_EPStartXfer+0x488>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	015a      	lsls	r2, r3, #5
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	4413      	add	r3, r2
 8005076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800507a:	4619      	mov	r1, r3
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	015a      	lsls	r2, r3, #5
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	4413      	add	r3, r2
 8005084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800508e:	600b      	str	r3, [r1, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	015a      	lsls	r2, r3, #5
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	4413      	add	r3, r2
 8005098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800509c:	4619      	mov	r1, r3
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	015a      	lsls	r2, r3, #5
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	4413      	add	r3, r2
 80050a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050b0:	600b      	str	r3, [r1, #0]
  }

  return HAL_OK;
 80050b2:	2300      	movs	r3, #0
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3720      	adds	r7, #32
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	1ff80000 	.word	0x1ff80000

080050c0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b087      	sub	sp, #28
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	4613      	mov	r3, r2
 80050cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	785b      	ldrb	r3, [r3, #1]
 80050dc:	2b01      	cmp	r3, #1
 80050de:	f040 80d8 	bne.w	8005292 <USB_EP0StartXfer+0x1d2>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	695b      	ldr	r3, [r3, #20]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d135      	bne.n	8005156 <USB_EP0StartXfer+0x96>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	015a      	lsls	r2, r3, #5
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	4413      	add	r3, r2
 80050f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f6:	4619      	mov	r1, r3
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	015a      	lsls	r2, r3, #5
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	4413      	add	r3, r2
 8005100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800510a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800510e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	015a      	lsls	r2, r3, #5
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	4413      	add	r3, r2
 8005118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800511c:	4619      	mov	r1, r3
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	015a      	lsls	r2, r3, #5
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	4413      	add	r3, r2
 8005126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005130:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	015a      	lsls	r2, r3, #5
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	4413      	add	r3, r2
 800513a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800513e:	4619      	mov	r1, r3
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	015a      	lsls	r2, r3, #5
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	4413      	add	r3, r2
 8005148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	0cdb      	lsrs	r3, r3, #19
 8005150:	04db      	lsls	r3, r3, #19
 8005152:	610b      	str	r3, [r1, #16]
 8005154:	e052      	b.n	80051fc <USB_EP0StartXfer+0x13c>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	015a      	lsls	r2, r3, #5
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	4413      	add	r3, r2
 800515e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005162:	4619      	mov	r1, r3
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	015a      	lsls	r2, r3, #5
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	4413      	add	r3, r2
 800516c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	0cdb      	lsrs	r3, r3, #19
 8005174:	04db      	lsls	r3, r3, #19
 8005176:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	015a      	lsls	r2, r3, #5
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	4413      	add	r3, r2
 8005180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005184:	4619      	mov	r1, r3
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	015a      	lsls	r2, r3, #5
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	4413      	add	r3, r2
 800518e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005198:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800519c:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	695a      	ldr	r2, [r3, #20]
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d903      	bls.n	80051b2 <USB_EP0StartXfer+0xf2>
      {
        ep->xfer_len = ep->maxpacket;
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	689a      	ldr	r2, [r3, #8]
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	015a      	lsls	r2, r3, #5
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	4413      	add	r3, r2
 80051ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051be:	4619      	mov	r1, r3
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	015a      	lsls	r2, r3, #5
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	4413      	add	r3, r2
 80051c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051d2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	015a      	lsls	r2, r3, #5
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	4413      	add	r3, r2
 80051dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e0:	4619      	mov	r1, r3
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	015a      	lsls	r2, r3, #5
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	4413      	add	r3, r2
 80051ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ee:	691a      	ldr	r2, [r3, #16]
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	695b      	ldr	r3, [r3, #20]
 80051f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051f8:	4313      	orrs	r3, r2
 80051fa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80051fc:	79fb      	ldrb	r3, [r7, #7]
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d11f      	bne.n	8005242 <USB_EP0StartXfer+0x182>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d009      	beq.n	800521e <USB_EP0StartXfer+0x15e>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	015a      	lsls	r2, r3, #5
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	4413      	add	r3, r2
 8005212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005216:	461a      	mov	r2, r3
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	015a      	lsls	r2, r3, #5
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	4413      	add	r3, r2
 8005226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800522a:	4619      	mov	r1, r3
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	015a      	lsls	r2, r3, #5
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	4413      	add	r3, r2
 8005234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800523e:	600b      	str	r3, [r1, #0]
 8005240:	e09a      	b.n	8005378 <USB_EP0StartXfer+0x2b8>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	015a      	lsls	r2, r3, #5
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	4413      	add	r3, r2
 800524a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800524e:	4619      	mov	r1, r3
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	015a      	lsls	r2, r3, #5
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	4413      	add	r3, r2
 8005258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005262:	600b      	str	r3, [r1, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	695b      	ldr	r3, [r3, #20]
 8005268:	2b00      	cmp	r3, #0
 800526a:	f000 8085 	beq.w	8005378 <USB_EP0StartXfer+0x2b8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005274:	4618      	mov	r0, r3
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800527c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	f003 030f 	and.w	r3, r3, #15
 8005286:	2101      	movs	r1, #1
 8005288:	fa01 f303 	lsl.w	r3, r1, r3
 800528c:	4313      	orrs	r3, r2
 800528e:	6343      	str	r3, [r0, #52]	; 0x34
 8005290:	e072      	b.n	8005378 <USB_EP0StartXfer+0x2b8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	015a      	lsls	r2, r3, #5
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	4413      	add	r3, r2
 800529a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800529e:	4619      	mov	r1, r3
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	015a      	lsls	r2, r3, #5
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	4413      	add	r3, r2
 80052a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	0cdb      	lsrs	r3, r3, #19
 80052b0:	04db      	lsls	r3, r3, #19
 80052b2:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	015a      	lsls	r2, r3, #5
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	4413      	add	r3, r2
 80052bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052c0:	4619      	mov	r1, r3
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	015a      	lsls	r2, r3, #5
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	4413      	add	r3, r2
 80052ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80052d4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80052d8:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	695b      	ldr	r3, [r3, #20]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d003      	beq.n	80052ea <USB_EP0StartXfer+0x22a>
    {
      ep->xfer_len = ep->maxpacket;
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	689a      	ldr	r2, [r3, #8]
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	015a      	lsls	r2, r3, #5
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	4413      	add	r3, r2
 80052f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052f6:	4619      	mov	r1, r3
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	015a      	lsls	r2, r3, #5
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	4413      	add	r3, r2
 8005300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800530a:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	015a      	lsls	r2, r3, #5
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	4413      	add	r3, r2
 8005314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005318:	4619      	mov	r1, r3
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	015a      	lsls	r2, r3, #5
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	4413      	add	r3, r2
 8005322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005326:	691a      	ldr	r2, [r3, #16]
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005330:	4313      	orrs	r3, r2
 8005332:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005334:	79fb      	ldrb	r3, [r7, #7]
 8005336:	2b01      	cmp	r3, #1
 8005338:	d10d      	bne.n	8005356 <USB_EP0StartXfer+0x296>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d009      	beq.n	8005356 <USB_EP0StartXfer+0x296>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	015a      	lsls	r2, r3, #5
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	4413      	add	r3, r2
 800534a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800534e:	461a      	mov	r2, r3
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	6153      	str	r3, [r2, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	015a      	lsls	r2, r3, #5
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	4413      	add	r3, r2
 800535e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005362:	4619      	mov	r1, r3
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	015a      	lsls	r2, r3, #5
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	4413      	add	r3, r2
 800536c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005376:	600b      	str	r3, [r1, #0]
  }

  return HAL_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	371c      	adds	r7, #28
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr

08005386 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005386:	b480      	push	{r7}
 8005388:	b089      	sub	sp, #36	; 0x24
 800538a:	af00      	add	r7, sp, #0
 800538c:	60f8      	str	r0, [r7, #12]
 800538e:	60b9      	str	r1, [r7, #8]
 8005390:	4611      	mov	r1, r2
 8005392:	461a      	mov	r2, r3
 8005394:	460b      	mov	r3, r1
 8005396:	71fb      	strb	r3, [r7, #7]
 8005398:	4613      	mov	r3, r2
 800539a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80053a4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d11a      	bne.n	80053e2 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80053ac:	88bb      	ldrh	r3, [r7, #4]
 80053ae:	3303      	adds	r3, #3
 80053b0:	089b      	lsrs	r3, r3, #2
 80053b2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80053b4:	2300      	movs	r3, #0
 80053b6:	61bb      	str	r3, [r7, #24]
 80053b8:	e00f      	b.n	80053da <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80053ba:	79fb      	ldrb	r3, [r7, #7]
 80053bc:	031a      	lsls	r2, r3, #12
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	4413      	add	r3, r2
 80053c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053c6:	461a      	mov	r2, r3
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	6013      	str	r3, [r2, #0]
      pSrc++;
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	3304      	adds	r3, #4
 80053d2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	3301      	adds	r3, #1
 80053d8:	61bb      	str	r3, [r7, #24]
 80053da:	69ba      	ldr	r2, [r7, #24]
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	429a      	cmp	r2, r3
 80053e0:	d3eb      	bcc.n	80053ba <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80053e2:	2300      	movs	r3, #0
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3724      	adds	r7, #36	; 0x24
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b089      	sub	sp, #36	; 0x24
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	4613      	mov	r3, r2
 80053fc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005406:	88fb      	ldrh	r3, [r7, #6]
 8005408:	3303      	adds	r3, #3
 800540a:	089b      	lsrs	r3, r3, #2
 800540c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800540e:	2300      	movs	r3, #0
 8005410:	61bb      	str	r3, [r7, #24]
 8005412:	e00b      	b.n	800542c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	3304      	adds	r3, #4
 8005424:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	3301      	adds	r3, #1
 800542a:	61bb      	str	r3, [r7, #24]
 800542c:	69ba      	ldr	r2, [r7, #24]
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	429a      	cmp	r2, r3
 8005432:	d3ef      	bcc.n	8005414 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005434:	69fb      	ldr	r3, [r7, #28]
}
 8005436:	4618      	mov	r0, r3
 8005438:	3724      	adds	r7, #36	; 0x24
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr

08005442 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005442:	b480      	push	{r7}
 8005444:	b085      	sub	sp, #20
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
 800544a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	785b      	ldrb	r3, [r3, #1]
 800545a:	2b01      	cmp	r3, #1
 800545c:	d12e      	bne.n	80054bc <USB_EPSetStall+0x7a>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	015a      	lsls	r2, r3, #5
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	4413      	add	r3, r2
 8005466:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2b00      	cmp	r3, #0
 800546e:	db13      	blt.n	8005498 <USB_EPSetStall+0x56>
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d010      	beq.n	8005498 <USB_EPSetStall+0x56>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	015a      	lsls	r2, r3, #5
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	4413      	add	r3, r2
 800547e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005482:	4619      	mov	r1, r3
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	015a      	lsls	r2, r3, #5
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	4413      	add	r3, r2
 800548c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005496:	600b      	str	r3, [r1, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	015a      	lsls	r2, r3, #5
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	4413      	add	r3, r2
 80054a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054a4:	4619      	mov	r1, r3
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	015a      	lsls	r2, r3, #5
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	4413      	add	r3, r2
 80054ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80054b8:	600b      	str	r3, [r1, #0]
 80054ba:	e02d      	b.n	8005518 <USB_EPSetStall+0xd6>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	015a      	lsls	r2, r3, #5
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	4413      	add	r3, r2
 80054c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	db13      	blt.n	80054f6 <USB_EPSetStall+0xb4>
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d010      	beq.n	80054f6 <USB_EPSetStall+0xb4>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	015a      	lsls	r2, r3, #5
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	4413      	add	r3, r2
 80054dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054e0:	4619      	mov	r1, r3
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	015a      	lsls	r2, r3, #5
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	4413      	add	r3, r2
 80054ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80054f4:	600b      	str	r3, [r1, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	015a      	lsls	r2, r3, #5
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	4413      	add	r3, r2
 80054fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005502:	4619      	mov	r1, r3
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	015a      	lsls	r2, r3, #5
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	4413      	add	r3, r2
 800550c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005516:	600b      	str	r3, [r1, #0]
  }

  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3714      	adds	r7, #20
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr

08005526 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005526:	b480      	push	{r7}
 8005528:	b085      	sub	sp, #20
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
 800552e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	785b      	ldrb	r3, [r3, #1]
 800553e:	2b01      	cmp	r3, #1
 8005540:	d12a      	bne.n	8005598 <USB_EPClearStall+0x72>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	015a      	lsls	r2, r3, #5
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	4413      	add	r3, r2
 800554a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800554e:	4619      	mov	r1, r3
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	015a      	lsls	r2, r3, #5
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	4413      	add	r3, r2
 8005558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005562:	600b      	str	r3, [r1, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	78db      	ldrb	r3, [r3, #3]
 8005568:	2b03      	cmp	r3, #3
 800556a:	d003      	beq.n	8005574 <USB_EPClearStall+0x4e>
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	78db      	ldrb	r3, [r3, #3]
 8005570:	2b02      	cmp	r3, #2
 8005572:	d13b      	bne.n	80055ec <USB_EPClearStall+0xc6>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	015a      	lsls	r2, r3, #5
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	4413      	add	r3, r2
 800557c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005580:	4619      	mov	r1, r3
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	015a      	lsls	r2, r3, #5
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	4413      	add	r3, r2
 800558a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005594:	600b      	str	r3, [r1, #0]
 8005596:	e029      	b.n	80055ec <USB_EPClearStall+0xc6>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	015a      	lsls	r2, r3, #5
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	4413      	add	r3, r2
 80055a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a4:	4619      	mov	r1, r3
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	015a      	lsls	r2, r3, #5
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	4413      	add	r3, r2
 80055ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80055b8:	600b      	str	r3, [r1, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	78db      	ldrb	r3, [r3, #3]
 80055be:	2b03      	cmp	r3, #3
 80055c0:	d003      	beq.n	80055ca <USB_EPClearStall+0xa4>
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	78db      	ldrb	r3, [r3, #3]
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d110      	bne.n	80055ec <USB_EPClearStall+0xc6>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	015a      	lsls	r2, r3, #5
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	4413      	add	r3, r2
 80055d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055d6:	4619      	mov	r1, r3
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	015a      	lsls	r2, r3, #5
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	4413      	add	r3, r2
 80055e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055ea:	600b      	str	r3, [r1, #0]
    }
  }
  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3714      	adds	r7, #20
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr

080055fa <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80055fa:	b480      	push	{r7}
 80055fc:	b085      	sub	sp, #20
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
 8005602:	460b      	mov	r3, r1
 8005604:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005610:	461a      	mov	r2, r3
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800561e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005626:	4619      	mov	r1, r3
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	78fb      	ldrb	r3, [r7, #3]
 8005632:	011b      	lsls	r3, r3, #4
 8005634:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005638:	4313      	orrs	r3, r2
 800563a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800563c:	2300      	movs	r3, #0
}
 800563e:	4618      	mov	r0, r3
 8005640:	3714      	adds	r7, #20
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr

0800564a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800564a:	b580      	push	{r7, lr}
 800564c:	b084      	sub	sp, #16
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800565c:	461a      	mov	r2, r3
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	f023 0302 	bic.w	r3, r3, #2
 800566a:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800566c:	2003      	movs	r0, #3
 800566e:	f7fb ff8d 	bl	800158c <HAL_Delay>

  return HAL_OK;
 8005672:	2300      	movs	r3, #0
}
 8005674:	4618      	mov	r0, r3
 8005676:	3710      	adds	r7, #16
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800568e:	461a      	mov	r2, r3
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	f043 0302 	orr.w	r3, r3, #2
 800569c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800569e:	2003      	movs	r0, #3
 80056a0:	f7fb ff74 	bl	800158c <HAL_Delay>

  return HAL_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3710      	adds	r7, #16
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}

080056ae <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80056ae:	b480      	push	{r7}
 80056b0:	b085      	sub	sp, #20
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	695b      	ldr	r3, [r3, #20]
 80056ba:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	699b      	ldr	r3, [r3, #24]
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	4013      	ands	r3, r2
 80056c4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80056c6:	68fb      	ldr	r3, [r7, #12]
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3714      	adds	r7, #20
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b085      	sub	sp, #20
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056f0:	69db      	ldr	r3, [r3, #28]
 80056f2:	68ba      	ldr	r2, [r7, #8]
 80056f4:	4013      	ands	r3, r2
 80056f6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	0c1b      	lsrs	r3, r3, #16
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3714      	adds	r7, #20
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005708:	b480      	push	{r7}
 800570a:	b085      	sub	sp, #20
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800571a:	699b      	ldr	r3, [r3, #24]
 800571c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005724:	69db      	ldr	r3, [r3, #28]
 8005726:	68ba      	ldr	r2, [r7, #8]
 8005728:	4013      	ands	r3, r2
 800572a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	b29b      	uxth	r3, r3
}
 8005730:	4618      	mov	r0, r3
 8005732:	3714      	adds	r7, #20
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800573c:	b480      	push	{r7}
 800573e:	b085      	sub	sp, #20
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	460b      	mov	r3, r1
 8005746:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800574c:	78fb      	ldrb	r3, [r7, #3]
 800574e:	015a      	lsls	r2, r3, #5
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	4413      	add	r3, r2
 8005754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005762:	695b      	ldr	r3, [r3, #20]
 8005764:	68ba      	ldr	r2, [r7, #8]
 8005766:	4013      	ands	r3, r2
 8005768:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800576a:	68bb      	ldr	r3, [r7, #8]
}
 800576c:	4618      	mov	r0, r3
 800576e:	3714      	adds	r7, #20
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005778:	b480      	push	{r7}
 800577a:	b087      	sub	sp, #28
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	460b      	mov	r3, r1
 8005782:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800579a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800579c:	78fb      	ldrb	r3, [r7, #3]
 800579e:	f003 030f 	and.w	r3, r3, #15
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	fa22 f303 	lsr.w	r3, r2, r3
 80057a8:	01db      	lsls	r3, r3, #7
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	693a      	ldr	r2, [r7, #16]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80057b2:	78fb      	ldrb	r3, [r7, #3]
 80057b4:	015a      	lsls	r2, r3, #5
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	4413      	add	r3, r2
 80057ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057be:	689a      	ldr	r2, [r3, #8]
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	4013      	ands	r3, r2
 80057c4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80057c6:	68bb      	ldr	r3, [r7, #8]
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	371c      	adds	r7, #28
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr

080057d4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	695b      	ldr	r3, [r3, #20]
 80057e0:	f003 0301 	and.w	r3, r3, #1
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005802:	461a      	mov	r2, r3
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005810:	f023 0307 	bic.w	r3, r3, #7
 8005814:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800581c:	461a      	mov	r2, r3
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800582a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800582c:	2300      	movs	r3, #0
}
 800582e:	4618      	mov	r0, r3
 8005830:	3714      	adds	r7, #20
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr
	...

0800583c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800583c:	b480      	push	{r7}
 800583e:	b087      	sub	sp, #28
 8005840:	af00      	add	r7, sp, #0
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	460b      	mov	r3, r1
 8005846:	607a      	str	r2, [r7, #4]
 8005848:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	333c      	adds	r3, #60	; 0x3c
 8005852:	3304      	adds	r3, #4
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	4a28      	ldr	r2, [pc, #160]	; (80058fc <USB_EP0_OutStart+0xc0>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d90a      	bls.n	8005876 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800586c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005870:	d101      	bne.n	8005876 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005872:	2300      	movs	r3, #0
 8005874:	e03b      	b.n	80058ee <USB_EP0_OutStart+0xb2>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800587c:	461a      	mov	r2, r3
 800587e:	2300      	movs	r3, #0
 8005880:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005888:	461a      	mov	r2, r3
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005896:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800589e:	461a      	mov	r2, r3
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	f043 0318 	orr.w	r3, r3, #24
 80058ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058b4:	461a      	mov	r2, r3
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80058c2:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80058c4:	7afb      	ldrb	r3, [r7, #11]
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d110      	bne.n	80058ec <USB_EP0_OutStart+0xb0>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058d0:	461a      	mov	r2, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058dc:	461a      	mov	r2, r3
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80058ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	371c      	adds	r7, #28
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop
 80058fc:	4f54300a 	.word	0x4f54300a

08005900 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005900:	b480      	push	{r7}
 8005902:	b085      	sub	sp, #20
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005908:	2300      	movs	r3, #0
 800590a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	3301      	adds	r3, #1
 8005910:	60fb      	str	r3, [r7, #12]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	4a13      	ldr	r2, [pc, #76]	; (8005964 <USB_CoreReset+0x64>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d901      	bls.n	800591e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	e01b      	b.n	8005956 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	2b00      	cmp	r3, #0
 8005924:	daf2      	bge.n	800590c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005926:	2300      	movs	r3, #0
 8005928:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	f043 0201 	orr.w	r2, r3, #1
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	3301      	adds	r3, #1
 800593a:	60fb      	str	r3, [r7, #12]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	4a09      	ldr	r2, [pc, #36]	; (8005964 <USB_CoreReset+0x64>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d901      	bls.n	8005948 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005944:	2303      	movs	r3, #3
 8005946:	e006      	b.n	8005956 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	691b      	ldr	r3, [r3, #16]
 800594c:	f003 0301 	and.w	r3, r3, #1
 8005950:	2b01      	cmp	r3, #1
 8005952:	d0f0      	beq.n	8005936 <USB_CoreReset+0x36>

  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3714      	adds	r7, #20
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr
 8005962:	bf00      	nop
 8005964:	00030d40 	.word	0x00030d40

08005968 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	460b      	mov	r3, r1
 8005972:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005974:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005978:	f002 f908 	bl	8007b8c <malloc>
 800597c:	4603      	mov	r3, r0
 800597e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d105      	bne.n	8005992 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800598e:	2302      	movs	r3, #2
 8005990:	e066      	b.n	8005a60 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	68fa      	ldr	r2, [r7, #12]
 8005996:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	7c1b      	ldrb	r3, [r3, #16]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d119      	bne.n	80059d6 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80059a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059a6:	2202      	movs	r2, #2
 80059a8:	2181      	movs	r1, #129	; 0x81
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f001 ff4b 	bl	8007846 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80059b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059ba:	2202      	movs	r2, #2
 80059bc:	2101      	movs	r1, #1
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f001 ff41 	bl	8007846 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2210      	movs	r2, #16
 80059d0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80059d4:	e016      	b.n	8005a04 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80059d6:	2340      	movs	r3, #64	; 0x40
 80059d8:	2202      	movs	r2, #2
 80059da:	2181      	movs	r1, #129	; 0x81
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f001 ff32 	bl	8007846 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2201      	movs	r2, #1
 80059e6:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80059e8:	2340      	movs	r3, #64	; 0x40
 80059ea:	2202      	movs	r2, #2
 80059ec:	2101      	movs	r1, #1
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f001 ff29 	bl	8007846 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2210      	movs	r2, #16
 8005a00:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005a04:	2308      	movs	r3, #8
 8005a06:	2203      	movs	r2, #3
 8005a08:	2182      	movs	r1, #130	; 0x82
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f001 ff1b 	bl	8007846 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	7c1b      	ldrb	r3, [r3, #16]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d109      	bne.n	8005a4e <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a44:	2101      	movs	r1, #1
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f001 ffec 	bl	8007a24 <USBD_LL_PrepareReceive>
 8005a4c:	e007      	b.n	8005a5e <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a54:	2340      	movs	r3, #64	; 0x40
 8005a56:	2101      	movs	r1, #1
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f001 ffe3 	bl	8007a24 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005a5e:	2300      	movs	r3, #0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3710      	adds	r7, #16
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	460b      	mov	r3, r1
 8005a72:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8005a74:	2300      	movs	r3, #0
 8005a76:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005a78:	2181      	movs	r1, #129	; 0x81
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f001 ff09 	bl	8007892 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005a86:	2101      	movs	r1, #1
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f001 ff02 	bl	8007892 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005a96:	2182      	movs	r1, #130	; 0x82
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f001 fefa 	bl	8007892 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d00e      	beq.n	8005ad6 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f002 f867 	bl	8007b9c <free>
    pdev->pClassData = NULL;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8005ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3710      	adds	r7, #16
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b086      	sub	sp, #24
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005af0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005af2:	2300      	movs	r3, #0
 8005af4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005af6:	2300      	movs	r3, #0
 8005af8:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8005afa:	2300      	movs	r3, #0
 8005afc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d03a      	beq.n	8005b80 <USBD_CDC_Setup+0xa0>
 8005b0a:	2b20      	cmp	r3, #32
 8005b0c:	f040 8097 	bne.w	8005c3e <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	88db      	ldrh	r3, [r3, #6]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d029      	beq.n	8005b6c <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	b25b      	sxtb	r3, r3
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	da11      	bge.n	8005b46 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	683a      	ldr	r2, [r7, #0]
 8005b2c:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8005b2e:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005b30:	683a      	ldr	r2, [r7, #0]
 8005b32:	88d2      	ldrh	r2, [r2, #6]
 8005b34:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005b36:	6939      	ldr	r1, [r7, #16]
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	88db      	ldrh	r3, [r3, #6]
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f001 fa6d 	bl	800701e <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8005b44:	e082      	b.n	8005c4c <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	785a      	ldrb	r2, [r3, #1]
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	88db      	ldrh	r3, [r3, #6]
 8005b54:	b2da      	uxtb	r2, r3
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005b5c:	6939      	ldr	r1, [r7, #16]
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	88db      	ldrh	r3, [r3, #6]
 8005b62:	461a      	mov	r2, r3
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f001 fa86 	bl	8007076 <USBD_CtlPrepareRx>
    break;
 8005b6a:	e06f      	b.n	8005c4c <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	683a      	ldr	r2, [r7, #0]
 8005b76:	7850      	ldrb	r0, [r2, #1]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	6839      	ldr	r1, [r7, #0]
 8005b7c:	4798      	blx	r3
    break;
 8005b7e:	e065      	b.n	8005c4c <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	785b      	ldrb	r3, [r3, #1]
 8005b84:	2b0b      	cmp	r3, #11
 8005b86:	d84f      	bhi.n	8005c28 <USBD_CDC_Setup+0x148>
 8005b88:	a201      	add	r2, pc, #4	; (adr r2, 8005b90 <USBD_CDC_Setup+0xb0>)
 8005b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b8e:	bf00      	nop
 8005b90:	08005bc1 	.word	0x08005bc1
 8005b94:	08005c37 	.word	0x08005c37
 8005b98:	08005c29 	.word	0x08005c29
 8005b9c:	08005c29 	.word	0x08005c29
 8005ba0:	08005c29 	.word	0x08005c29
 8005ba4:	08005c29 	.word	0x08005c29
 8005ba8:	08005c29 	.word	0x08005c29
 8005bac:	08005c29 	.word	0x08005c29
 8005bb0:	08005c29 	.word	0x08005c29
 8005bb4:	08005c29 	.word	0x08005c29
 8005bb8:	08005be9 	.word	0x08005be9
 8005bbc:	08005c11 	.word	0x08005c11
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bc6:	2b03      	cmp	r3, #3
 8005bc8:	d107      	bne.n	8005bda <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005bca:	f107 030c 	add.w	r3, r7, #12
 8005bce:	2202      	movs	r2, #2
 8005bd0:	4619      	mov	r1, r3
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f001 fa23 	bl	800701e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005bd8:	e030      	b.n	8005c3c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8005bda:	6839      	ldr	r1, [r7, #0]
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f001 f9ad 	bl	8006f3c <USBD_CtlError>
        ret = USBD_FAIL;
 8005be2:	2303      	movs	r3, #3
 8005be4:	75fb      	strb	r3, [r7, #23]
      break;
 8005be6:	e029      	b.n	8005c3c <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bee:	2b03      	cmp	r3, #3
 8005bf0:	d107      	bne.n	8005c02 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005bf2:	f107 030f 	add.w	r3, r7, #15
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f001 fa0f 	bl	800701e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005c00:	e01c      	b.n	8005c3c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8005c02:	6839      	ldr	r1, [r7, #0]
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f001 f999 	bl	8006f3c <USBD_CtlError>
        ret = USBD_FAIL;
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	75fb      	strb	r3, [r7, #23]
      break;
 8005c0e:	e015      	b.n	8005c3c <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c16:	2b03      	cmp	r3, #3
 8005c18:	d00f      	beq.n	8005c3a <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8005c1a:	6839      	ldr	r1, [r7, #0]
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f001 f98d 	bl	8006f3c <USBD_CtlError>
        ret = USBD_FAIL;
 8005c22:	2303      	movs	r3, #3
 8005c24:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005c26:	e008      	b.n	8005c3a <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8005c28:	6839      	ldr	r1, [r7, #0]
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f001 f986 	bl	8006f3c <USBD_CtlError>
      ret = USBD_FAIL;
 8005c30:	2303      	movs	r3, #3
 8005c32:	75fb      	strb	r3, [r7, #23]
      break;
 8005c34:	e002      	b.n	8005c3c <USBD_CDC_Setup+0x15c>
      break;
 8005c36:	bf00      	nop
 8005c38:	e008      	b.n	8005c4c <USBD_CDC_Setup+0x16c>
      break;
 8005c3a:	bf00      	nop
    }
    break;
 8005c3c:	e006      	b.n	8005c4c <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8005c3e:	6839      	ldr	r1, [r7, #0]
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f001 f97b 	bl	8006f3c <USBD_CtlError>
    ret = USBD_FAIL;
 8005c46:	2303      	movs	r3, #3
 8005c48:	75fb      	strb	r3, [r7, #23]
    break;
 8005c4a:	bf00      	nop
  }

  return (uint8_t)ret;
 8005c4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3718      	adds	r7, #24
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop

08005c58 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	460b      	mov	r3, r1
 8005c62:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005c6a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d101      	bne.n	8005c7a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005c76:	2303      	movs	r3, #3
 8005c78:	e049      	b.n	8005d0e <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c80:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005c82:	78fa      	ldrb	r2, [r7, #3]
 8005c84:	6879      	ldr	r1, [r7, #4]
 8005c86:	4613      	mov	r3, r2
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	4413      	add	r3, r2
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	440b      	add	r3, r1
 8005c90:	3318      	adds	r3, #24
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d029      	beq.n	8005cec <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005c98:	78fa      	ldrb	r2, [r7, #3]
 8005c9a:	6879      	ldr	r1, [r7, #4]
 8005c9c:	4613      	mov	r3, r2
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	4413      	add	r3, r2
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	440b      	add	r3, r1
 8005ca6:	3318      	adds	r3, #24
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	78f9      	ldrb	r1, [r7, #3]
 8005cac:	68f8      	ldr	r0, [r7, #12]
 8005cae:	460b      	mov	r3, r1
 8005cb0:	00db      	lsls	r3, r3, #3
 8005cb2:	1a5b      	subs	r3, r3, r1
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	4403      	add	r3, r0
 8005cb8:	3344      	adds	r3, #68	; 0x44
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	fbb2 f1f3 	udiv	r1, r2, r3
 8005cc0:	fb03 f301 	mul.w	r3, r3, r1
 8005cc4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d110      	bne.n	8005cec <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005cca:	78fa      	ldrb	r2, [r7, #3]
 8005ccc:	6879      	ldr	r1, [r7, #4]
 8005cce:	4613      	mov	r3, r2
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	4413      	add	r3, r2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	440b      	add	r3, r1
 8005cd8:	3318      	adds	r3, #24
 8005cda:	2200      	movs	r2, #0
 8005cdc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005cde:	78f9      	ldrb	r1, [r7, #3]
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f001 fe7c 	bl	80079e2 <USBD_LL_Transmit>
 8005cea:	e00f      	b.n	8005d0c <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	68ba      	ldr	r2, [r7, #8]
 8005cfe:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005d02:	68ba      	ldr	r2, [r7, #8]
 8005d04:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005d08:	78fa      	ldrb	r2, [r7, #3]
 8005d0a:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8005d0c:	2300      	movs	r3, #0
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3710      	adds	r7, #16
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}

08005d16 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005d16:	b580      	push	{r7, lr}
 8005d18:	b084      	sub	sp, #16
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
 8005d1e:	460b      	mov	r3, r1
 8005d20:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d28:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d101      	bne.n	8005d38 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005d34:	2303      	movs	r3, #3
 8005d36:	e015      	b.n	8005d64 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005d38:	78fb      	ldrb	r3, [r7, #3]
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f001 fe92 	bl	8007a66 <USBD_LL_GetRxDataSize>
 8005d42:	4602      	mov	r2, r0
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005d5e:	4611      	mov	r1, r2
 8005d60:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005d62:	2300      	movs	r3, #0
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3710      	adds	r7, #16
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b084      	sub	sp, #16
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d7a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d015      	beq.n	8005db2 <USBD_CDC_EP0_RxReady+0x46>
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005d8c:	2bff      	cmp	r3, #255	; 0xff
 8005d8e:	d010      	beq.n	8005db2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005d9e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005da6:	b292      	uxth	r2, r2
 8005da8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	22ff      	movs	r2, #255	; 0xff
 8005dae:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8005db2:	2300      	movs	r3, #0
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3710      	adds	r7, #16
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}

08005dbc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2243      	movs	r2, #67	; 0x43
 8005dc8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005dca:	4b03      	ldr	r3, [pc, #12]	; (8005dd8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	370c      	adds	r7, #12
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr
 8005dd8:	20000094 	.word	0x20000094

08005ddc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2243      	movs	r2, #67	; 0x43
 8005de8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005dea:	4b03      	ldr	r3, [pc, #12]	; (8005df8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	370c      	adds	r7, #12
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr
 8005df8:	20000050 	.word	0x20000050

08005dfc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2243      	movs	r2, #67	; 0x43
 8005e08:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005e0a:	4b03      	ldr	r3, [pc, #12]	; (8005e18 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr
 8005e18:	200000d8 	.word	0x200000d8

08005e1c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	220a      	movs	r2, #10
 8005e28:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005e2a:	4b03      	ldr	r3, [pc, #12]	; (8005e38 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	370c      	adds	r7, #12
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr
 8005e38:	2000000c 	.word	0x2000000c

08005e3c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d101      	bne.n	8005e50 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005e4c:	2303      	movs	r3, #3
 8005e4e:	e004      	b.n	8005e5a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	683a      	ldr	r2, [r7, #0]
 8005e54:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	370c      	adds	r7, #12
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr

08005e66 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005e66:	b480      	push	{r7}
 8005e68:	b087      	sub	sp, #28
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	60f8      	str	r0, [r7, #12]
 8005e6e:	60b9      	str	r1, [r7, #8]
 8005e70:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e78:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	68ba      	ldr	r2, [r7, #8]
 8005e7e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005e8a:	2300      	movs	r3, #0
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	371c      	adds	r7, #28
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ea8:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	683a      	ldr	r2, [r7, #0]
 8005eae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3714      	adds	r7, #20
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ece:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d101      	bne.n	8005ede <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005eda:	2303      	movs	r3, #3
 8005edc:	e016      	b.n	8005f0c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	7c1b      	ldrb	r3, [r3, #16]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d109      	bne.n	8005efa <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005eec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ef0:	2101      	movs	r1, #1
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f001 fd96 	bl	8007a24 <USBD_LL_PrepareReceive>
 8005ef8:	e007      	b.n	8005f0a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f00:	2340      	movs	r3, #64	; 0x40
 8005f02:	2101      	movs	r1, #1
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f001 fd8d 	bl	8007a24 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005f0a:	2300      	movs	r3, #0
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3710      	adds	r7, #16
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b086      	sub	sp, #24
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	4613      	mov	r3, r2
 8005f20:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d101      	bne.n	8005f2c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005f28:	2303      	movs	r3, #3
 8005f2a:	e025      	b.n	8005f78 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d003      	beq.n	8005f3e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d003      	beq.n	8005f50 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d003      	beq.n	8005f5e <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	68ba      	ldr	r2, [r7, #8]
 8005f5a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2201      	movs	r2, #1
 8005f62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	79fa      	ldrb	r2, [r7, #7]
 8005f6a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005f6c:	68f8      	ldr	r0, [r7, #12]
 8005f6e:	f001 fc03 	bl	8007778 <USBD_LL_Init>
 8005f72:	4603      	mov	r3, r0
 8005f74:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005f76:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3718      	adds	r7, #24
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d101      	bne.n	8005f98 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005f94:	2303      	movs	r3, #3
 8005f96:	e010      	b.n	8005fba <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	683a      	ldr	r2, [r7, #0]
 8005f9c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa8:	f107 020e 	add.w	r2, r7, #14
 8005fac:	4610      	mov	r0, r2
 8005fae:	4798      	blx	r3
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3710      	adds	r7, #16
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}

08005fc2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005fc2:	b580      	push	{r7, lr}
 8005fc4:	b082      	sub	sp, #8
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f001 fc20 	bl	8007810 <USBD_LL_Start>
 8005fd0:	4603      	mov	r3, r0
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3708      	adds	r7, #8
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}

08005fda <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005fda:	b480      	push	{r7}
 8005fdc:	b083      	sub	sp, #12
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005fe2:	2300      	movs	r3, #0
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	370c      	adds	r7, #12
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b084      	sub	sp, #16
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	460b      	mov	r3, r1
 8005ffa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005ffc:	2303      	movs	r3, #3
 8005ffe:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006006:	2b00      	cmp	r3, #0
 8006008:	d009      	beq.n	800601e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	78fa      	ldrb	r2, [r7, #3]
 8006014:	4611      	mov	r1, r2
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	4798      	blx	r3
 800601a:	4603      	mov	r3, r0
 800601c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800601e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006020:	4618      	mov	r0, r3
 8006022:	3710      	adds	r7, #16
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	460b      	mov	r3, r1
 8006032:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800603a:	2b00      	cmp	r3, #0
 800603c:	d007      	beq.n	800604e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	78fa      	ldrb	r2, [r7, #3]
 8006048:	4611      	mov	r1, r2
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	4798      	blx	r3
  }

  return USBD_OK;
 800604e:	2300      	movs	r3, #0
}
 8006050:	4618      	mov	r0, r3
 8006052:	3708      	adds	r7, #8
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006068:	6839      	ldr	r1, [r7, #0]
 800606a:	4618      	mov	r0, r3
 800606c:	f000 ff2c 	bl	8006ec8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800607e:	461a      	mov	r2, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800608c:	f003 031f 	and.w	r3, r3, #31
 8006090:	2b01      	cmp	r3, #1
 8006092:	d00e      	beq.n	80060b2 <USBD_LL_SetupStage+0x5a>
 8006094:	2b01      	cmp	r3, #1
 8006096:	d302      	bcc.n	800609e <USBD_LL_SetupStage+0x46>
 8006098:	2b02      	cmp	r3, #2
 800609a:	d014      	beq.n	80060c6 <USBD_LL_SetupStage+0x6e>
 800609c:	e01d      	b.n	80060da <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80060a4:	4619      	mov	r1, r3
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 fa18 	bl	80064dc <USBD_StdDevReq>
 80060ac:	4603      	mov	r3, r0
 80060ae:	73fb      	strb	r3, [r7, #15]
      break;
 80060b0:	e020      	b.n	80060f4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80060b8:	4619      	mov	r1, r3
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 fa7c 	bl	80065b8 <USBD_StdItfReq>
 80060c0:	4603      	mov	r3, r0
 80060c2:	73fb      	strb	r3, [r7, #15]
      break;
 80060c4:	e016      	b.n	80060f4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80060cc:	4619      	mov	r1, r3
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 fab8 	bl	8006644 <USBD_StdEPReq>
 80060d4:	4603      	mov	r3, r0
 80060d6:	73fb      	strb	r3, [r7, #15]
      break;
 80060d8:	e00c      	b.n	80060f4 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80060e0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	4619      	mov	r1, r3
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f001 fbf1 	bl	80078d0 <USBD_LL_StallEP>
 80060ee:	4603      	mov	r3, r0
 80060f0:	73fb      	strb	r3, [r7, #15]
      break;
 80060f2:	bf00      	nop
  }

  return ret;
 80060f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3710      	adds	r7, #16
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}

080060fe <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80060fe:	b580      	push	{r7, lr}
 8006100:	b086      	sub	sp, #24
 8006102:	af00      	add	r7, sp, #0
 8006104:	60f8      	str	r0, [r7, #12]
 8006106:	460b      	mov	r3, r1
 8006108:	607a      	str	r2, [r7, #4]
 800610a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800610c:	7afb      	ldrb	r3, [r7, #11]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d137      	bne.n	8006182 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006118:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006120:	2b03      	cmp	r3, #3
 8006122:	d14a      	bne.n	80061ba <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	689a      	ldr	r2, [r3, #8]
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	429a      	cmp	r2, r3
 800612e:	d913      	bls.n	8006158 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	689a      	ldr	r2, [r3, #8]
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	1ad2      	subs	r2, r2, r3
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	68da      	ldr	r2, [r3, #12]
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	4293      	cmp	r3, r2
 8006148:	bf28      	it	cs
 800614a:	4613      	movcs	r3, r2
 800614c:	461a      	mov	r2, r3
 800614e:	6879      	ldr	r1, [r7, #4]
 8006150:	68f8      	ldr	r0, [r7, #12]
 8006152:	f000 ffad 	bl	80070b0 <USBD_CtlContinueRx>
 8006156:	e030      	b.n	80061ba <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d00a      	beq.n	800617a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800616a:	2b03      	cmp	r3, #3
 800616c:	d105      	bne.n	800617a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	68f8      	ldr	r0, [r7, #12]
 8006178:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800617a:	68f8      	ldr	r0, [r7, #12]
 800617c:	f000 ffa9 	bl	80070d2 <USBD_CtlSendStatus>
 8006180:	e01b      	b.n	80061ba <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006188:	699b      	ldr	r3, [r3, #24]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d013      	beq.n	80061b6 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006194:	2b03      	cmp	r3, #3
 8006196:	d10e      	bne.n	80061b6 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800619e:	699b      	ldr	r3, [r3, #24]
 80061a0:	7afa      	ldrb	r2, [r7, #11]
 80061a2:	4611      	mov	r1, r2
 80061a4:	68f8      	ldr	r0, [r7, #12]
 80061a6:	4798      	blx	r3
 80061a8:	4603      	mov	r3, r0
 80061aa:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80061ac:	7dfb      	ldrb	r3, [r7, #23]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d003      	beq.n	80061ba <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80061b2:	7dfb      	ldrb	r3, [r7, #23]
 80061b4:	e002      	b.n	80061bc <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80061b6:	2303      	movs	r3, #3
 80061b8:	e000      	b.n	80061bc <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3718      	adds	r7, #24
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b086      	sub	sp, #24
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	460b      	mov	r3, r1
 80061ce:	607a      	str	r2, [r7, #4]
 80061d0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80061d2:	7afb      	ldrb	r3, [r7, #11]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d16a      	bne.n	80062ae <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	3314      	adds	r3, #20
 80061dc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80061e4:	2b02      	cmp	r3, #2
 80061e6:	d155      	bne.n	8006294 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	689a      	ldr	r2, [r3, #8]
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d914      	bls.n	800621e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	689a      	ldr	r2, [r3, #8]
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	1ad2      	subs	r2, r2, r3
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	461a      	mov	r2, r3
 8006208:	6879      	ldr	r1, [r7, #4]
 800620a:	68f8      	ldr	r0, [r7, #12]
 800620c:	f000 ff22 	bl	8007054 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006210:	2300      	movs	r3, #0
 8006212:	2200      	movs	r2, #0
 8006214:	2100      	movs	r1, #0
 8006216:	68f8      	ldr	r0, [r7, #12]
 8006218:	f001 fc04 	bl	8007a24 <USBD_LL_PrepareReceive>
 800621c:	e03a      	b.n	8006294 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	68da      	ldr	r2, [r3, #12]
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	429a      	cmp	r2, r3
 8006228:	d11c      	bne.n	8006264 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	685a      	ldr	r2, [r3, #4]
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006232:	429a      	cmp	r2, r3
 8006234:	d316      	bcc.n	8006264 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	685a      	ldr	r2, [r3, #4]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006240:	429a      	cmp	r2, r3
 8006242:	d20f      	bcs.n	8006264 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006244:	2200      	movs	r2, #0
 8006246:	2100      	movs	r1, #0
 8006248:	68f8      	ldr	r0, [r7, #12]
 800624a:	f000 ff03 	bl	8007054 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2200      	movs	r2, #0
 8006252:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006256:	2300      	movs	r3, #0
 8006258:	2200      	movs	r2, #0
 800625a:	2100      	movs	r1, #0
 800625c:	68f8      	ldr	r0, [r7, #12]
 800625e:	f001 fbe1 	bl	8007a24 <USBD_LL_PrepareReceive>
 8006262:	e017      	b.n	8006294 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d00a      	beq.n	8006286 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006276:	2b03      	cmp	r3, #3
 8006278:	d105      	bne.n	8006286 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006280:	68db      	ldr	r3, [r3, #12]
 8006282:	68f8      	ldr	r0, [r7, #12]
 8006284:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006286:	2180      	movs	r1, #128	; 0x80
 8006288:	68f8      	ldr	r0, [r7, #12]
 800628a:	f001 fb21 	bl	80078d0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800628e:	68f8      	ldr	r0, [r7, #12]
 8006290:	f000 ff32 	bl	80070f8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800629a:	2b01      	cmp	r3, #1
 800629c:	d123      	bne.n	80062e6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800629e:	68f8      	ldr	r0, [r7, #12]
 80062a0:	f7ff fe9b 	bl	8005fda <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80062ac:	e01b      	b.n	80062e6 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062b4:	695b      	ldr	r3, [r3, #20]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d013      	beq.n	80062e2 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80062c0:	2b03      	cmp	r3, #3
 80062c2:	d10e      	bne.n	80062e2 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062ca:	695b      	ldr	r3, [r3, #20]
 80062cc:	7afa      	ldrb	r2, [r7, #11]
 80062ce:	4611      	mov	r1, r2
 80062d0:	68f8      	ldr	r0, [r7, #12]
 80062d2:	4798      	blx	r3
 80062d4:	4603      	mov	r3, r0
 80062d6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80062d8:	7dfb      	ldrb	r3, [r7, #23]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d003      	beq.n	80062e6 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80062de:	7dfb      	ldrb	r3, [r7, #23]
 80062e0:	e002      	b.n	80062e8 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80062e2:	2303      	movs	r3, #3
 80062e4:	e000      	b.n	80062e8 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80062e6:	2300      	movs	r3, #0
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3718      	adds	r7, #24
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b082      	sub	sp, #8
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2200      	movs	r2, #0
 8006304:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800631c:	2b00      	cmp	r3, #0
 800631e:	d009      	beq.n	8006334 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	6852      	ldr	r2, [r2, #4]
 800632c:	b2d2      	uxtb	r2, r2
 800632e:	4611      	mov	r1, r2
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006334:	2340      	movs	r3, #64	; 0x40
 8006336:	2200      	movs	r2, #0
 8006338:	2100      	movs	r1, #0
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f001 fa83 	bl	8007846 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2240      	movs	r2, #64	; 0x40
 800634c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006350:	2340      	movs	r3, #64	; 0x40
 8006352:	2200      	movs	r2, #0
 8006354:	2180      	movs	r1, #128	; 0x80
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f001 fa75 	bl	8007846 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2240      	movs	r2, #64	; 0x40
 8006366:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	3708      	adds	r7, #8
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}

08006372 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006372:	b480      	push	{r7}
 8006374:	b083      	sub	sp, #12
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
 800637a:	460b      	mov	r3, r1
 800637c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	78fa      	ldrb	r2, [r7, #3]
 8006382:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006384:	2300      	movs	r3, #0
}
 8006386:	4618      	mov	r0, r3
 8006388:	370c      	adds	r7, #12
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr

08006392 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006392:	b480      	push	{r7}
 8006394:	b083      	sub	sp, #12
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2204      	movs	r2, #4
 80063aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80063ae:	2300      	movs	r3, #0
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	370c      	adds	r7, #12
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80063bc:	b480      	push	{r7}
 80063be:	b083      	sub	sp, #12
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063ca:	2b04      	cmp	r3, #4
 80063cc:	d105      	bne.n	80063da <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80063da:	2300      	movs	r3, #0
}
 80063dc:	4618      	mov	r0, r3
 80063de:	370c      	adds	r7, #12
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063f6:	2b03      	cmp	r3, #3
 80063f8:	d10b      	bne.n	8006412 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006400:	69db      	ldr	r3, [r3, #28]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d005      	beq.n	8006412 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800640c:	69db      	ldr	r3, [r3, #28]
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006412:	2300      	movs	r3, #0
}
 8006414:	4618      	mov	r0, r3
 8006416:	3708      	adds	r7, #8
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}

0800641c <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	460b      	mov	r3, r1
 8006426:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006428:	2300      	movs	r3, #0
}
 800642a:	4618      	mov	r0, r3
 800642c:	370c      	adds	r7, #12
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr

08006436 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006436:	b480      	push	{r7}
 8006438:	b083      	sub	sp, #12
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
 800643e:	460b      	mov	r3, r1
 8006440:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006442:	2300      	movs	r3, #0
}
 8006444:	4618      	mov	r0, r3
 8006446:	370c      	adds	r7, #12
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006450:	b480      	push	{r7}
 8006452:	b083      	sub	sp, #12
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006458:	2300      	movs	r3, #0
}
 800645a:	4618      	mov	r0, r3
 800645c:	370c      	adds	r7, #12
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr

08006466 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006466:	b580      	push	{r7, lr}
 8006468:	b082      	sub	sp, #8
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2201      	movs	r2, #1
 8006472:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800647c:	2b00      	cmp	r3, #0
 800647e:	d009      	beq.n	8006494 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	6852      	ldr	r2, [r2, #4]
 800648c:	b2d2      	uxtb	r2, r2
 800648e:	4611      	mov	r1, r2
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	4798      	blx	r3
  }

  return USBD_OK;
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	3708      	adds	r7, #8
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}

0800649e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800649e:	b480      	push	{r7}
 80064a0:	b087      	sub	sp, #28
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	781b      	ldrb	r3, [r3, #0]
 80064ae:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	3301      	adds	r3, #1
 80064b4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80064bc:	8a3b      	ldrh	r3, [r7, #16]
 80064be:	021b      	lsls	r3, r3, #8
 80064c0:	b21a      	sxth	r2, r3
 80064c2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	b21b      	sxth	r3, r3
 80064ca:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80064cc:	89fb      	ldrh	r3, [r7, #14]
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	371c      	adds	r7, #28
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr
	...

080064dc <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b084      	sub	sp, #16
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80064e6:	2300      	movs	r3, #0
 80064e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80064f2:	2b20      	cmp	r3, #32
 80064f4:	d004      	beq.n	8006500 <USBD_StdDevReq+0x24>
 80064f6:	2b40      	cmp	r3, #64	; 0x40
 80064f8:	d002      	beq.n	8006500 <USBD_StdDevReq+0x24>
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d00a      	beq.n	8006514 <USBD_StdDevReq+0x38>
 80064fe:	e050      	b.n	80065a2 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	6839      	ldr	r1, [r7, #0]
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	4798      	blx	r3
 800650e:	4603      	mov	r3, r0
 8006510:	73fb      	strb	r3, [r7, #15]
    break;
 8006512:	e04b      	b.n	80065ac <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	785b      	ldrb	r3, [r3, #1]
 8006518:	2b09      	cmp	r3, #9
 800651a:	d83c      	bhi.n	8006596 <USBD_StdDevReq+0xba>
 800651c:	a201      	add	r2, pc, #4	; (adr r2, 8006524 <USBD_StdDevReq+0x48>)
 800651e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006522:	bf00      	nop
 8006524:	08006579 	.word	0x08006579
 8006528:	0800658d 	.word	0x0800658d
 800652c:	08006597 	.word	0x08006597
 8006530:	08006583 	.word	0x08006583
 8006534:	08006597 	.word	0x08006597
 8006538:	08006557 	.word	0x08006557
 800653c:	0800654d 	.word	0x0800654d
 8006540:	08006597 	.word	0x08006597
 8006544:	0800656f 	.word	0x0800656f
 8006548:	08006561 	.word	0x08006561
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800654c:	6839      	ldr	r1, [r7, #0]
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 f9ce 	bl	80068f0 <USBD_GetDescriptor>
      break;
 8006554:	e024      	b.n	80065a0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8006556:	6839      	ldr	r1, [r7, #0]
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 fb33 	bl	8006bc4 <USBD_SetAddress>
      break;
 800655e:	e01f      	b.n	80065a0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8006560:	6839      	ldr	r1, [r7, #0]
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 fb70 	bl	8006c48 <USBD_SetConfig>
 8006568:	4603      	mov	r3, r0
 800656a:	73fb      	strb	r3, [r7, #15]
      break;
 800656c:	e018      	b.n	80065a0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800656e:	6839      	ldr	r1, [r7, #0]
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f000 fc0d 	bl	8006d90 <USBD_GetConfig>
      break;
 8006576:	e013      	b.n	80065a0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8006578:	6839      	ldr	r1, [r7, #0]
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 fc3c 	bl	8006df8 <USBD_GetStatus>
      break;
 8006580:	e00e      	b.n	80065a0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8006582:	6839      	ldr	r1, [r7, #0]
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f000 fc6a 	bl	8006e5e <USBD_SetFeature>
      break;
 800658a:	e009      	b.n	80065a0 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800658c:	6839      	ldr	r1, [r7, #0]
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 fc79 	bl	8006e86 <USBD_ClrFeature>
      break;
 8006594:	e004      	b.n	80065a0 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8006596:	6839      	ldr	r1, [r7, #0]
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f000 fccf 	bl	8006f3c <USBD_CtlError>
      break;
 800659e:	bf00      	nop
    }
    break;
 80065a0:	e004      	b.n	80065ac <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80065a2:	6839      	ldr	r1, [r7, #0]
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 fcc9 	bl	8006f3c <USBD_CtlError>
    break;
 80065aa:	bf00      	nop
  }

  return ret;
 80065ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3710      	adds	r7, #16
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop

080065b8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80065c2:	2300      	movs	r3, #0
 80065c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065ce:	2b20      	cmp	r3, #32
 80065d0:	d003      	beq.n	80065da <USBD_StdItfReq+0x22>
 80065d2:	2b40      	cmp	r3, #64	; 0x40
 80065d4:	d001      	beq.n	80065da <USBD_StdItfReq+0x22>
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d12a      	bne.n	8006630 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065e0:	3b01      	subs	r3, #1
 80065e2:	2b02      	cmp	r3, #2
 80065e4:	d81d      	bhi.n	8006622 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	889b      	ldrh	r3, [r3, #4]
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d813      	bhi.n	8006618 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	6839      	ldr	r1, [r7, #0]
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	4798      	blx	r3
 80065fe:	4603      	mov	r3, r0
 8006600:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	88db      	ldrh	r3, [r3, #6]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d110      	bne.n	800662c <USBD_StdItfReq+0x74>
 800660a:	7bfb      	ldrb	r3, [r7, #15]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d10d      	bne.n	800662c <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f000 fd5e 	bl	80070d2 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8006616:	e009      	b.n	800662c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8006618:	6839      	ldr	r1, [r7, #0]
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 fc8e 	bl	8006f3c <USBD_CtlError>
      break;
 8006620:	e004      	b.n	800662c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8006622:	6839      	ldr	r1, [r7, #0]
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 fc89 	bl	8006f3c <USBD_CtlError>
      break;
 800662a:	e000      	b.n	800662e <USBD_StdItfReq+0x76>
      break;
 800662c:	bf00      	nop
    }
    break;
 800662e:	e004      	b.n	800663a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8006630:	6839      	ldr	r1, [r7, #0]
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 fc82 	bl	8006f3c <USBD_CtlError>
    break;
 8006638:	bf00      	nop
  }

  return ret;
 800663a:	7bfb      	ldrb	r3, [r7, #15]
}
 800663c:	4618      	mov	r0, r3
 800663e:	3710      	adds	r7, #16
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}

08006644 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800664e:	2300      	movs	r3, #0
 8006650:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	889b      	ldrh	r3, [r3, #4]
 8006656:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006660:	2b20      	cmp	r3, #32
 8006662:	d004      	beq.n	800666e <USBD_StdEPReq+0x2a>
 8006664:	2b40      	cmp	r3, #64	; 0x40
 8006666:	d002      	beq.n	800666e <USBD_StdEPReq+0x2a>
 8006668:	2b00      	cmp	r3, #0
 800666a:	d00a      	beq.n	8006682 <USBD_StdEPReq+0x3e>
 800666c:	e135      	b.n	80068da <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	6839      	ldr	r1, [r7, #0]
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	4798      	blx	r3
 800667c:	4603      	mov	r3, r0
 800667e:	73fb      	strb	r3, [r7, #15]
    break;
 8006680:	e130      	b.n	80068e4 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	785b      	ldrb	r3, [r3, #1]
 8006686:	2b01      	cmp	r3, #1
 8006688:	d03e      	beq.n	8006708 <USBD_StdEPReq+0xc4>
 800668a:	2b03      	cmp	r3, #3
 800668c:	d002      	beq.n	8006694 <USBD_StdEPReq+0x50>
 800668e:	2b00      	cmp	r3, #0
 8006690:	d077      	beq.n	8006782 <USBD_StdEPReq+0x13e>
 8006692:	e11c      	b.n	80068ce <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800669a:	2b02      	cmp	r3, #2
 800669c:	d002      	beq.n	80066a4 <USBD_StdEPReq+0x60>
 800669e:	2b03      	cmp	r3, #3
 80066a0:	d015      	beq.n	80066ce <USBD_StdEPReq+0x8a>
 80066a2:	e02b      	b.n	80066fc <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80066a4:	7bbb      	ldrb	r3, [r7, #14]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d00c      	beq.n	80066c4 <USBD_StdEPReq+0x80>
 80066aa:	7bbb      	ldrb	r3, [r7, #14]
 80066ac:	2b80      	cmp	r3, #128	; 0x80
 80066ae:	d009      	beq.n	80066c4 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80066b0:	7bbb      	ldrb	r3, [r7, #14]
 80066b2:	4619      	mov	r1, r3
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f001 f90b 	bl	80078d0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80066ba:	2180      	movs	r1, #128	; 0x80
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f001 f907 	bl	80078d0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80066c2:	e020      	b.n	8006706 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80066c4:	6839      	ldr	r1, [r7, #0]
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 fc38 	bl	8006f3c <USBD_CtlError>
        break;
 80066cc:	e01b      	b.n	8006706 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	885b      	ldrh	r3, [r3, #2]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d10e      	bne.n	80066f4 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80066d6:	7bbb      	ldrb	r3, [r7, #14]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d00b      	beq.n	80066f4 <USBD_StdEPReq+0xb0>
 80066dc:	7bbb      	ldrb	r3, [r7, #14]
 80066de:	2b80      	cmp	r3, #128	; 0x80
 80066e0:	d008      	beq.n	80066f4 <USBD_StdEPReq+0xb0>
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	88db      	ldrh	r3, [r3, #6]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d104      	bne.n	80066f4 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80066ea:	7bbb      	ldrb	r3, [r7, #14]
 80066ec:	4619      	mov	r1, r3
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f001 f8ee 	bl	80078d0 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f000 fcec 	bl	80070d2 <USBD_CtlSendStatus>

        break;
 80066fa:	e004      	b.n	8006706 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80066fc:	6839      	ldr	r1, [r7, #0]
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 fc1c 	bl	8006f3c <USBD_CtlError>
        break;
 8006704:	bf00      	nop
      }
      break;
 8006706:	e0e7      	b.n	80068d8 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800670e:	2b02      	cmp	r3, #2
 8006710:	d002      	beq.n	8006718 <USBD_StdEPReq+0xd4>
 8006712:	2b03      	cmp	r3, #3
 8006714:	d015      	beq.n	8006742 <USBD_StdEPReq+0xfe>
 8006716:	e02d      	b.n	8006774 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006718:	7bbb      	ldrb	r3, [r7, #14]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d00c      	beq.n	8006738 <USBD_StdEPReq+0xf4>
 800671e:	7bbb      	ldrb	r3, [r7, #14]
 8006720:	2b80      	cmp	r3, #128	; 0x80
 8006722:	d009      	beq.n	8006738 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006724:	7bbb      	ldrb	r3, [r7, #14]
 8006726:	4619      	mov	r1, r3
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f001 f8d1 	bl	80078d0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800672e:	2180      	movs	r1, #128	; 0x80
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f001 f8cd 	bl	80078d0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006736:	e023      	b.n	8006780 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8006738:	6839      	ldr	r1, [r7, #0]
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 fbfe 	bl	8006f3c <USBD_CtlError>
        break;
 8006740:	e01e      	b.n	8006780 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	885b      	ldrh	r3, [r3, #2]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d119      	bne.n	800677e <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800674a:	7bbb      	ldrb	r3, [r7, #14]
 800674c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006750:	2b00      	cmp	r3, #0
 8006752:	d004      	beq.n	800675e <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006754:	7bbb      	ldrb	r3, [r7, #14]
 8006756:	4619      	mov	r1, r3
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f001 f8d8 	bl	800790e <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 fcb7 	bl	80070d2 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	6839      	ldr	r1, [r7, #0]
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	4798      	blx	r3
        }
        break;
 8006772:	e004      	b.n	800677e <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8006774:	6839      	ldr	r1, [r7, #0]
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 fbe0 	bl	8006f3c <USBD_CtlError>
        break;
 800677c:	e000      	b.n	8006780 <USBD_StdEPReq+0x13c>
        break;
 800677e:	bf00      	nop
      }
      break;
 8006780:	e0aa      	b.n	80068d8 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006788:	2b02      	cmp	r3, #2
 800678a:	d002      	beq.n	8006792 <USBD_StdEPReq+0x14e>
 800678c:	2b03      	cmp	r3, #3
 800678e:	d032      	beq.n	80067f6 <USBD_StdEPReq+0x1b2>
 8006790:	e097      	b.n	80068c2 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006792:	7bbb      	ldrb	r3, [r7, #14]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d007      	beq.n	80067a8 <USBD_StdEPReq+0x164>
 8006798:	7bbb      	ldrb	r3, [r7, #14]
 800679a:	2b80      	cmp	r3, #128	; 0x80
 800679c:	d004      	beq.n	80067a8 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800679e:	6839      	ldr	r1, [r7, #0]
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 fbcb 	bl	8006f3c <USBD_CtlError>
          break;
 80067a6:	e091      	b.n	80068cc <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	da0b      	bge.n	80067c8 <USBD_StdEPReq+0x184>
 80067b0:	7bbb      	ldrb	r3, [r7, #14]
 80067b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80067b6:	4613      	mov	r3, r2
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	4413      	add	r3, r2
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	3310      	adds	r3, #16
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	4413      	add	r3, r2
 80067c4:	3304      	adds	r3, #4
 80067c6:	e00b      	b.n	80067e0 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80067c8:	7bbb      	ldrb	r3, [r7, #14]
 80067ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067ce:	4613      	mov	r3, r2
 80067d0:	009b      	lsls	r3, r3, #2
 80067d2:	4413      	add	r3, r2
 80067d4:	009b      	lsls	r3, r3, #2
 80067d6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	4413      	add	r3, r2
 80067de:	3304      	adds	r3, #4
 80067e0:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	2200      	movs	r2, #0
 80067e6:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	2202      	movs	r2, #2
 80067ec:	4619      	mov	r1, r3
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 fc15 	bl	800701e <USBD_CtlSendData>
        break;
 80067f4:	e06a      	b.n	80068cc <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80067f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	da11      	bge.n	8006822 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80067fe:	7bbb      	ldrb	r3, [r7, #14]
 8006800:	f003 020f 	and.w	r2, r3, #15
 8006804:	6879      	ldr	r1, [r7, #4]
 8006806:	4613      	mov	r3, r2
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	4413      	add	r3, r2
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	440b      	add	r3, r1
 8006810:	3324      	adds	r3, #36	; 0x24
 8006812:	881b      	ldrh	r3, [r3, #0]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d117      	bne.n	8006848 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8006818:	6839      	ldr	r1, [r7, #0]
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f000 fb8e 	bl	8006f3c <USBD_CtlError>
            break;
 8006820:	e054      	b.n	80068cc <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006822:	7bbb      	ldrb	r3, [r7, #14]
 8006824:	f003 020f 	and.w	r2, r3, #15
 8006828:	6879      	ldr	r1, [r7, #4]
 800682a:	4613      	mov	r3, r2
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	4413      	add	r3, r2
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	440b      	add	r3, r1
 8006834:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006838:	881b      	ldrh	r3, [r3, #0]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d104      	bne.n	8006848 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800683e:	6839      	ldr	r1, [r7, #0]
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 fb7b 	bl	8006f3c <USBD_CtlError>
            break;
 8006846:	e041      	b.n	80068cc <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006848:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800684c:	2b00      	cmp	r3, #0
 800684e:	da0b      	bge.n	8006868 <USBD_StdEPReq+0x224>
 8006850:	7bbb      	ldrb	r3, [r7, #14]
 8006852:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006856:	4613      	mov	r3, r2
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	4413      	add	r3, r2
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	3310      	adds	r3, #16
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	4413      	add	r3, r2
 8006864:	3304      	adds	r3, #4
 8006866:	e00b      	b.n	8006880 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006868:	7bbb      	ldrb	r3, [r7, #14]
 800686a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800686e:	4613      	mov	r3, r2
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	4413      	add	r3, r2
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	4413      	add	r3, r2
 800687e:	3304      	adds	r3, #4
 8006880:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006882:	7bbb      	ldrb	r3, [r7, #14]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d002      	beq.n	800688e <USBD_StdEPReq+0x24a>
 8006888:	7bbb      	ldrb	r3, [r7, #14]
 800688a:	2b80      	cmp	r3, #128	; 0x80
 800688c:	d103      	bne.n	8006896 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	2200      	movs	r2, #0
 8006892:	601a      	str	r2, [r3, #0]
 8006894:	e00e      	b.n	80068b4 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006896:	7bbb      	ldrb	r3, [r7, #14]
 8006898:	4619      	mov	r1, r3
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f001 f856 	bl	800794c <USBD_LL_IsStallEP>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d003      	beq.n	80068ae <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	2201      	movs	r2, #1
 80068aa:	601a      	str	r2, [r3, #0]
 80068ac:	e002      	b.n	80068b4 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	2200      	movs	r2, #0
 80068b2:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	2202      	movs	r2, #2
 80068b8:	4619      	mov	r1, r3
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 fbaf 	bl	800701e <USBD_CtlSendData>
          break;
 80068c0:	e004      	b.n	80068cc <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 80068c2:	6839      	ldr	r1, [r7, #0]
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 fb39 	bl	8006f3c <USBD_CtlError>
        break;
 80068ca:	bf00      	nop
      }
      break;
 80068cc:	e004      	b.n	80068d8 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 80068ce:	6839      	ldr	r1, [r7, #0]
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 fb33 	bl	8006f3c <USBD_CtlError>
      break;
 80068d6:	bf00      	nop
    }
    break;
 80068d8:	e004      	b.n	80068e4 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 80068da:	6839      	ldr	r1, [r7, #0]
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 fb2d 	bl	8006f3c <USBD_CtlError>
    break;
 80068e2:	bf00      	nop
  }

  return ret;
 80068e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3710      	adds	r7, #16
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
	...

080068f0 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80068fa:	2300      	movs	r3, #0
 80068fc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80068fe:	2300      	movs	r3, #0
 8006900:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006902:	2300      	movs	r3, #0
 8006904:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	885b      	ldrh	r3, [r3, #2]
 800690a:	0a1b      	lsrs	r3, r3, #8
 800690c:	b29b      	uxth	r3, r3
 800690e:	3b01      	subs	r3, #1
 8006910:	2b06      	cmp	r3, #6
 8006912:	f200 8128 	bhi.w	8006b66 <USBD_GetDescriptor+0x276>
 8006916:	a201      	add	r2, pc, #4	; (adr r2, 800691c <USBD_GetDescriptor+0x2c>)
 8006918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800691c:	08006939 	.word	0x08006939
 8006920:	08006951 	.word	0x08006951
 8006924:	08006991 	.word	0x08006991
 8006928:	08006b67 	.word	0x08006b67
 800692c:	08006b67 	.word	0x08006b67
 8006930:	08006b07 	.word	0x08006b07
 8006934:	08006b33 	.word	0x08006b33
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	7c12      	ldrb	r2, [r2, #16]
 8006944:	f107 0108 	add.w	r1, r7, #8
 8006948:	4610      	mov	r0, r2
 800694a:	4798      	blx	r3
 800694c:	60f8      	str	r0, [r7, #12]
    break;
 800694e:	e112      	b.n	8006b76 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	7c1b      	ldrb	r3, [r3, #16]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d10d      	bne.n	8006974 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800695e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006960:	f107 0208 	add.w	r2, r7, #8
 8006964:	4610      	mov	r0, r2
 8006966:	4798      	blx	r3
 8006968:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	3301      	adds	r3, #1
 800696e:	2202      	movs	r2, #2
 8006970:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8006972:	e100      	b.n	8006b76 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800697a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800697c:	f107 0208 	add.w	r2, r7, #8
 8006980:	4610      	mov	r0, r2
 8006982:	4798      	blx	r3
 8006984:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	3301      	adds	r3, #1
 800698a:	2202      	movs	r2, #2
 800698c:	701a      	strb	r2, [r3, #0]
    break;
 800698e:	e0f2      	b.n	8006b76 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	885b      	ldrh	r3, [r3, #2]
 8006994:	b2db      	uxtb	r3, r3
 8006996:	2b05      	cmp	r3, #5
 8006998:	f200 80ac 	bhi.w	8006af4 <USBD_GetDescriptor+0x204>
 800699c:	a201      	add	r2, pc, #4	; (adr r2, 80069a4 <USBD_GetDescriptor+0xb4>)
 800699e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069a2:	bf00      	nop
 80069a4:	080069bd 	.word	0x080069bd
 80069a8:	080069f1 	.word	0x080069f1
 80069ac:	08006a25 	.word	0x08006a25
 80069b0:	08006a59 	.word	0x08006a59
 80069b4:	08006a8d 	.word	0x08006a8d
 80069b8:	08006ac1 	.word	0x08006ac1
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d00b      	beq.n	80069e0 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	7c12      	ldrb	r2, [r2, #16]
 80069d4:	f107 0108 	add.w	r1, r7, #8
 80069d8:	4610      	mov	r0, r2
 80069da:	4798      	blx	r3
 80069dc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80069de:	e091      	b.n	8006b04 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80069e0:	6839      	ldr	r1, [r7, #0]
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 faaa 	bl	8006f3c <USBD_CtlError>
        err++;
 80069e8:	7afb      	ldrb	r3, [r7, #11]
 80069ea:	3301      	adds	r3, #1
 80069ec:	72fb      	strb	r3, [r7, #11]
      break;
 80069ee:	e089      	b.n	8006b04 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d00b      	beq.n	8006a14 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	7c12      	ldrb	r2, [r2, #16]
 8006a08:	f107 0108 	add.w	r1, r7, #8
 8006a0c:	4610      	mov	r0, r2
 8006a0e:	4798      	blx	r3
 8006a10:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a12:	e077      	b.n	8006b04 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006a14:	6839      	ldr	r1, [r7, #0]
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 fa90 	bl	8006f3c <USBD_CtlError>
        err++;
 8006a1c:	7afb      	ldrb	r3, [r7, #11]
 8006a1e:	3301      	adds	r3, #1
 8006a20:	72fb      	strb	r3, [r7, #11]
      break;
 8006a22:	e06f      	b.n	8006b04 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d00b      	beq.n	8006a48 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	7c12      	ldrb	r2, [r2, #16]
 8006a3c:	f107 0108 	add.w	r1, r7, #8
 8006a40:	4610      	mov	r0, r2
 8006a42:	4798      	blx	r3
 8006a44:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a46:	e05d      	b.n	8006b04 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006a48:	6839      	ldr	r1, [r7, #0]
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 fa76 	bl	8006f3c <USBD_CtlError>
        err++;
 8006a50:	7afb      	ldrb	r3, [r7, #11]
 8006a52:	3301      	adds	r3, #1
 8006a54:	72fb      	strb	r3, [r7, #11]
      break;
 8006a56:	e055      	b.n	8006b04 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a5e:	691b      	ldr	r3, [r3, #16]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d00b      	beq.n	8006a7c <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a6a:	691b      	ldr	r3, [r3, #16]
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	7c12      	ldrb	r2, [r2, #16]
 8006a70:	f107 0108 	add.w	r1, r7, #8
 8006a74:	4610      	mov	r0, r2
 8006a76:	4798      	blx	r3
 8006a78:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a7a:	e043      	b.n	8006b04 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006a7c:	6839      	ldr	r1, [r7, #0]
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 fa5c 	bl	8006f3c <USBD_CtlError>
        err++;
 8006a84:	7afb      	ldrb	r3, [r7, #11]
 8006a86:	3301      	adds	r3, #1
 8006a88:	72fb      	strb	r3, [r7, #11]
      break;
 8006a8a:	e03b      	b.n	8006b04 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a92:	695b      	ldr	r3, [r3, #20]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d00b      	beq.n	8006ab0 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a9e:	695b      	ldr	r3, [r3, #20]
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	7c12      	ldrb	r2, [r2, #16]
 8006aa4:	f107 0108 	add.w	r1, r7, #8
 8006aa8:	4610      	mov	r0, r2
 8006aaa:	4798      	blx	r3
 8006aac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006aae:	e029      	b.n	8006b04 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006ab0:	6839      	ldr	r1, [r7, #0]
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 fa42 	bl	8006f3c <USBD_CtlError>
        err++;
 8006ab8:	7afb      	ldrb	r3, [r7, #11]
 8006aba:	3301      	adds	r3, #1
 8006abc:	72fb      	strb	r3, [r7, #11]
      break;
 8006abe:	e021      	b.n	8006b04 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ac6:	699b      	ldr	r3, [r3, #24]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d00b      	beq.n	8006ae4 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ad2:	699b      	ldr	r3, [r3, #24]
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	7c12      	ldrb	r2, [r2, #16]
 8006ad8:	f107 0108 	add.w	r1, r7, #8
 8006adc:	4610      	mov	r0, r2
 8006ade:	4798      	blx	r3
 8006ae0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ae2:	e00f      	b.n	8006b04 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006ae4:	6839      	ldr	r1, [r7, #0]
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 fa28 	bl	8006f3c <USBD_CtlError>
        err++;
 8006aec:	7afb      	ldrb	r3, [r7, #11]
 8006aee:	3301      	adds	r3, #1
 8006af0:	72fb      	strb	r3, [r7, #11]
      break;
 8006af2:	e007      	b.n	8006b04 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8006af4:	6839      	ldr	r1, [r7, #0]
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 fa20 	bl	8006f3c <USBD_CtlError>
      err++;
 8006afc:	7afb      	ldrb	r3, [r7, #11]
 8006afe:	3301      	adds	r3, #1
 8006b00:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8006b02:	bf00      	nop
    }
    break;
 8006b04:	e037      	b.n	8006b76 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	7c1b      	ldrb	r3, [r3, #16]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d109      	bne.n	8006b22 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b16:	f107 0208 	add.w	r2, r7, #8
 8006b1a:	4610      	mov	r0, r2
 8006b1c:	4798      	blx	r3
 8006b1e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006b20:	e029      	b.n	8006b76 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8006b22:	6839      	ldr	r1, [r7, #0]
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f000 fa09 	bl	8006f3c <USBD_CtlError>
      err++;
 8006b2a:	7afb      	ldrb	r3, [r7, #11]
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	72fb      	strb	r3, [r7, #11]
    break;
 8006b30:	e021      	b.n	8006b76 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	7c1b      	ldrb	r3, [r3, #16]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d10d      	bne.n	8006b56 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b42:	f107 0208 	add.w	r2, r7, #8
 8006b46:	4610      	mov	r0, r2
 8006b48:	4798      	blx	r3
 8006b4a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	3301      	adds	r3, #1
 8006b50:	2207      	movs	r2, #7
 8006b52:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006b54:	e00f      	b.n	8006b76 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8006b56:	6839      	ldr	r1, [r7, #0]
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 f9ef 	bl	8006f3c <USBD_CtlError>
      err++;
 8006b5e:	7afb      	ldrb	r3, [r7, #11]
 8006b60:	3301      	adds	r3, #1
 8006b62:	72fb      	strb	r3, [r7, #11]
    break;
 8006b64:	e007      	b.n	8006b76 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8006b66:	6839      	ldr	r1, [r7, #0]
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 f9e7 	bl	8006f3c <USBD_CtlError>
    err++;
 8006b6e:	7afb      	ldrb	r3, [r7, #11]
 8006b70:	3301      	adds	r3, #1
 8006b72:	72fb      	strb	r3, [r7, #11]
    break;
 8006b74:	bf00      	nop
  }

  if (err != 0U)
 8006b76:	7afb      	ldrb	r3, [r7, #11]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d11e      	bne.n	8006bba <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	88db      	ldrh	r3, [r3, #6]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d016      	beq.n	8006bb2 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8006b84:	893b      	ldrh	r3, [r7, #8]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d00e      	beq.n	8006ba8 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	88da      	ldrh	r2, [r3, #6]
 8006b8e:	893b      	ldrh	r3, [r7, #8]
 8006b90:	4293      	cmp	r3, r2
 8006b92:	bf28      	it	cs
 8006b94:	4613      	movcs	r3, r2
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8006b9a:	893b      	ldrh	r3, [r7, #8]
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	68f9      	ldr	r1, [r7, #12]
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 fa3c 	bl	800701e <USBD_CtlSendData>
 8006ba6:	e009      	b.n	8006bbc <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8006ba8:	6839      	ldr	r1, [r7, #0]
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 f9c6 	bl	8006f3c <USBD_CtlError>
 8006bb0:	e004      	b.n	8006bbc <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 fa8d 	bl	80070d2 <USBD_CtlSendStatus>
 8006bb8:	e000      	b.n	8006bbc <USBD_GetDescriptor+0x2cc>
    return;
 8006bba:	bf00      	nop
    }
  }
}
 8006bbc:	3710      	adds	r7, #16
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
 8006bc2:	bf00      	nop

08006bc4 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b084      	sub	sp, #16
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	889b      	ldrh	r3, [r3, #4]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d130      	bne.n	8006c38 <USBD_SetAddress+0x74>
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	88db      	ldrh	r3, [r3, #6]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d12c      	bne.n	8006c38 <USBD_SetAddress+0x74>
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	885b      	ldrh	r3, [r3, #2]
 8006be2:	2b7f      	cmp	r3, #127	; 0x7f
 8006be4:	d828      	bhi.n	8006c38 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	885b      	ldrh	r3, [r3, #2]
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bf0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bf8:	2b03      	cmp	r3, #3
 8006bfa:	d104      	bne.n	8006c06 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006bfc:	6839      	ldr	r1, [r7, #0]
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 f99c 	bl	8006f3c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c04:	e01c      	b.n	8006c40 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	7bfa      	ldrb	r2, [r7, #15]
 8006c0a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006c0e:	7bfb      	ldrb	r3, [r7, #15]
 8006c10:	4619      	mov	r1, r3
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 fec6 	bl	80079a4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 fa5a 	bl	80070d2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006c1e:	7bfb      	ldrb	r3, [r7, #15]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d004      	beq.n	8006c2e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2202      	movs	r2, #2
 8006c28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c2c:	e008      	b.n	8006c40 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2201      	movs	r2, #1
 8006c32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c36:	e003      	b.n	8006c40 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006c38:	6839      	ldr	r1, [r7, #0]
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 f97e 	bl	8006f3c <USBD_CtlError>
  }
}
 8006c40:	bf00      	nop
 8006c42:	3710      	adds	r7, #16
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c52:	2300      	movs	r3, #0
 8006c54:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	885b      	ldrh	r3, [r3, #2]
 8006c5a:	b2da      	uxtb	r2, r3
 8006c5c:	4b4b      	ldr	r3, [pc, #300]	; (8006d8c <USBD_SetConfig+0x144>)
 8006c5e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006c60:	4b4a      	ldr	r3, [pc, #296]	; (8006d8c <USBD_SetConfig+0x144>)
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d905      	bls.n	8006c74 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006c68:	6839      	ldr	r1, [r7, #0]
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 f966 	bl	8006f3c <USBD_CtlError>
    return USBD_FAIL;
 8006c70:	2303      	movs	r3, #3
 8006c72:	e087      	b.n	8006d84 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c7a:	2b02      	cmp	r3, #2
 8006c7c:	d002      	beq.n	8006c84 <USBD_SetConfig+0x3c>
 8006c7e:	2b03      	cmp	r3, #3
 8006c80:	d025      	beq.n	8006cce <USBD_SetConfig+0x86>
 8006c82:	e071      	b.n	8006d68 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8006c84:	4b41      	ldr	r3, [pc, #260]	; (8006d8c <USBD_SetConfig+0x144>)
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d01c      	beq.n	8006cc6 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8006c8c:	4b3f      	ldr	r3, [pc, #252]	; (8006d8c <USBD_SetConfig+0x144>)
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	461a      	mov	r2, r3
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006c96:	4b3d      	ldr	r3, [pc, #244]	; (8006d8c <USBD_SetConfig+0x144>)
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f7ff f9a7 	bl	8005ff0 <USBD_SetClassConfig>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8006ca6:	7bfb      	ldrb	r3, [r7, #15]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d004      	beq.n	8006cb6 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8006cac:	6839      	ldr	r1, [r7, #0]
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 f944 	bl	8006f3c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006cb4:	e065      	b.n	8006d82 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 fa0b 	bl	80070d2 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2203      	movs	r2, #3
 8006cc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006cc4:	e05d      	b.n	8006d82 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 fa03 	bl	80070d2 <USBD_CtlSendStatus>
    break;
 8006ccc:	e059      	b.n	8006d82 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8006cce:	4b2f      	ldr	r3, [pc, #188]	; (8006d8c <USBD_SetConfig+0x144>)
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d112      	bne.n	8006cfc <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2202      	movs	r2, #2
 8006cda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8006cde:	4b2b      	ldr	r3, [pc, #172]	; (8006d8c <USBD_SetConfig+0x144>)
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006ce8:	4b28      	ldr	r3, [pc, #160]	; (8006d8c <USBD_SetConfig+0x144>)
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	4619      	mov	r1, r3
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f7ff f99a 	bl	8006028 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f000 f9ec 	bl	80070d2 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006cfa:	e042      	b.n	8006d82 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8006cfc:	4b23      	ldr	r3, [pc, #140]	; (8006d8c <USBD_SetConfig+0x144>)
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	461a      	mov	r2, r3
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d02a      	beq.n	8006d60 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	4619      	mov	r1, r3
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f7ff f988 	bl	8006028 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8006d18:	4b1c      	ldr	r3, [pc, #112]	; (8006d8c <USBD_SetConfig+0x144>)
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006d22:	4b1a      	ldr	r3, [pc, #104]	; (8006d8c <USBD_SetConfig+0x144>)
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	4619      	mov	r1, r3
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f7ff f961 	bl	8005ff0 <USBD_SetClassConfig>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8006d32:	7bfb      	ldrb	r3, [r7, #15]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d00f      	beq.n	8006d58 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8006d38:	6839      	ldr	r1, [r7, #0]
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 f8fe 	bl	8006f3c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	4619      	mov	r1, r3
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f7ff f96d 	bl	8006028 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2202      	movs	r2, #2
 8006d52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006d56:	e014      	b.n	8006d82 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f000 f9ba 	bl	80070d2 <USBD_CtlSendStatus>
    break;
 8006d5e:	e010      	b.n	8006d82 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 f9b6 	bl	80070d2 <USBD_CtlSendStatus>
    break;
 8006d66:	e00c      	b.n	8006d82 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8006d68:	6839      	ldr	r1, [r7, #0]
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f000 f8e6 	bl	8006f3c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006d70:	4b06      	ldr	r3, [pc, #24]	; (8006d8c <USBD_SetConfig+0x144>)
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	4619      	mov	r1, r3
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f7ff f956 	bl	8006028 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8006d7c:	2303      	movs	r3, #3
 8006d7e:	73fb      	strb	r3, [r7, #15]
    break;
 8006d80:	bf00      	nop
  }

  return ret;
 8006d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3710      	adds	r7, #16
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}
 8006d8c:	20000204 	.word	0x20000204

08006d90 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b082      	sub	sp, #8
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	88db      	ldrh	r3, [r3, #6]
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d004      	beq.n	8006dac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006da2:	6839      	ldr	r1, [r7, #0]
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f000 f8c9 	bl	8006f3c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8006daa:	e021      	b.n	8006df0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	db17      	blt.n	8006de6 <USBD_GetConfig+0x56>
 8006db6:	2b02      	cmp	r3, #2
 8006db8:	dd02      	ble.n	8006dc0 <USBD_GetConfig+0x30>
 8006dba:	2b03      	cmp	r3, #3
 8006dbc:	d00b      	beq.n	8006dd6 <USBD_GetConfig+0x46>
 8006dbe:	e012      	b.n	8006de6 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	3308      	adds	r3, #8
 8006dca:	2201      	movs	r2, #1
 8006dcc:	4619      	mov	r1, r3
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 f925 	bl	800701e <USBD_CtlSendData>
      break;
 8006dd4:	e00c      	b.n	8006df0 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	3304      	adds	r3, #4
 8006dda:	2201      	movs	r2, #1
 8006ddc:	4619      	mov	r1, r3
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 f91d 	bl	800701e <USBD_CtlSendData>
      break;
 8006de4:	e004      	b.n	8006df0 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8006de6:	6839      	ldr	r1, [r7, #0]
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 f8a7 	bl	8006f3c <USBD_CtlError>
      break;
 8006dee:	bf00      	nop
}
 8006df0:	bf00      	nop
 8006df2:	3708      	adds	r7, #8
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b082      	sub	sp, #8
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e08:	3b01      	subs	r3, #1
 8006e0a:	2b02      	cmp	r3, #2
 8006e0c:	d81e      	bhi.n	8006e4c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	88db      	ldrh	r3, [r3, #6]
 8006e12:	2b02      	cmp	r3, #2
 8006e14:	d004      	beq.n	8006e20 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8006e16:	6839      	ldr	r1, [r7, #0]
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 f88f 	bl	8006f3c <USBD_CtlError>
      break;
 8006e1e:	e01a      	b.n	8006e56 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d005      	beq.n	8006e3c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	68db      	ldr	r3, [r3, #12]
 8006e34:	f043 0202 	orr.w	r2, r3, #2
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	330c      	adds	r3, #12
 8006e40:	2202      	movs	r2, #2
 8006e42:	4619      	mov	r1, r3
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f000 f8ea 	bl	800701e <USBD_CtlSendData>
    break;
 8006e4a:	e004      	b.n	8006e56 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8006e4c:	6839      	ldr	r1, [r7, #0]
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 f874 	bl	8006f3c <USBD_CtlError>
    break;
 8006e54:	bf00      	nop
  }
}
 8006e56:	bf00      	nop
 8006e58:	3708      	adds	r7, #8
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}

08006e5e <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e5e:	b580      	push	{r7, lr}
 8006e60:	b082      	sub	sp, #8
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
 8006e66:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	885b      	ldrh	r3, [r3, #2]
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d106      	bne.n	8006e7e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f000 f92a 	bl	80070d2 <USBD_CtlSendStatus>
  }
}
 8006e7e:	bf00      	nop
 8006e80:	3708      	adds	r7, #8
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}

08006e86 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e86:	b580      	push	{r7, lr}
 8006e88:	b082      	sub	sp, #8
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
 8006e8e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e96:	3b01      	subs	r3, #1
 8006e98:	2b02      	cmp	r3, #2
 8006e9a:	d80b      	bhi.n	8006eb4 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	885b      	ldrh	r3, [r3, #2]
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d10c      	bne.n	8006ebe <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 f910 	bl	80070d2 <USBD_CtlSendStatus>
      }
      break;
 8006eb2:	e004      	b.n	8006ebe <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006eb4:	6839      	ldr	r1, [r7, #0]
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 f840 	bl	8006f3c <USBD_CtlError>
      break;
 8006ebc:	e000      	b.n	8006ec0 <USBD_ClrFeature+0x3a>
      break;
 8006ebe:	bf00      	nop
  }
}
 8006ec0:	bf00      	nop
 8006ec2:	3708      	adds	r7, #8
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	781a      	ldrb	r2, [r3, #0]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	3301      	adds	r3, #1
 8006ee2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	781a      	ldrb	r2, [r3, #0]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	3301      	adds	r3, #1
 8006ef0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006ef2:	68f8      	ldr	r0, [r7, #12]
 8006ef4:	f7ff fad3 	bl	800649e <SWAPBYTE>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	461a      	mov	r2, r3
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	3301      	adds	r3, #1
 8006f04:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	3301      	adds	r3, #1
 8006f0a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006f0c:	68f8      	ldr	r0, [r7, #12]
 8006f0e:	f7ff fac6 	bl	800649e <SWAPBYTE>
 8006f12:	4603      	mov	r3, r0
 8006f14:	461a      	mov	r2, r3
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	3301      	adds	r3, #1
 8006f1e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	3301      	adds	r3, #1
 8006f24:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006f26:	68f8      	ldr	r0, [r7, #12]
 8006f28:	f7ff fab9 	bl	800649e <SWAPBYTE>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	461a      	mov	r2, r3
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	80da      	strh	r2, [r3, #6]
}
 8006f34:	bf00      	nop
 8006f36:	3710      	adds	r7, #16
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b082      	sub	sp, #8
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006f46:	2180      	movs	r1, #128	; 0x80
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f000 fcc1 	bl	80078d0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006f4e:	2100      	movs	r1, #0
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 fcbd 	bl	80078d0 <USBD_LL_StallEP>
}
 8006f56:	bf00      	nop
 8006f58:	3708      	adds	r7, #8
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}

08006f5e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006f5e:	b580      	push	{r7, lr}
 8006f60:	b086      	sub	sp, #24
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	60f8      	str	r0, [r7, #12]
 8006f66:	60b9      	str	r1, [r7, #8]
 8006f68:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d036      	beq.n	8006fe2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006f78:	6938      	ldr	r0, [r7, #16]
 8006f7a:	f000 f836 	bl	8006fea <USBD_GetLen>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	3301      	adds	r3, #1
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	005b      	lsls	r3, r3, #1
 8006f86:	b29a      	uxth	r2, r3
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006f8c:	7dfb      	ldrb	r3, [r7, #23]
 8006f8e:	68ba      	ldr	r2, [r7, #8]
 8006f90:	4413      	add	r3, r2
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	7812      	ldrb	r2, [r2, #0]
 8006f96:	701a      	strb	r2, [r3, #0]
  idx++;
 8006f98:	7dfb      	ldrb	r3, [r7, #23]
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006f9e:	7dfb      	ldrb	r3, [r7, #23]
 8006fa0:	68ba      	ldr	r2, [r7, #8]
 8006fa2:	4413      	add	r3, r2
 8006fa4:	2203      	movs	r2, #3
 8006fa6:	701a      	strb	r2, [r3, #0]
  idx++;
 8006fa8:	7dfb      	ldrb	r3, [r7, #23]
 8006faa:	3301      	adds	r3, #1
 8006fac:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006fae:	e013      	b.n	8006fd8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006fb0:	7dfb      	ldrb	r3, [r7, #23]
 8006fb2:	68ba      	ldr	r2, [r7, #8]
 8006fb4:	4413      	add	r3, r2
 8006fb6:	693a      	ldr	r2, [r7, #16]
 8006fb8:	7812      	ldrb	r2, [r2, #0]
 8006fba:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	3301      	adds	r3, #1
 8006fc0:	613b      	str	r3, [r7, #16]
    idx++;
 8006fc2:	7dfb      	ldrb	r3, [r7, #23]
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006fc8:	7dfb      	ldrb	r3, [r7, #23]
 8006fca:	68ba      	ldr	r2, [r7, #8]
 8006fcc:	4413      	add	r3, r2
 8006fce:	2200      	movs	r2, #0
 8006fd0:	701a      	strb	r2, [r3, #0]
    idx++;
 8006fd2:	7dfb      	ldrb	r3, [r7, #23]
 8006fd4:	3301      	adds	r3, #1
 8006fd6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d1e7      	bne.n	8006fb0 <USBD_GetString+0x52>
 8006fe0:	e000      	b.n	8006fe4 <USBD_GetString+0x86>
    return;
 8006fe2:	bf00      	nop
  }
}
 8006fe4:	3718      	adds	r7, #24
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}

08006fea <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006fea:	b480      	push	{r7}
 8006fec:	b085      	sub	sp, #20
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006ffa:	e005      	b.n	8007008 <USBD_GetLen+0x1e>
  {
    len++;
 8006ffc:	7bfb      	ldrb	r3, [r7, #15]
 8006ffe:	3301      	adds	r3, #1
 8007000:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	3301      	adds	r3, #1
 8007006:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d1f5      	bne.n	8006ffc <USBD_GetLen+0x12>
  }

  return len;
 8007010:	7bfb      	ldrb	r3, [r7, #15]
}
 8007012:	4618      	mov	r0, r3
 8007014:	3714      	adds	r7, #20
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr

0800701e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800701e:	b580      	push	{r7, lr}
 8007020:	b084      	sub	sp, #16
 8007022:	af00      	add	r7, sp, #0
 8007024:	60f8      	str	r0, [r7, #12]
 8007026:	60b9      	str	r1, [r7, #8]
 8007028:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2202      	movs	r2, #2
 800702e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	68ba      	ldr	r2, [r7, #8]
 8007042:	2100      	movs	r1, #0
 8007044:	68f8      	ldr	r0, [r7, #12]
 8007046:	f000 fccc 	bl	80079e2 <USBD_LL_Transmit>

  return USBD_OK;
 800704a:	2300      	movs	r3, #0
}
 800704c:	4618      	mov	r0, r3
 800704e:	3710      	adds	r7, #16
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	60b9      	str	r1, [r7, #8]
 800705e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	68ba      	ldr	r2, [r7, #8]
 8007064:	2100      	movs	r1, #0
 8007066:	68f8      	ldr	r0, [r7, #12]
 8007068:	f000 fcbb 	bl	80079e2 <USBD_LL_Transmit>

  return USBD_OK;
 800706c:	2300      	movs	r3, #0
}
 800706e:	4618      	mov	r0, r3
 8007070:	3710      	adds	r7, #16
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}

08007076 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007076:	b580      	push	{r7, lr}
 8007078:	b084      	sub	sp, #16
 800707a:	af00      	add	r7, sp, #0
 800707c:	60f8      	str	r0, [r7, #12]
 800707e:	60b9      	str	r1, [r7, #8]
 8007080:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2203      	movs	r2, #3
 8007086:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	68ba      	ldr	r2, [r7, #8]
 800709e:	2100      	movs	r1, #0
 80070a0:	68f8      	ldr	r0, [r7, #12]
 80070a2:	f000 fcbf 	bl	8007a24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80070a6:	2300      	movs	r3, #0
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3710      	adds	r7, #16
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}

080070b0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	60f8      	str	r0, [r7, #12]
 80070b8:	60b9      	str	r1, [r7, #8]
 80070ba:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	68ba      	ldr	r2, [r7, #8]
 80070c0:	2100      	movs	r1, #0
 80070c2:	68f8      	ldr	r0, [r7, #12]
 80070c4:	f000 fcae 	bl	8007a24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80070c8:	2300      	movs	r3, #0
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3710      	adds	r7, #16
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}

080070d2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80070d2:	b580      	push	{r7, lr}
 80070d4:	b082      	sub	sp, #8
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2204      	movs	r2, #4
 80070de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80070e2:	2300      	movs	r3, #0
 80070e4:	2200      	movs	r2, #0
 80070e6:	2100      	movs	r1, #0
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 fc7a 	bl	80079e2 <USBD_LL_Transmit>

  return USBD_OK;
 80070ee:	2300      	movs	r3, #0
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3708      	adds	r7, #8
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2205      	movs	r2, #5
 8007104:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007108:	2300      	movs	r3, #0
 800710a:	2200      	movs	r2, #0
 800710c:	2100      	movs	r1, #0
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 fc88 	bl	8007a24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	3708      	adds	r7, #8
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
	...

08007120 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007124:	2200      	movs	r2, #0
 8007126:	4912      	ldr	r1, [pc, #72]	; (8007170 <MX_USB_DEVICE_Init+0x50>)
 8007128:	4812      	ldr	r0, [pc, #72]	; (8007174 <MX_USB_DEVICE_Init+0x54>)
 800712a:	f7fe fef3 	bl	8005f14 <USBD_Init>
 800712e:	4603      	mov	r3, r0
 8007130:	2b00      	cmp	r3, #0
 8007132:	d001      	beq.n	8007138 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007134:	f7fa f8b3 	bl	800129e <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007138:	490f      	ldr	r1, [pc, #60]	; (8007178 <MX_USB_DEVICE_Init+0x58>)
 800713a:	480e      	ldr	r0, [pc, #56]	; (8007174 <MX_USB_DEVICE_Init+0x54>)
 800713c:	f7fe ff20 	bl	8005f80 <USBD_RegisterClass>
 8007140:	4603      	mov	r3, r0
 8007142:	2b00      	cmp	r3, #0
 8007144:	d001      	beq.n	800714a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007146:	f7fa f8aa 	bl	800129e <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800714a:	490c      	ldr	r1, [pc, #48]	; (800717c <MX_USB_DEVICE_Init+0x5c>)
 800714c:	4809      	ldr	r0, [pc, #36]	; (8007174 <MX_USB_DEVICE_Init+0x54>)
 800714e:	f7fe fe75 	bl	8005e3c <USBD_CDC_RegisterInterface>
 8007152:	4603      	mov	r3, r0
 8007154:	2b00      	cmp	r3, #0
 8007156:	d001      	beq.n	800715c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007158:	f7fa f8a1 	bl	800129e <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800715c:	4805      	ldr	r0, [pc, #20]	; (8007174 <MX_USB_DEVICE_Init+0x54>)
 800715e:	f7fe ff30 	bl	8005fc2 <USBD_Start>
 8007162:	4603      	mov	r3, r0
 8007164:	2b00      	cmp	r3, #0
 8007166:	d001      	beq.n	800716c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007168:	f7fa f899 	bl	800129e <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800716c:	bf00      	nop
 800716e:	bd80      	pop	{r7, pc}
 8007170:	20000130 	.word	0x20000130
 8007174:	20000254 	.word	0x20000254
 8007178:	20000018 	.word	0x20000018
 800717c:	2000011c 	.word	0x2000011c

08007180 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007184:	2200      	movs	r2, #0
 8007186:	4905      	ldr	r1, [pc, #20]	; (800719c <CDC_Init_FS+0x1c>)
 8007188:	4805      	ldr	r0, [pc, #20]	; (80071a0 <CDC_Init_FS+0x20>)
 800718a:	f7fe fe6c 	bl	8005e66 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800718e:	4905      	ldr	r1, [pc, #20]	; (80071a4 <CDC_Init_FS+0x24>)
 8007190:	4803      	ldr	r0, [pc, #12]	; (80071a0 <CDC_Init_FS+0x20>)
 8007192:	f7fe fe81 	bl	8005e98 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007196:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007198:	4618      	mov	r0, r3
 800719a:	bd80      	pop	{r7, pc}
 800719c:	20000d24 	.word	0x20000d24
 80071a0:	20000254 	.word	0x20000254
 80071a4:	20000524 	.word	0x20000524

080071a8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80071a8:	b480      	push	{r7}
 80071aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80071ac:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr

080071b8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b083      	sub	sp, #12
 80071bc:	af00      	add	r7, sp, #0
 80071be:	4603      	mov	r3, r0
 80071c0:	6039      	str	r1, [r7, #0]
 80071c2:	71fb      	strb	r3, [r7, #7]
 80071c4:	4613      	mov	r3, r2
 80071c6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80071c8:	79fb      	ldrb	r3, [r7, #7]
 80071ca:	2b23      	cmp	r3, #35	; 0x23
 80071cc:	d84a      	bhi.n	8007264 <CDC_Control_FS+0xac>
 80071ce:	a201      	add	r2, pc, #4	; (adr r2, 80071d4 <CDC_Control_FS+0x1c>)
 80071d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d4:	08007265 	.word	0x08007265
 80071d8:	08007265 	.word	0x08007265
 80071dc:	08007265 	.word	0x08007265
 80071e0:	08007265 	.word	0x08007265
 80071e4:	08007265 	.word	0x08007265
 80071e8:	08007265 	.word	0x08007265
 80071ec:	08007265 	.word	0x08007265
 80071f0:	08007265 	.word	0x08007265
 80071f4:	08007265 	.word	0x08007265
 80071f8:	08007265 	.word	0x08007265
 80071fc:	08007265 	.word	0x08007265
 8007200:	08007265 	.word	0x08007265
 8007204:	08007265 	.word	0x08007265
 8007208:	08007265 	.word	0x08007265
 800720c:	08007265 	.word	0x08007265
 8007210:	08007265 	.word	0x08007265
 8007214:	08007265 	.word	0x08007265
 8007218:	08007265 	.word	0x08007265
 800721c:	08007265 	.word	0x08007265
 8007220:	08007265 	.word	0x08007265
 8007224:	08007265 	.word	0x08007265
 8007228:	08007265 	.word	0x08007265
 800722c:	08007265 	.word	0x08007265
 8007230:	08007265 	.word	0x08007265
 8007234:	08007265 	.word	0x08007265
 8007238:	08007265 	.word	0x08007265
 800723c:	08007265 	.word	0x08007265
 8007240:	08007265 	.word	0x08007265
 8007244:	08007265 	.word	0x08007265
 8007248:	08007265 	.word	0x08007265
 800724c:	08007265 	.word	0x08007265
 8007250:	08007265 	.word	0x08007265
 8007254:	08007265 	.word	0x08007265
 8007258:	08007265 	.word	0x08007265
 800725c:	08007265 	.word	0x08007265
 8007260:	08007265 	.word	0x08007265
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007264:	bf00      	nop
  }

  return (USBD_OK);
 8007266:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007268:	4618      	mov	r0, r3
 800726a:	370c      	adds	r7, #12
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr

08007274 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b082      	sub	sp, #8
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800727e:	6879      	ldr	r1, [r7, #4]
 8007280:	4808      	ldr	r0, [pc, #32]	; (80072a4 <CDC_Receive_FS+0x30>)
 8007282:	f7fe fe09 	bl	8005e98 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007286:	4807      	ldr	r0, [pc, #28]	; (80072a4 <CDC_Receive_FS+0x30>)
 8007288:	f7fe fe1a 	bl	8005ec0 <USBD_CDC_ReceivePacket>
  CDC_ReceiveCallBack(Buf,Len[0]);
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4619      	mov	r1, r3
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f7f9 ffd6 	bl	8001244 <CDC_ReceiveCallBack>
  return (USBD_OK);
 8007298:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800729a:	4618      	mov	r0, r3
 800729c:	3708      	adds	r7, #8
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}
 80072a2:	bf00      	nop
 80072a4:	20000254 	.word	0x20000254

080072a8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b087      	sub	sp, #28
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	60b9      	str	r1, [r7, #8]
 80072b2:	4613      	mov	r3, r2
 80072b4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80072b6:	2300      	movs	r3, #0
 80072b8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80072ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80072be:	4618      	mov	r0, r3
 80072c0:	371c      	adds	r7, #28
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr
	...

080072cc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b083      	sub	sp, #12
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	4603      	mov	r3, r0
 80072d4:	6039      	str	r1, [r7, #0]
 80072d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	2212      	movs	r2, #18
 80072dc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80072de:	4b03      	ldr	r3, [pc, #12]	; (80072ec <USBD_FS_DeviceDescriptor+0x20>)
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	370c      	adds	r7, #12
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr
 80072ec:	2000014c 	.word	0x2000014c

080072f0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	4603      	mov	r3, r0
 80072f8:	6039      	str	r1, [r7, #0]
 80072fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	2204      	movs	r2, #4
 8007300:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007302:	4b03      	ldr	r3, [pc, #12]	; (8007310 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007304:	4618      	mov	r0, r3
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr
 8007310:	20000160 	.word	0x20000160

08007314 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b082      	sub	sp, #8
 8007318:	af00      	add	r7, sp, #0
 800731a:	4603      	mov	r3, r0
 800731c:	6039      	str	r1, [r7, #0]
 800731e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007320:	79fb      	ldrb	r3, [r7, #7]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d105      	bne.n	8007332 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007326:	683a      	ldr	r2, [r7, #0]
 8007328:	4907      	ldr	r1, [pc, #28]	; (8007348 <USBD_FS_ProductStrDescriptor+0x34>)
 800732a:	4808      	ldr	r0, [pc, #32]	; (800734c <USBD_FS_ProductStrDescriptor+0x38>)
 800732c:	f7ff fe17 	bl	8006f5e <USBD_GetString>
 8007330:	e004      	b.n	800733c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007332:	683a      	ldr	r2, [r7, #0]
 8007334:	4904      	ldr	r1, [pc, #16]	; (8007348 <USBD_FS_ProductStrDescriptor+0x34>)
 8007336:	4805      	ldr	r0, [pc, #20]	; (800734c <USBD_FS_ProductStrDescriptor+0x38>)
 8007338:	f7ff fe11 	bl	8006f5e <USBD_GetString>
  }
  return USBD_StrDesc;
 800733c:	4b02      	ldr	r3, [pc, #8]	; (8007348 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800733e:	4618      	mov	r0, r3
 8007340:	3708      	adds	r7, #8
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
 8007346:	bf00      	nop
 8007348:	20001524 	.word	0x20001524
 800734c:	08007d64 	.word	0x08007d64

08007350 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b082      	sub	sp, #8
 8007354:	af00      	add	r7, sp, #0
 8007356:	4603      	mov	r3, r0
 8007358:	6039      	str	r1, [r7, #0]
 800735a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800735c:	683a      	ldr	r2, [r7, #0]
 800735e:	4904      	ldr	r1, [pc, #16]	; (8007370 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007360:	4804      	ldr	r0, [pc, #16]	; (8007374 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007362:	f7ff fdfc 	bl	8006f5e <USBD_GetString>
  return USBD_StrDesc;
 8007366:	4b02      	ldr	r3, [pc, #8]	; (8007370 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007368:	4618      	mov	r0, r3
 800736a:	3708      	adds	r7, #8
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}
 8007370:	20001524 	.word	0x20001524
 8007374:	08007d7c 	.word	0x08007d7c

08007378 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b082      	sub	sp, #8
 800737c:	af00      	add	r7, sp, #0
 800737e:	4603      	mov	r3, r0
 8007380:	6039      	str	r1, [r7, #0]
 8007382:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	221a      	movs	r2, #26
 8007388:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800738a:	f000 f843 	bl	8007414 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800738e:	4b02      	ldr	r3, [pc, #8]	; (8007398 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007390:	4618      	mov	r0, r3
 8007392:	3708      	adds	r7, #8
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}
 8007398:	20000164 	.word	0x20000164

0800739c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b082      	sub	sp, #8
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	4603      	mov	r3, r0
 80073a4:	6039      	str	r1, [r7, #0]
 80073a6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80073a8:	79fb      	ldrb	r3, [r7, #7]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d105      	bne.n	80073ba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80073ae:	683a      	ldr	r2, [r7, #0]
 80073b0:	4907      	ldr	r1, [pc, #28]	; (80073d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80073b2:	4808      	ldr	r0, [pc, #32]	; (80073d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80073b4:	f7ff fdd3 	bl	8006f5e <USBD_GetString>
 80073b8:	e004      	b.n	80073c4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80073ba:	683a      	ldr	r2, [r7, #0]
 80073bc:	4904      	ldr	r1, [pc, #16]	; (80073d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80073be:	4805      	ldr	r0, [pc, #20]	; (80073d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80073c0:	f7ff fdcd 	bl	8006f5e <USBD_GetString>
  }
  return USBD_StrDesc;
 80073c4:	4b02      	ldr	r3, [pc, #8]	; (80073d0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3708      	adds	r7, #8
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop
 80073d0:	20001524 	.word	0x20001524
 80073d4:	08007d90 	.word	0x08007d90

080073d8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b082      	sub	sp, #8
 80073dc:	af00      	add	r7, sp, #0
 80073de:	4603      	mov	r3, r0
 80073e0:	6039      	str	r1, [r7, #0]
 80073e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80073e4:	79fb      	ldrb	r3, [r7, #7]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d105      	bne.n	80073f6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80073ea:	683a      	ldr	r2, [r7, #0]
 80073ec:	4907      	ldr	r1, [pc, #28]	; (800740c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80073ee:	4808      	ldr	r0, [pc, #32]	; (8007410 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80073f0:	f7ff fdb5 	bl	8006f5e <USBD_GetString>
 80073f4:	e004      	b.n	8007400 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80073f6:	683a      	ldr	r2, [r7, #0]
 80073f8:	4904      	ldr	r1, [pc, #16]	; (800740c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80073fa:	4805      	ldr	r0, [pc, #20]	; (8007410 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80073fc:	f7ff fdaf 	bl	8006f5e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007400:	4b02      	ldr	r3, [pc, #8]	; (800740c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007402:	4618      	mov	r0, r3
 8007404:	3708      	adds	r7, #8
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}
 800740a:	bf00      	nop
 800740c:	20001524 	.word	0x20001524
 8007410:	08007d9c 	.word	0x08007d9c

08007414 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b084      	sub	sp, #16
 8007418:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800741a:	4b0f      	ldr	r3, [pc, #60]	; (8007458 <Get_SerialNum+0x44>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007420:	4b0e      	ldr	r3, [pc, #56]	; (800745c <Get_SerialNum+0x48>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007426:	4b0e      	ldr	r3, [pc, #56]	; (8007460 <Get_SerialNum+0x4c>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800742c:	68fa      	ldr	r2, [r7, #12]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	4413      	add	r3, r2
 8007432:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d009      	beq.n	800744e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800743a:	2208      	movs	r2, #8
 800743c:	4909      	ldr	r1, [pc, #36]	; (8007464 <Get_SerialNum+0x50>)
 800743e:	68f8      	ldr	r0, [r7, #12]
 8007440:	f000 f814 	bl	800746c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007444:	2204      	movs	r2, #4
 8007446:	4908      	ldr	r1, [pc, #32]	; (8007468 <Get_SerialNum+0x54>)
 8007448:	68b8      	ldr	r0, [r7, #8]
 800744a:	f000 f80f 	bl	800746c <IntToUnicode>
  }
}
 800744e:	bf00      	nop
 8007450:	3710      	adds	r7, #16
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop
 8007458:	1fff7a10 	.word	0x1fff7a10
 800745c:	1fff7a14 	.word	0x1fff7a14
 8007460:	1fff7a18 	.word	0x1fff7a18
 8007464:	20000166 	.word	0x20000166
 8007468:	20000176 	.word	0x20000176

0800746c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800746c:	b480      	push	{r7}
 800746e:	b087      	sub	sp, #28
 8007470:	af00      	add	r7, sp, #0
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	4613      	mov	r3, r2
 8007478:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800747a:	2300      	movs	r3, #0
 800747c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800747e:	2300      	movs	r3, #0
 8007480:	75fb      	strb	r3, [r7, #23]
 8007482:	e027      	b.n	80074d4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	0f1b      	lsrs	r3, r3, #28
 8007488:	2b09      	cmp	r3, #9
 800748a:	d80b      	bhi.n	80074a4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800748c:	7dfb      	ldrb	r3, [r7, #23]
 800748e:	005b      	lsls	r3, r3, #1
 8007490:	461a      	mov	r2, r3
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	4413      	add	r3, r2
 8007496:	68fa      	ldr	r2, [r7, #12]
 8007498:	0f12      	lsrs	r2, r2, #28
 800749a:	b2d2      	uxtb	r2, r2
 800749c:	3230      	adds	r2, #48	; 0x30
 800749e:	b2d2      	uxtb	r2, r2
 80074a0:	701a      	strb	r2, [r3, #0]
 80074a2:	e00a      	b.n	80074ba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80074a4:	7dfb      	ldrb	r3, [r7, #23]
 80074a6:	005b      	lsls	r3, r3, #1
 80074a8:	461a      	mov	r2, r3
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	4413      	add	r3, r2
 80074ae:	68fa      	ldr	r2, [r7, #12]
 80074b0:	0f12      	lsrs	r2, r2, #28
 80074b2:	b2d2      	uxtb	r2, r2
 80074b4:	3237      	adds	r2, #55	; 0x37
 80074b6:	b2d2      	uxtb	r2, r2
 80074b8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	011b      	lsls	r3, r3, #4
 80074be:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80074c0:	7dfb      	ldrb	r3, [r7, #23]
 80074c2:	005b      	lsls	r3, r3, #1
 80074c4:	3301      	adds	r3, #1
 80074c6:	68ba      	ldr	r2, [r7, #8]
 80074c8:	4413      	add	r3, r2
 80074ca:	2200      	movs	r2, #0
 80074cc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80074ce:	7dfb      	ldrb	r3, [r7, #23]
 80074d0:	3301      	adds	r3, #1
 80074d2:	75fb      	strb	r3, [r7, #23]
 80074d4:	7dfa      	ldrb	r2, [r7, #23]
 80074d6:	79fb      	ldrb	r3, [r7, #7]
 80074d8:	429a      	cmp	r2, r3
 80074da:	d3d3      	bcc.n	8007484 <IntToUnicode+0x18>
  }
}
 80074dc:	bf00      	nop
 80074de:	371c      	adds	r7, #28
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b08a      	sub	sp, #40	; 0x28
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074f0:	f107 0314 	add.w	r3, r7, #20
 80074f4:	2200      	movs	r2, #0
 80074f6:	601a      	str	r2, [r3, #0]
 80074f8:	605a      	str	r2, [r3, #4]
 80074fa:	609a      	str	r2, [r3, #8]
 80074fc:	60da      	str	r2, [r3, #12]
 80074fe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007508:	d13a      	bne.n	8007580 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800750a:	2300      	movs	r3, #0
 800750c:	613b      	str	r3, [r7, #16]
 800750e:	4a1e      	ldr	r2, [pc, #120]	; (8007588 <HAL_PCD_MspInit+0xa0>)
 8007510:	4b1d      	ldr	r3, [pc, #116]	; (8007588 <HAL_PCD_MspInit+0xa0>)
 8007512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007514:	f043 0301 	orr.w	r3, r3, #1
 8007518:	6313      	str	r3, [r2, #48]	; 0x30
 800751a:	4b1b      	ldr	r3, [pc, #108]	; (8007588 <HAL_PCD_MspInit+0xa0>)
 800751c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800751e:	f003 0301 	and.w	r3, r3, #1
 8007522:	613b      	str	r3, [r7, #16]
 8007524:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007526:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800752a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800752c:	2302      	movs	r3, #2
 800752e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007530:	2300      	movs	r3, #0
 8007532:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007534:	2303      	movs	r3, #3
 8007536:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007538:	230a      	movs	r3, #10
 800753a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800753c:	f107 0314 	add.w	r3, r7, #20
 8007540:	4619      	mov	r1, r3
 8007542:	4812      	ldr	r0, [pc, #72]	; (800758c <HAL_PCD_MspInit+0xa4>)
 8007544:	f7fa f954 	bl	80017f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007548:	4a0f      	ldr	r2, [pc, #60]	; (8007588 <HAL_PCD_MspInit+0xa0>)
 800754a:	4b0f      	ldr	r3, [pc, #60]	; (8007588 <HAL_PCD_MspInit+0xa0>)
 800754c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800754e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007552:	6353      	str	r3, [r2, #52]	; 0x34
 8007554:	2300      	movs	r3, #0
 8007556:	60fb      	str	r3, [r7, #12]
 8007558:	4a0b      	ldr	r2, [pc, #44]	; (8007588 <HAL_PCD_MspInit+0xa0>)
 800755a:	4b0b      	ldr	r3, [pc, #44]	; (8007588 <HAL_PCD_MspInit+0xa0>)
 800755c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800755e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007562:	6453      	str	r3, [r2, #68]	; 0x44
 8007564:	4b08      	ldr	r3, [pc, #32]	; (8007588 <HAL_PCD_MspInit+0xa0>)
 8007566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007568:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800756c:	60fb      	str	r3, [r7, #12]
 800756e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007570:	2200      	movs	r2, #0
 8007572:	2100      	movs	r1, #0
 8007574:	2043      	movs	r0, #67	; 0x43
 8007576:	f7fa f904 	bl	8001782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800757a:	2043      	movs	r0, #67	; 0x43
 800757c:	f7fa f91d 	bl	80017ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007580:	bf00      	nop
 8007582:	3728      	adds	r7, #40	; 0x28
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}
 8007588:	40023800 	.word	0x40023800
 800758c:	40020000 	.word	0x40020000

08007590 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b082      	sub	sp, #8
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80075a4:	4619      	mov	r1, r3
 80075a6:	4610      	mov	r0, r2
 80075a8:	f7fe fd56 	bl	8006058 <USBD_LL_SetupStage>
}
 80075ac:	bf00      	nop
 80075ae:	3708      	adds	r7, #8
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b082      	sub	sp, #8
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	460b      	mov	r3, r1
 80075be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80075c6:	78fa      	ldrb	r2, [r7, #3]
 80075c8:	6879      	ldr	r1, [r7, #4]
 80075ca:	4613      	mov	r3, r2
 80075cc:	00db      	lsls	r3, r3, #3
 80075ce:	1a9b      	subs	r3, r3, r2
 80075d0:	009b      	lsls	r3, r3, #2
 80075d2:	440b      	add	r3, r1
 80075d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80075d8:	681a      	ldr	r2, [r3, #0]
 80075da:	78fb      	ldrb	r3, [r7, #3]
 80075dc:	4619      	mov	r1, r3
 80075de:	f7fe fd8e 	bl	80060fe <USBD_LL_DataOutStage>
}
 80075e2:	bf00      	nop
 80075e4:	3708      	adds	r7, #8
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}

080075ea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075ea:	b580      	push	{r7, lr}
 80075ec:	b082      	sub	sp, #8
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
 80075f2:	460b      	mov	r3, r1
 80075f4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80075fc:	78fa      	ldrb	r2, [r7, #3]
 80075fe:	6879      	ldr	r1, [r7, #4]
 8007600:	4613      	mov	r3, r2
 8007602:	00db      	lsls	r3, r3, #3
 8007604:	1a9b      	subs	r3, r3, r2
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	440b      	add	r3, r1
 800760a:	3348      	adds	r3, #72	; 0x48
 800760c:	681a      	ldr	r2, [r3, #0]
 800760e:	78fb      	ldrb	r3, [r7, #3]
 8007610:	4619      	mov	r1, r3
 8007612:	f7fe fdd7 	bl	80061c4 <USBD_LL_DataInStage>
}
 8007616:	bf00      	nop
 8007618:	3708      	adds	r7, #8
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}

0800761e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800761e:	b580      	push	{r7, lr}
 8007620:	b082      	sub	sp, #8
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800762c:	4618      	mov	r0, r3
 800762e:	f7fe fedb 	bl	80063e8 <USBD_LL_SOF>
}
 8007632:	bf00      	nop
 8007634:	3708      	adds	r7, #8
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}

0800763a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800763a:	b580      	push	{r7, lr}
 800763c:	b084      	sub	sp, #16
 800763e:	af00      	add	r7, sp, #0
 8007640:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007642:	2301      	movs	r3, #1
 8007644:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	68db      	ldr	r3, [r3, #12]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d102      	bne.n	8007654 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800764e:	2300      	movs	r3, #0
 8007650:	73fb      	strb	r3, [r7, #15]
 8007652:	e008      	b.n	8007666 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	68db      	ldr	r3, [r3, #12]
 8007658:	2b02      	cmp	r3, #2
 800765a:	d102      	bne.n	8007662 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800765c:	2301      	movs	r3, #1
 800765e:	73fb      	strb	r3, [r7, #15]
 8007660:	e001      	b.n	8007666 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007662:	f7f9 fe1c 	bl	800129e <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800766c:	7bfa      	ldrb	r2, [r7, #15]
 800766e:	4611      	mov	r1, r2
 8007670:	4618      	mov	r0, r3
 8007672:	f7fe fe7e 	bl	8006372 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800767c:	4618      	mov	r0, r3
 800767e:	f7fe fe37 	bl	80062f0 <USBD_LL_Reset>
}
 8007682:	bf00      	nop
 8007684:	3710      	adds	r7, #16
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
	...

0800768c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b082      	sub	sp, #8
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800769a:	4618      	mov	r0, r3
 800769c:	f7fe fe79 	bl	8006392 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80076a8:	461a      	mov	r2, r3
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f043 0301 	orr.w	r3, r3, #1
 80076b8:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6a1b      	ldr	r3, [r3, #32]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d005      	beq.n	80076ce <HAL_PCD_SuspendCallback+0x42>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80076c2:	4a05      	ldr	r2, [pc, #20]	; (80076d8 <HAL_PCD_SuspendCallback+0x4c>)
 80076c4:	4b04      	ldr	r3, [pc, #16]	; (80076d8 <HAL_PCD_SuspendCallback+0x4c>)
 80076c6:	691b      	ldr	r3, [r3, #16]
 80076c8:	f043 0306 	orr.w	r3, r3, #6
 80076cc:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80076ce:	bf00      	nop
 80076d0:	3708      	adds	r7, #8
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
 80076d6:	bf00      	nop
 80076d8:	e000ed00 	.word	0xe000ed00

080076dc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b082      	sub	sp, #8
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80076ea:	4618      	mov	r0, r3
 80076ec:	f7fe fe66 	bl	80063bc <USBD_LL_Resume>
}
 80076f0:	bf00      	nop
 80076f2:	3708      	adds	r7, #8
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b082      	sub	sp, #8
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	460b      	mov	r3, r1
 8007702:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800770a:	78fa      	ldrb	r2, [r7, #3]
 800770c:	4611      	mov	r1, r2
 800770e:	4618      	mov	r0, r3
 8007710:	f7fe fe91 	bl	8006436 <USBD_LL_IsoOUTIncomplete>
}
 8007714:	bf00      	nop
 8007716:	3708      	adds	r7, #8
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b082      	sub	sp, #8
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	460b      	mov	r3, r1
 8007726:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800772e:	78fa      	ldrb	r2, [r7, #3]
 8007730:	4611      	mov	r1, r2
 8007732:	4618      	mov	r0, r3
 8007734:	f7fe fe72 	bl	800641c <USBD_LL_IsoINIncomplete>
}
 8007738:	bf00      	nop
 800773a:	3708      	adds	r7, #8
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}

08007740 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b082      	sub	sp, #8
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800774e:	4618      	mov	r0, r3
 8007750:	f7fe fe7e 	bl	8006450 <USBD_LL_DevConnected>
}
 8007754:	bf00      	nop
 8007756:	3708      	adds	r7, #8
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}

0800775c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b082      	sub	sp, #8
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800776a:	4618      	mov	r0, r3
 800776c:	f7fe fe7b 	bl	8006466 <USBD_LL_DevDisconnected>
}
 8007770:	bf00      	nop
 8007772:	3708      	adds	r7, #8
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b082      	sub	sp, #8
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d13c      	bne.n	8007802 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007788:	4a20      	ldr	r2, [pc, #128]	; (800780c <USBD_LL_Init+0x94>)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	4a1e      	ldr	r2, [pc, #120]	; (800780c <USBD_LL_Init+0x94>)
 8007794:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007798:	4b1c      	ldr	r3, [pc, #112]	; (800780c <USBD_LL_Init+0x94>)
 800779a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800779e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80077a0:	4b1a      	ldr	r3, [pc, #104]	; (800780c <USBD_LL_Init+0x94>)
 80077a2:	2204      	movs	r2, #4
 80077a4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80077a6:	4b19      	ldr	r3, [pc, #100]	; (800780c <USBD_LL_Init+0x94>)
 80077a8:	2202      	movs	r2, #2
 80077aa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80077ac:	4b17      	ldr	r3, [pc, #92]	; (800780c <USBD_LL_Init+0x94>)
 80077ae:	2200      	movs	r2, #0
 80077b0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80077b2:	4b16      	ldr	r3, [pc, #88]	; (800780c <USBD_LL_Init+0x94>)
 80077b4:	2202      	movs	r2, #2
 80077b6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80077b8:	4b14      	ldr	r3, [pc, #80]	; (800780c <USBD_LL_Init+0x94>)
 80077ba:	2200      	movs	r2, #0
 80077bc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80077be:	4b13      	ldr	r3, [pc, #76]	; (800780c <USBD_LL_Init+0x94>)
 80077c0:	2200      	movs	r2, #0
 80077c2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80077c4:	4b11      	ldr	r3, [pc, #68]	; (800780c <USBD_LL_Init+0x94>)
 80077c6:	2200      	movs	r2, #0
 80077c8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80077ca:	4b10      	ldr	r3, [pc, #64]	; (800780c <USBD_LL_Init+0x94>)
 80077cc:	2200      	movs	r2, #0
 80077ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80077d0:	4b0e      	ldr	r3, [pc, #56]	; (800780c <USBD_LL_Init+0x94>)
 80077d2:	2200      	movs	r2, #0
 80077d4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80077d6:	480d      	ldr	r0, [pc, #52]	; (800780c <USBD_LL_Init+0x94>)
 80077d8:	f7fa f9a4 	bl	8001b24 <HAL_PCD_Init>
 80077dc:	4603      	mov	r3, r0
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d001      	beq.n	80077e6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80077e2:	f7f9 fd5c 	bl	800129e <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80077e6:	2180      	movs	r1, #128	; 0x80
 80077e8:	4808      	ldr	r0, [pc, #32]	; (800780c <USBD_LL_Init+0x94>)
 80077ea:	f7fb fb10 	bl	8002e0e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80077ee:	2240      	movs	r2, #64	; 0x40
 80077f0:	2100      	movs	r1, #0
 80077f2:	4806      	ldr	r0, [pc, #24]	; (800780c <USBD_LL_Init+0x94>)
 80077f4:	f7fb fac4 	bl	8002d80 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80077f8:	2280      	movs	r2, #128	; 0x80
 80077fa:	2101      	movs	r1, #1
 80077fc:	4803      	ldr	r0, [pc, #12]	; (800780c <USBD_LL_Init+0x94>)
 80077fe:	f7fb fabf 	bl	8002d80 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007802:	2300      	movs	r3, #0
}
 8007804:	4618      	mov	r0, r3
 8007806:	3708      	adds	r7, #8
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}
 800780c:	20001724 	.word	0x20001724

08007810 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b084      	sub	sp, #16
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007818:	2300      	movs	r3, #0
 800781a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800781c:	2300      	movs	r3, #0
 800781e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007826:	4618      	mov	r0, r3
 8007828:	f7fa fa99 	bl	8001d5e <HAL_PCD_Start>
 800782c:	4603      	mov	r3, r0
 800782e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007830:	7bfb      	ldrb	r3, [r7, #15]
 8007832:	4618      	mov	r0, r3
 8007834:	f000 f92a 	bl	8007a8c <USBD_Get_USB_Status>
 8007838:	4603      	mov	r3, r0
 800783a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800783c:	7bbb      	ldrb	r3, [r7, #14]
}
 800783e:	4618      	mov	r0, r3
 8007840:	3710      	adds	r7, #16
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}

08007846 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007846:	b580      	push	{r7, lr}
 8007848:	b084      	sub	sp, #16
 800784a:	af00      	add	r7, sp, #0
 800784c:	6078      	str	r0, [r7, #4]
 800784e:	4608      	mov	r0, r1
 8007850:	4611      	mov	r1, r2
 8007852:	461a      	mov	r2, r3
 8007854:	4603      	mov	r3, r0
 8007856:	70fb      	strb	r3, [r7, #3]
 8007858:	460b      	mov	r3, r1
 800785a:	70bb      	strb	r3, [r7, #2]
 800785c:	4613      	mov	r3, r2
 800785e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007860:	2300      	movs	r3, #0
 8007862:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007864:	2300      	movs	r3, #0
 8007866:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800786e:	78bb      	ldrb	r3, [r7, #2]
 8007870:	883a      	ldrh	r2, [r7, #0]
 8007872:	78f9      	ldrb	r1, [r7, #3]
 8007874:	f7fa fe8a 	bl	800258c <HAL_PCD_EP_Open>
 8007878:	4603      	mov	r3, r0
 800787a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800787c:	7bfb      	ldrb	r3, [r7, #15]
 800787e:	4618      	mov	r0, r3
 8007880:	f000 f904 	bl	8007a8c <USBD_Get_USB_Status>
 8007884:	4603      	mov	r3, r0
 8007886:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007888:	7bbb      	ldrb	r3, [r7, #14]
}
 800788a:	4618      	mov	r0, r3
 800788c:	3710      	adds	r7, #16
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}

08007892 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007892:	b580      	push	{r7, lr}
 8007894:	b084      	sub	sp, #16
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
 800789a:	460b      	mov	r3, r1
 800789c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800789e:	2300      	movs	r3, #0
 80078a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078a2:	2300      	movs	r3, #0
 80078a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80078ac:	78fa      	ldrb	r2, [r7, #3]
 80078ae:	4611      	mov	r1, r2
 80078b0:	4618      	mov	r0, r3
 80078b2:	f7fa fed3 	bl	800265c <HAL_PCD_EP_Close>
 80078b6:	4603      	mov	r3, r0
 80078b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078ba:	7bfb      	ldrb	r3, [r7, #15]
 80078bc:	4618      	mov	r0, r3
 80078be:	f000 f8e5 	bl	8007a8c <USBD_Get_USB_Status>
 80078c2:	4603      	mov	r3, r0
 80078c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3710      	adds	r7, #16
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b084      	sub	sp, #16
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	460b      	mov	r3, r1
 80078da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078dc:	2300      	movs	r3, #0
 80078de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078e0:	2300      	movs	r3, #0
 80078e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80078ea:	78fa      	ldrb	r2, [r7, #3]
 80078ec:	4611      	mov	r1, r2
 80078ee:	4618      	mov	r0, r3
 80078f0:	f7fa ffab 	bl	800284a <HAL_PCD_EP_SetStall>
 80078f4:	4603      	mov	r3, r0
 80078f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078f8:	7bfb      	ldrb	r3, [r7, #15]
 80078fa:	4618      	mov	r0, r3
 80078fc:	f000 f8c6 	bl	8007a8c <USBD_Get_USB_Status>
 8007900:	4603      	mov	r3, r0
 8007902:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007904:	7bbb      	ldrb	r3, [r7, #14]
}
 8007906:	4618      	mov	r0, r3
 8007908:	3710      	adds	r7, #16
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}

0800790e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800790e:	b580      	push	{r7, lr}
 8007910:	b084      	sub	sp, #16
 8007912:	af00      	add	r7, sp, #0
 8007914:	6078      	str	r0, [r7, #4]
 8007916:	460b      	mov	r3, r1
 8007918:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800791a:	2300      	movs	r3, #0
 800791c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800791e:	2300      	movs	r3, #0
 8007920:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007928:	78fa      	ldrb	r2, [r7, #3]
 800792a:	4611      	mov	r1, r2
 800792c:	4618      	mov	r0, r3
 800792e:	f7fa fff0 	bl	8002912 <HAL_PCD_EP_ClrStall>
 8007932:	4603      	mov	r3, r0
 8007934:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007936:	7bfb      	ldrb	r3, [r7, #15]
 8007938:	4618      	mov	r0, r3
 800793a:	f000 f8a7 	bl	8007a8c <USBD_Get_USB_Status>
 800793e:	4603      	mov	r3, r0
 8007940:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007942:	7bbb      	ldrb	r3, [r7, #14]
}
 8007944:	4618      	mov	r0, r3
 8007946:	3710      	adds	r7, #16
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800794c:	b480      	push	{r7}
 800794e:	b085      	sub	sp, #20
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	460b      	mov	r3, r1
 8007956:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800795e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007960:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007964:	2b00      	cmp	r3, #0
 8007966:	da0b      	bge.n	8007980 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007968:	78fb      	ldrb	r3, [r7, #3]
 800796a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800796e:	68f9      	ldr	r1, [r7, #12]
 8007970:	4613      	mov	r3, r2
 8007972:	00db      	lsls	r3, r3, #3
 8007974:	1a9b      	subs	r3, r3, r2
 8007976:	009b      	lsls	r3, r3, #2
 8007978:	440b      	add	r3, r1
 800797a:	333e      	adds	r3, #62	; 0x3e
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	e00b      	b.n	8007998 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007980:	78fb      	ldrb	r3, [r7, #3]
 8007982:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007986:	68f9      	ldr	r1, [r7, #12]
 8007988:	4613      	mov	r3, r2
 800798a:	00db      	lsls	r3, r3, #3
 800798c:	1a9b      	subs	r3, r3, r2
 800798e:	009b      	lsls	r3, r3, #2
 8007990:	440b      	add	r3, r1
 8007992:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007996:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007998:	4618      	mov	r0, r3
 800799a:	3714      	adds	r7, #20
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr

080079a4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	460b      	mov	r3, r1
 80079ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079b0:	2300      	movs	r3, #0
 80079b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079b4:	2300      	movs	r3, #0
 80079b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80079be:	78fa      	ldrb	r2, [r7, #3]
 80079c0:	4611      	mov	r1, r2
 80079c2:	4618      	mov	r0, r3
 80079c4:	f7fa fdbd 	bl	8002542 <HAL_PCD_SetAddress>
 80079c8:	4603      	mov	r3, r0
 80079ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079cc:	7bfb      	ldrb	r3, [r7, #15]
 80079ce:	4618      	mov	r0, r3
 80079d0:	f000 f85c 	bl	8007a8c <USBD_Get_USB_Status>
 80079d4:	4603      	mov	r3, r0
 80079d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3710      	adds	r7, #16
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}

080079e2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80079e2:	b580      	push	{r7, lr}
 80079e4:	b086      	sub	sp, #24
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	60f8      	str	r0, [r7, #12]
 80079ea:	607a      	str	r2, [r7, #4]
 80079ec:	603b      	str	r3, [r7, #0]
 80079ee:	460b      	mov	r3, r1
 80079f0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079f2:	2300      	movs	r3, #0
 80079f4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079f6:	2300      	movs	r3, #0
 80079f8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007a00:	7af9      	ldrb	r1, [r7, #11]
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	f7fa fed6 	bl	80027b6 <HAL_PCD_EP_Transmit>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a0e:	7dfb      	ldrb	r3, [r7, #23]
 8007a10:	4618      	mov	r0, r3
 8007a12:	f000 f83b 	bl	8007a8c <USBD_Get_USB_Status>
 8007a16:	4603      	mov	r3, r0
 8007a18:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007a1a:	7dbb      	ldrb	r3, [r7, #22]
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3718      	adds	r7, #24
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b086      	sub	sp, #24
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	60f8      	str	r0, [r7, #12]
 8007a2c:	607a      	str	r2, [r7, #4]
 8007a2e:	603b      	str	r3, [r7, #0]
 8007a30:	460b      	mov	r3, r1
 8007a32:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a34:	2300      	movs	r3, #0
 8007a36:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007a42:	7af9      	ldrb	r1, [r7, #11]
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	687a      	ldr	r2, [r7, #4]
 8007a48:	f7fa fe52 	bl	80026f0 <HAL_PCD_EP_Receive>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a50:	7dfb      	ldrb	r3, [r7, #23]
 8007a52:	4618      	mov	r0, r3
 8007a54:	f000 f81a 	bl	8007a8c <USBD_Get_USB_Status>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007a5c:	7dbb      	ldrb	r3, [r7, #22]
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3718      	adds	r7, #24
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}

08007a66 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a66:	b580      	push	{r7, lr}
 8007a68:	b082      	sub	sp, #8
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	6078      	str	r0, [r7, #4]
 8007a6e:	460b      	mov	r3, r1
 8007a70:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007a78:	78fa      	ldrb	r2, [r7, #3]
 8007a7a:	4611      	mov	r1, r2
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f7fa fe82 	bl	8002786 <HAL_PCD_EP_GetRxCount>
 8007a82:	4603      	mov	r3, r0
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3708      	adds	r7, #8
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b085      	sub	sp, #20
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	4603      	mov	r3, r0
 8007a94:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a96:	2300      	movs	r3, #0
 8007a98:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007a9a:	79fb      	ldrb	r3, [r7, #7]
 8007a9c:	2b03      	cmp	r3, #3
 8007a9e:	d817      	bhi.n	8007ad0 <USBD_Get_USB_Status+0x44>
 8007aa0:	a201      	add	r2, pc, #4	; (adr r2, 8007aa8 <USBD_Get_USB_Status+0x1c>)
 8007aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa6:	bf00      	nop
 8007aa8:	08007ab9 	.word	0x08007ab9
 8007aac:	08007abf 	.word	0x08007abf
 8007ab0:	08007ac5 	.word	0x08007ac5
 8007ab4:	08007acb 	.word	0x08007acb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	73fb      	strb	r3, [r7, #15]
    break;
 8007abc:	e00b      	b.n	8007ad6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007abe:	2303      	movs	r3, #3
 8007ac0:	73fb      	strb	r3, [r7, #15]
    break;
 8007ac2:	e008      	b.n	8007ad6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	73fb      	strb	r3, [r7, #15]
    break;
 8007ac8:	e005      	b.n	8007ad6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007aca:	2303      	movs	r3, #3
 8007acc:	73fb      	strb	r3, [r7, #15]
    break;
 8007ace:	e002      	b.n	8007ad6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007ad0:	2303      	movs	r3, #3
 8007ad2:	73fb      	strb	r3, [r7, #15]
    break;
 8007ad4:	bf00      	nop
  }
  return usb_status;
 8007ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3714      	adds	r7, #20
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr

08007ae4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8007ae4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007b1c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007ae8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007aea:	e003      	b.n	8007af4 <LoopCopyDataInit>

08007aec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007aec:	4b0c      	ldr	r3, [pc, #48]	; (8007b20 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007aee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007af0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007af2:	3104      	adds	r1, #4

08007af4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007af4:	480b      	ldr	r0, [pc, #44]	; (8007b24 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007af6:	4b0c      	ldr	r3, [pc, #48]	; (8007b28 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007af8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007afa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007afc:	d3f6      	bcc.n	8007aec <CopyDataInit>
  ldr  r2, =_sbss
 8007afe:	4a0b      	ldr	r2, [pc, #44]	; (8007b2c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007b00:	e002      	b.n	8007b08 <LoopFillZerobss>

08007b02 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007b02:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007b04:	f842 3b04 	str.w	r3, [r2], #4

08007b08 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007b08:	4b09      	ldr	r3, [pc, #36]	; (8007b30 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007b0a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007b0c:	d3f9      	bcc.n	8007b02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007b0e:	f7f9 fcb5 	bl	800147c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007b12:	f000 f817 	bl	8007b44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007b16:	f7f9 f9ff 	bl	8000f18 <main>
  bx  lr    
 8007b1a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8007b1c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8007b20:	08007dcc 	.word	0x08007dcc
  ldr  r0, =_sdata
 8007b24:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007b28:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8007b2c:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8007b30:	20001b30 	.word	0x20001b30

08007b34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007b34:	e7fe      	b.n	8007b34 <ADC_IRQHandler>
	...

08007b38 <__errno>:
 8007b38:	4b01      	ldr	r3, [pc, #4]	; (8007b40 <__errno+0x8>)
 8007b3a:	6818      	ldr	r0, [r3, #0]
 8007b3c:	4770      	bx	lr
 8007b3e:	bf00      	nop
 8007b40:	20000180 	.word	0x20000180

08007b44 <__libc_init_array>:
 8007b44:	b570      	push	{r4, r5, r6, lr}
 8007b46:	4e0d      	ldr	r6, [pc, #52]	; (8007b7c <__libc_init_array+0x38>)
 8007b48:	4c0d      	ldr	r4, [pc, #52]	; (8007b80 <__libc_init_array+0x3c>)
 8007b4a:	1ba4      	subs	r4, r4, r6
 8007b4c:	10a4      	asrs	r4, r4, #2
 8007b4e:	2500      	movs	r5, #0
 8007b50:	42a5      	cmp	r5, r4
 8007b52:	d109      	bne.n	8007b68 <__libc_init_array+0x24>
 8007b54:	4e0b      	ldr	r6, [pc, #44]	; (8007b84 <__libc_init_array+0x40>)
 8007b56:	4c0c      	ldr	r4, [pc, #48]	; (8007b88 <__libc_init_array+0x44>)
 8007b58:	f000 f8ee 	bl	8007d38 <_init>
 8007b5c:	1ba4      	subs	r4, r4, r6
 8007b5e:	10a4      	asrs	r4, r4, #2
 8007b60:	2500      	movs	r5, #0
 8007b62:	42a5      	cmp	r5, r4
 8007b64:	d105      	bne.n	8007b72 <__libc_init_array+0x2e>
 8007b66:	bd70      	pop	{r4, r5, r6, pc}
 8007b68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007b6c:	4798      	blx	r3
 8007b6e:	3501      	adds	r5, #1
 8007b70:	e7ee      	b.n	8007b50 <__libc_init_array+0xc>
 8007b72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007b76:	4798      	blx	r3
 8007b78:	3501      	adds	r5, #1
 8007b7a:	e7f2      	b.n	8007b62 <__libc_init_array+0x1e>
 8007b7c:	08007dc4 	.word	0x08007dc4
 8007b80:	08007dc4 	.word	0x08007dc4
 8007b84:	08007dc4 	.word	0x08007dc4
 8007b88:	08007dc8 	.word	0x08007dc8

08007b8c <malloc>:
 8007b8c:	4b02      	ldr	r3, [pc, #8]	; (8007b98 <malloc+0xc>)
 8007b8e:	4601      	mov	r1, r0
 8007b90:	6818      	ldr	r0, [r3, #0]
 8007b92:	f000 b861 	b.w	8007c58 <_malloc_r>
 8007b96:	bf00      	nop
 8007b98:	20000180 	.word	0x20000180

08007b9c <free>:
 8007b9c:	4b02      	ldr	r3, [pc, #8]	; (8007ba8 <free+0xc>)
 8007b9e:	4601      	mov	r1, r0
 8007ba0:	6818      	ldr	r0, [r3, #0]
 8007ba2:	f000 b80b 	b.w	8007bbc <_free_r>
 8007ba6:	bf00      	nop
 8007ba8:	20000180 	.word	0x20000180

08007bac <memset>:
 8007bac:	4402      	add	r2, r0
 8007bae:	4603      	mov	r3, r0
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d100      	bne.n	8007bb6 <memset+0xa>
 8007bb4:	4770      	bx	lr
 8007bb6:	f803 1b01 	strb.w	r1, [r3], #1
 8007bba:	e7f9      	b.n	8007bb0 <memset+0x4>

08007bbc <_free_r>:
 8007bbc:	b538      	push	{r3, r4, r5, lr}
 8007bbe:	4605      	mov	r5, r0
 8007bc0:	2900      	cmp	r1, #0
 8007bc2:	d045      	beq.n	8007c50 <_free_r+0x94>
 8007bc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bc8:	1f0c      	subs	r4, r1, #4
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	bfb8      	it	lt
 8007bce:	18e4      	addlt	r4, r4, r3
 8007bd0:	f000 f8b0 	bl	8007d34 <__malloc_lock>
 8007bd4:	4a1f      	ldr	r2, [pc, #124]	; (8007c54 <_free_r+0x98>)
 8007bd6:	6813      	ldr	r3, [r2, #0]
 8007bd8:	4610      	mov	r0, r2
 8007bda:	b933      	cbnz	r3, 8007bea <_free_r+0x2e>
 8007bdc:	6063      	str	r3, [r4, #4]
 8007bde:	6014      	str	r4, [r2, #0]
 8007be0:	4628      	mov	r0, r5
 8007be2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007be6:	f000 b8a6 	b.w	8007d36 <__malloc_unlock>
 8007bea:	42a3      	cmp	r3, r4
 8007bec:	d90c      	bls.n	8007c08 <_free_r+0x4c>
 8007bee:	6821      	ldr	r1, [r4, #0]
 8007bf0:	1862      	adds	r2, r4, r1
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	bf04      	itt	eq
 8007bf6:	681a      	ldreq	r2, [r3, #0]
 8007bf8:	685b      	ldreq	r3, [r3, #4]
 8007bfa:	6063      	str	r3, [r4, #4]
 8007bfc:	bf04      	itt	eq
 8007bfe:	1852      	addeq	r2, r2, r1
 8007c00:	6022      	streq	r2, [r4, #0]
 8007c02:	6004      	str	r4, [r0, #0]
 8007c04:	e7ec      	b.n	8007be0 <_free_r+0x24>
 8007c06:	4613      	mov	r3, r2
 8007c08:	685a      	ldr	r2, [r3, #4]
 8007c0a:	b10a      	cbz	r2, 8007c10 <_free_r+0x54>
 8007c0c:	42a2      	cmp	r2, r4
 8007c0e:	d9fa      	bls.n	8007c06 <_free_r+0x4a>
 8007c10:	6819      	ldr	r1, [r3, #0]
 8007c12:	1858      	adds	r0, r3, r1
 8007c14:	42a0      	cmp	r0, r4
 8007c16:	d10b      	bne.n	8007c30 <_free_r+0x74>
 8007c18:	6820      	ldr	r0, [r4, #0]
 8007c1a:	4401      	add	r1, r0
 8007c1c:	1858      	adds	r0, r3, r1
 8007c1e:	4282      	cmp	r2, r0
 8007c20:	6019      	str	r1, [r3, #0]
 8007c22:	d1dd      	bne.n	8007be0 <_free_r+0x24>
 8007c24:	6810      	ldr	r0, [r2, #0]
 8007c26:	6852      	ldr	r2, [r2, #4]
 8007c28:	605a      	str	r2, [r3, #4]
 8007c2a:	4401      	add	r1, r0
 8007c2c:	6019      	str	r1, [r3, #0]
 8007c2e:	e7d7      	b.n	8007be0 <_free_r+0x24>
 8007c30:	d902      	bls.n	8007c38 <_free_r+0x7c>
 8007c32:	230c      	movs	r3, #12
 8007c34:	602b      	str	r3, [r5, #0]
 8007c36:	e7d3      	b.n	8007be0 <_free_r+0x24>
 8007c38:	6820      	ldr	r0, [r4, #0]
 8007c3a:	1821      	adds	r1, r4, r0
 8007c3c:	428a      	cmp	r2, r1
 8007c3e:	bf04      	itt	eq
 8007c40:	6811      	ldreq	r1, [r2, #0]
 8007c42:	6852      	ldreq	r2, [r2, #4]
 8007c44:	6062      	str	r2, [r4, #4]
 8007c46:	bf04      	itt	eq
 8007c48:	1809      	addeq	r1, r1, r0
 8007c4a:	6021      	streq	r1, [r4, #0]
 8007c4c:	605c      	str	r4, [r3, #4]
 8007c4e:	e7c7      	b.n	8007be0 <_free_r+0x24>
 8007c50:	bd38      	pop	{r3, r4, r5, pc}
 8007c52:	bf00      	nop
 8007c54:	20000208 	.word	0x20000208

08007c58 <_malloc_r>:
 8007c58:	b570      	push	{r4, r5, r6, lr}
 8007c5a:	1ccd      	adds	r5, r1, #3
 8007c5c:	f025 0503 	bic.w	r5, r5, #3
 8007c60:	3508      	adds	r5, #8
 8007c62:	2d0c      	cmp	r5, #12
 8007c64:	bf38      	it	cc
 8007c66:	250c      	movcc	r5, #12
 8007c68:	2d00      	cmp	r5, #0
 8007c6a:	4606      	mov	r6, r0
 8007c6c:	db01      	blt.n	8007c72 <_malloc_r+0x1a>
 8007c6e:	42a9      	cmp	r1, r5
 8007c70:	d903      	bls.n	8007c7a <_malloc_r+0x22>
 8007c72:	230c      	movs	r3, #12
 8007c74:	6033      	str	r3, [r6, #0]
 8007c76:	2000      	movs	r0, #0
 8007c78:	bd70      	pop	{r4, r5, r6, pc}
 8007c7a:	f000 f85b 	bl	8007d34 <__malloc_lock>
 8007c7e:	4a23      	ldr	r2, [pc, #140]	; (8007d0c <_malloc_r+0xb4>)
 8007c80:	6814      	ldr	r4, [r2, #0]
 8007c82:	4621      	mov	r1, r4
 8007c84:	b991      	cbnz	r1, 8007cac <_malloc_r+0x54>
 8007c86:	4c22      	ldr	r4, [pc, #136]	; (8007d10 <_malloc_r+0xb8>)
 8007c88:	6823      	ldr	r3, [r4, #0]
 8007c8a:	b91b      	cbnz	r3, 8007c94 <_malloc_r+0x3c>
 8007c8c:	4630      	mov	r0, r6
 8007c8e:	f000 f841 	bl	8007d14 <_sbrk_r>
 8007c92:	6020      	str	r0, [r4, #0]
 8007c94:	4629      	mov	r1, r5
 8007c96:	4630      	mov	r0, r6
 8007c98:	f000 f83c 	bl	8007d14 <_sbrk_r>
 8007c9c:	1c43      	adds	r3, r0, #1
 8007c9e:	d126      	bne.n	8007cee <_malloc_r+0x96>
 8007ca0:	230c      	movs	r3, #12
 8007ca2:	6033      	str	r3, [r6, #0]
 8007ca4:	4630      	mov	r0, r6
 8007ca6:	f000 f846 	bl	8007d36 <__malloc_unlock>
 8007caa:	e7e4      	b.n	8007c76 <_malloc_r+0x1e>
 8007cac:	680b      	ldr	r3, [r1, #0]
 8007cae:	1b5b      	subs	r3, r3, r5
 8007cb0:	d41a      	bmi.n	8007ce8 <_malloc_r+0x90>
 8007cb2:	2b0b      	cmp	r3, #11
 8007cb4:	d90f      	bls.n	8007cd6 <_malloc_r+0x7e>
 8007cb6:	600b      	str	r3, [r1, #0]
 8007cb8:	50cd      	str	r5, [r1, r3]
 8007cba:	18cc      	adds	r4, r1, r3
 8007cbc:	4630      	mov	r0, r6
 8007cbe:	f000 f83a 	bl	8007d36 <__malloc_unlock>
 8007cc2:	f104 000b 	add.w	r0, r4, #11
 8007cc6:	1d23      	adds	r3, r4, #4
 8007cc8:	f020 0007 	bic.w	r0, r0, #7
 8007ccc:	1ac3      	subs	r3, r0, r3
 8007cce:	d01b      	beq.n	8007d08 <_malloc_r+0xb0>
 8007cd0:	425a      	negs	r2, r3
 8007cd2:	50e2      	str	r2, [r4, r3]
 8007cd4:	bd70      	pop	{r4, r5, r6, pc}
 8007cd6:	428c      	cmp	r4, r1
 8007cd8:	bf0d      	iteet	eq
 8007cda:	6863      	ldreq	r3, [r4, #4]
 8007cdc:	684b      	ldrne	r3, [r1, #4]
 8007cde:	6063      	strne	r3, [r4, #4]
 8007ce0:	6013      	streq	r3, [r2, #0]
 8007ce2:	bf18      	it	ne
 8007ce4:	460c      	movne	r4, r1
 8007ce6:	e7e9      	b.n	8007cbc <_malloc_r+0x64>
 8007ce8:	460c      	mov	r4, r1
 8007cea:	6849      	ldr	r1, [r1, #4]
 8007cec:	e7ca      	b.n	8007c84 <_malloc_r+0x2c>
 8007cee:	1cc4      	adds	r4, r0, #3
 8007cf0:	f024 0403 	bic.w	r4, r4, #3
 8007cf4:	42a0      	cmp	r0, r4
 8007cf6:	d005      	beq.n	8007d04 <_malloc_r+0xac>
 8007cf8:	1a21      	subs	r1, r4, r0
 8007cfa:	4630      	mov	r0, r6
 8007cfc:	f000 f80a 	bl	8007d14 <_sbrk_r>
 8007d00:	3001      	adds	r0, #1
 8007d02:	d0cd      	beq.n	8007ca0 <_malloc_r+0x48>
 8007d04:	6025      	str	r5, [r4, #0]
 8007d06:	e7d9      	b.n	8007cbc <_malloc_r+0x64>
 8007d08:	bd70      	pop	{r4, r5, r6, pc}
 8007d0a:	bf00      	nop
 8007d0c:	20000208 	.word	0x20000208
 8007d10:	2000020c 	.word	0x2000020c

08007d14 <_sbrk_r>:
 8007d14:	b538      	push	{r3, r4, r5, lr}
 8007d16:	4c06      	ldr	r4, [pc, #24]	; (8007d30 <_sbrk_r+0x1c>)
 8007d18:	2300      	movs	r3, #0
 8007d1a:	4605      	mov	r5, r0
 8007d1c:	4608      	mov	r0, r1
 8007d1e:	6023      	str	r3, [r4, #0]
 8007d20:	f7f9 fb80 	bl	8001424 <_sbrk>
 8007d24:	1c43      	adds	r3, r0, #1
 8007d26:	d102      	bne.n	8007d2e <_sbrk_r+0x1a>
 8007d28:	6823      	ldr	r3, [r4, #0]
 8007d2a:	b103      	cbz	r3, 8007d2e <_sbrk_r+0x1a>
 8007d2c:	602b      	str	r3, [r5, #0]
 8007d2e:	bd38      	pop	{r3, r4, r5, pc}
 8007d30:	20001b2c 	.word	0x20001b2c

08007d34 <__malloc_lock>:
 8007d34:	4770      	bx	lr

08007d36 <__malloc_unlock>:
 8007d36:	4770      	bx	lr

08007d38 <_init>:
 8007d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d3a:	bf00      	nop
 8007d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d3e:	bc08      	pop	{r3}
 8007d40:	469e      	mov	lr, r3
 8007d42:	4770      	bx	lr

08007d44 <_fini>:
 8007d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d46:	bf00      	nop
 8007d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d4a:	bc08      	pop	{r3}
 8007d4c:	469e      	mov	lr, r3
 8007d4e:	4770      	bx	lr
