
servo-controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c1c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08007da4  08007da4  00017da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007e00  08007e00  00017e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007e08  08007e08  00017e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007e0c  08007e0c  00017e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e4  20000000  08007e10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000201e4  2**0
                  CONTENTS
  8 .bss          00001954  200001e4  200001e4  000201e4  2**2
                  ALLOC
  9 ._user_heap_stack 00006000  20001b38  20001b38  000201e4  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001694a  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000307b  00000000  00000000  00036b5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000010d8  00000000  00000000  00039be0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000f70  00000000  00000000  0003acb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00007750  00000000  00000000  0003bc28  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000051f3  00000000  00000000  00043378  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0004856b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000048b0  00000000  00000000  000485e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001e4 	.word	0x200001e4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007d8c 	.word	0x08007d8c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001e8 	.word	0x200001e8
 80001c4:	08007d8c 	.word	0x08007d8c

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <__aeabi_drsub>:
 80001dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e0:	e002      	b.n	80001e8 <__adddf3>
 80001e2:	bf00      	nop

080001e4 <__aeabi_dsub>:
 80001e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e8 <__adddf3>:
 80001e8:	b530      	push	{r4, r5, lr}
 80001ea:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ee:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f2:	ea94 0f05 	teq	r4, r5
 80001f6:	bf08      	it	eq
 80001f8:	ea90 0f02 	teqeq	r0, r2
 80001fc:	bf1f      	itttt	ne
 80001fe:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000202:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000206:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020e:	f000 80e2 	beq.w	80003d6 <__adddf3+0x1ee>
 8000212:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000216:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021a:	bfb8      	it	lt
 800021c:	426d      	neglt	r5, r5
 800021e:	dd0c      	ble.n	800023a <__adddf3+0x52>
 8000220:	442c      	add	r4, r5
 8000222:	ea80 0202 	eor.w	r2, r0, r2
 8000226:	ea81 0303 	eor.w	r3, r1, r3
 800022a:	ea82 0000 	eor.w	r0, r2, r0
 800022e:	ea83 0101 	eor.w	r1, r3, r1
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	2d36      	cmp	r5, #54	; 0x36
 800023c:	bf88      	it	hi
 800023e:	bd30      	pophi	{r4, r5, pc}
 8000240:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000244:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000248:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800024c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x70>
 8000252:	4240      	negs	r0, r0
 8000254:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000258:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800025c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000260:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x84>
 8000266:	4252      	negs	r2, r2
 8000268:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800026c:	ea94 0f05 	teq	r4, r5
 8000270:	f000 80a7 	beq.w	80003c2 <__adddf3+0x1da>
 8000274:	f1a4 0401 	sub.w	r4, r4, #1
 8000278:	f1d5 0e20 	rsbs	lr, r5, #32
 800027c:	db0d      	blt.n	800029a <__adddf3+0xb2>
 800027e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000282:	fa22 f205 	lsr.w	r2, r2, r5
 8000286:	1880      	adds	r0, r0, r2
 8000288:	f141 0100 	adc.w	r1, r1, #0
 800028c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000290:	1880      	adds	r0, r0, r2
 8000292:	fa43 f305 	asr.w	r3, r3, r5
 8000296:	4159      	adcs	r1, r3
 8000298:	e00e      	b.n	80002b8 <__adddf3+0xd0>
 800029a:	f1a5 0520 	sub.w	r5, r5, #32
 800029e:	f10e 0e20 	add.w	lr, lr, #32
 80002a2:	2a01      	cmp	r2, #1
 80002a4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a8:	bf28      	it	cs
 80002aa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ae:	fa43 f305 	asr.w	r3, r3, r5
 80002b2:	18c0      	adds	r0, r0, r3
 80002b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002bc:	d507      	bpl.n	80002ce <__adddf3+0xe6>
 80002be:	f04f 0e00 	mov.w	lr, #0
 80002c2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ca:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ce:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d2:	d31b      	bcc.n	800030c <__adddf3+0x124>
 80002d4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d8:	d30c      	bcc.n	80002f4 <__adddf3+0x10c>
 80002da:	0849      	lsrs	r1, r1, #1
 80002dc:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e4:	f104 0401 	add.w	r4, r4, #1
 80002e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002ec:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f0:	f080 809a 	bcs.w	8000428 <__adddf3+0x240>
 80002f4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f8:	bf08      	it	eq
 80002fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fe:	f150 0000 	adcs.w	r0, r0, #0
 8000302:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000306:	ea41 0105 	orr.w	r1, r1, r5
 800030a:	bd30      	pop	{r4, r5, pc}
 800030c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000310:	4140      	adcs	r0, r0
 8000312:	eb41 0101 	adc.w	r1, r1, r1
 8000316:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800031a:	f1a4 0401 	sub.w	r4, r4, #1
 800031e:	d1e9      	bne.n	80002f4 <__adddf3+0x10c>
 8000320:	f091 0f00 	teq	r1, #0
 8000324:	bf04      	itt	eq
 8000326:	4601      	moveq	r1, r0
 8000328:	2000      	moveq	r0, #0
 800032a:	fab1 f381 	clz	r3, r1
 800032e:	bf08      	it	eq
 8000330:	3320      	addeq	r3, #32
 8000332:	f1a3 030b 	sub.w	r3, r3, #11
 8000336:	f1b3 0220 	subs.w	r2, r3, #32
 800033a:	da0c      	bge.n	8000356 <__adddf3+0x16e>
 800033c:	320c      	adds	r2, #12
 800033e:	dd08      	ble.n	8000352 <__adddf3+0x16a>
 8000340:	f102 0c14 	add.w	ip, r2, #20
 8000344:	f1c2 020c 	rsb	r2, r2, #12
 8000348:	fa01 f00c 	lsl.w	r0, r1, ip
 800034c:	fa21 f102 	lsr.w	r1, r1, r2
 8000350:	e00c      	b.n	800036c <__adddf3+0x184>
 8000352:	f102 0214 	add.w	r2, r2, #20
 8000356:	bfd8      	it	le
 8000358:	f1c2 0c20 	rsble	ip, r2, #32
 800035c:	fa01 f102 	lsl.w	r1, r1, r2
 8000360:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000364:	bfdc      	itt	le
 8000366:	ea41 010c 	orrle.w	r1, r1, ip
 800036a:	4090      	lslle	r0, r2
 800036c:	1ae4      	subs	r4, r4, r3
 800036e:	bfa2      	ittt	ge
 8000370:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000374:	4329      	orrge	r1, r5
 8000376:	bd30      	popge	{r4, r5, pc}
 8000378:	ea6f 0404 	mvn.w	r4, r4
 800037c:	3c1f      	subs	r4, #31
 800037e:	da1c      	bge.n	80003ba <__adddf3+0x1d2>
 8000380:	340c      	adds	r4, #12
 8000382:	dc0e      	bgt.n	80003a2 <__adddf3+0x1ba>
 8000384:	f104 0414 	add.w	r4, r4, #20
 8000388:	f1c4 0220 	rsb	r2, r4, #32
 800038c:	fa20 f004 	lsr.w	r0, r0, r4
 8000390:	fa01 f302 	lsl.w	r3, r1, r2
 8000394:	ea40 0003 	orr.w	r0, r0, r3
 8000398:	fa21 f304 	lsr.w	r3, r1, r4
 800039c:	ea45 0103 	orr.w	r1, r5, r3
 80003a0:	bd30      	pop	{r4, r5, pc}
 80003a2:	f1c4 040c 	rsb	r4, r4, #12
 80003a6:	f1c4 0220 	rsb	r2, r4, #32
 80003aa:	fa20 f002 	lsr.w	r0, r0, r2
 80003ae:	fa01 f304 	lsl.w	r3, r1, r4
 80003b2:	ea40 0003 	orr.w	r0, r0, r3
 80003b6:	4629      	mov	r1, r5
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	fa21 f004 	lsr.w	r0, r1, r4
 80003be:	4629      	mov	r1, r5
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	f094 0f00 	teq	r4, #0
 80003c6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ca:	bf06      	itte	eq
 80003cc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d0:	3401      	addeq	r4, #1
 80003d2:	3d01      	subne	r5, #1
 80003d4:	e74e      	b.n	8000274 <__adddf3+0x8c>
 80003d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003da:	bf18      	it	ne
 80003dc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e0:	d029      	beq.n	8000436 <__adddf3+0x24e>
 80003e2:	ea94 0f05 	teq	r4, r5
 80003e6:	bf08      	it	eq
 80003e8:	ea90 0f02 	teqeq	r0, r2
 80003ec:	d005      	beq.n	80003fa <__adddf3+0x212>
 80003ee:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f2:	bf04      	itt	eq
 80003f4:	4619      	moveq	r1, r3
 80003f6:	4610      	moveq	r0, r2
 80003f8:	bd30      	pop	{r4, r5, pc}
 80003fa:	ea91 0f03 	teq	r1, r3
 80003fe:	bf1e      	ittt	ne
 8000400:	2100      	movne	r1, #0
 8000402:	2000      	movne	r0, #0
 8000404:	bd30      	popne	{r4, r5, pc}
 8000406:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040a:	d105      	bne.n	8000418 <__adddf3+0x230>
 800040c:	0040      	lsls	r0, r0, #1
 800040e:	4149      	adcs	r1, r1
 8000410:	bf28      	it	cs
 8000412:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000416:	bd30      	pop	{r4, r5, pc}
 8000418:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800041c:	bf3c      	itt	cc
 800041e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000422:	bd30      	popcc	{r4, r5, pc}
 8000424:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000428:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800042c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043a:	bf1a      	itte	ne
 800043c:	4619      	movne	r1, r3
 800043e:	4610      	movne	r0, r2
 8000440:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000444:	bf1c      	itt	ne
 8000446:	460b      	movne	r3, r1
 8000448:	4602      	movne	r2, r0
 800044a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044e:	bf06      	itte	eq
 8000450:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000454:	ea91 0f03 	teqeq	r1, r3
 8000458:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	bf00      	nop

08000460 <__aeabi_ui2d>:
 8000460:	f090 0f00 	teq	r0, #0
 8000464:	bf04      	itt	eq
 8000466:	2100      	moveq	r1, #0
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000470:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000474:	f04f 0500 	mov.w	r5, #0
 8000478:	f04f 0100 	mov.w	r1, #0
 800047c:	e750      	b.n	8000320 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_i2d>:
 8000480:	f090 0f00 	teq	r0, #0
 8000484:	bf04      	itt	eq
 8000486:	2100      	moveq	r1, #0
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000490:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000494:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000498:	bf48      	it	mi
 800049a:	4240      	negmi	r0, r0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e73e      	b.n	8000320 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_f2d>:
 80004a4:	0042      	lsls	r2, r0, #1
 80004a6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004aa:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ae:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b2:	bf1f      	itttt	ne
 80004b4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004bc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c0:	4770      	bxne	lr
 80004c2:	f092 0f00 	teq	r2, #0
 80004c6:	bf14      	ite	ne
 80004c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004dc:	e720      	b.n	8000320 <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_ul2d>:
 80004e0:	ea50 0201 	orrs.w	r2, r0, r1
 80004e4:	bf08      	it	eq
 80004e6:	4770      	bxeq	lr
 80004e8:	b530      	push	{r4, r5, lr}
 80004ea:	f04f 0500 	mov.w	r5, #0
 80004ee:	e00a      	b.n	8000506 <__aeabi_l2d+0x16>

080004f0 <__aeabi_l2d>:
 80004f0:	ea50 0201 	orrs.w	r2, r0, r1
 80004f4:	bf08      	it	eq
 80004f6:	4770      	bxeq	lr
 80004f8:	b530      	push	{r4, r5, lr}
 80004fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fe:	d502      	bpl.n	8000506 <__aeabi_l2d+0x16>
 8000500:	4240      	negs	r0, r0
 8000502:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000506:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000512:	f43f aedc 	beq.w	80002ce <__adddf3+0xe6>
 8000516:	f04f 0203 	mov.w	r2, #3
 800051a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051e:	bf18      	it	ne
 8000520:	3203      	addne	r2, #3
 8000522:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000526:	bf18      	it	ne
 8000528:	3203      	addne	r2, #3
 800052a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052e:	f1c2 0320 	rsb	r3, r2, #32
 8000532:	fa00 fc03 	lsl.w	ip, r0, r3
 8000536:	fa20 f002 	lsr.w	r0, r0, r2
 800053a:	fa01 fe03 	lsl.w	lr, r1, r3
 800053e:	ea40 000e 	orr.w	r0, r0, lr
 8000542:	fa21 f102 	lsr.w	r1, r1, r2
 8000546:	4414      	add	r4, r2
 8000548:	e6c1      	b.n	80002ce <__adddf3+0xe6>
 800054a:	bf00      	nop

0800054c <__aeabi_dmul>:
 800054c:	b570      	push	{r4, r5, r6, lr}
 800054e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000552:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000556:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055a:	bf1d      	ittte	ne
 800055c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000560:	ea94 0f0c 	teqne	r4, ip
 8000564:	ea95 0f0c 	teqne	r5, ip
 8000568:	f000 f8de 	bleq	8000728 <__aeabi_dmul+0x1dc>
 800056c:	442c      	add	r4, r5
 800056e:	ea81 0603 	eor.w	r6, r1, r3
 8000572:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000576:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057e:	bf18      	it	ne
 8000580:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000584:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000588:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800058c:	d038      	beq.n	8000600 <__aeabi_dmul+0xb4>
 800058e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000592:	f04f 0500 	mov.w	r5, #0
 8000596:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a2:	f04f 0600 	mov.w	r6, #0
 80005a6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005aa:	f09c 0f00 	teq	ip, #0
 80005ae:	bf18      	it	ne
 80005b0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005bc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c0:	d204      	bcs.n	80005cc <__aeabi_dmul+0x80>
 80005c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c6:	416d      	adcs	r5, r5
 80005c8:	eb46 0606 	adc.w	r6, r6, r6
 80005cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e4:	bf88      	it	hi
 80005e6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ea:	d81e      	bhi.n	800062a <__aeabi_dmul+0xde>
 80005ec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	bd70      	pop	{r4, r5, r6, pc}
 8000600:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000604:	ea46 0101 	orr.w	r1, r6, r1
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	ea81 0103 	eor.w	r1, r1, r3
 8000610:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000614:	bfc2      	ittt	gt
 8000616:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061e:	bd70      	popgt	{r4, r5, r6, pc}
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f04f 0e00 	mov.w	lr, #0
 8000628:	3c01      	subs	r4, #1
 800062a:	f300 80ab 	bgt.w	8000784 <__aeabi_dmul+0x238>
 800062e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000632:	bfde      	ittt	le
 8000634:	2000      	movle	r0, #0
 8000636:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063a:	bd70      	pople	{r4, r5, r6, pc}
 800063c:	f1c4 0400 	rsb	r4, r4, #0
 8000640:	3c20      	subs	r4, #32
 8000642:	da35      	bge.n	80006b0 <__aeabi_dmul+0x164>
 8000644:	340c      	adds	r4, #12
 8000646:	dc1b      	bgt.n	8000680 <__aeabi_dmul+0x134>
 8000648:	f104 0414 	add.w	r4, r4, #20
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f305 	lsl.w	r3, r0, r5
 8000654:	fa20 f004 	lsr.w	r0, r0, r4
 8000658:	fa01 f205 	lsl.w	r2, r1, r5
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000664:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000668:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800066c:	fa21 f604 	lsr.w	r6, r1, r4
 8000670:	eb42 0106 	adc.w	r1, r2, r6
 8000674:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000678:	bf08      	it	eq
 800067a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f1c4 040c 	rsb	r4, r4, #12
 8000684:	f1c4 0520 	rsb	r5, r4, #32
 8000688:	fa00 f304 	lsl.w	r3, r0, r4
 800068c:	fa20 f005 	lsr.w	r0, r0, r5
 8000690:	fa01 f204 	lsl.w	r2, r1, r4
 8000694:	ea40 0002 	orr.w	r0, r0, r2
 8000698:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	f141 0100 	adc.w	r1, r1, #0
 80006a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a8:	bf08      	it	eq
 80006aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ae:	bd70      	pop	{r4, r5, r6, pc}
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f205 	lsl.w	r2, r0, r5
 80006b8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006bc:	fa20 f304 	lsr.w	r3, r0, r4
 80006c0:	fa01 f205 	lsl.w	r2, r1, r5
 80006c4:	ea43 0302 	orr.w	r3, r3, r2
 80006c8:	fa21 f004 	lsr.w	r0, r1, r4
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	fa21 f204 	lsr.w	r2, r1, r4
 80006d4:	ea20 0002 	bic.w	r0, r0, r2
 80006d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e0:	bf08      	it	eq
 80006e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e6:	bd70      	pop	{r4, r5, r6, pc}
 80006e8:	f094 0f00 	teq	r4, #0
 80006ec:	d10f      	bne.n	800070e <__aeabi_dmul+0x1c2>
 80006ee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f2:	0040      	lsls	r0, r0, #1
 80006f4:	eb41 0101 	adc.w	r1, r1, r1
 80006f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006fc:	bf08      	it	eq
 80006fe:	3c01      	subeq	r4, #1
 8000700:	d0f7      	beq.n	80006f2 <__aeabi_dmul+0x1a6>
 8000702:	ea41 0106 	orr.w	r1, r1, r6
 8000706:	f095 0f00 	teq	r5, #0
 800070a:	bf18      	it	ne
 800070c:	4770      	bxne	lr
 800070e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000712:	0052      	lsls	r2, r2, #1
 8000714:	eb43 0303 	adc.w	r3, r3, r3
 8000718:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800071c:	bf08      	it	eq
 800071e:	3d01      	subeq	r5, #1
 8000720:	d0f7      	beq.n	8000712 <__aeabi_dmul+0x1c6>
 8000722:	ea43 0306 	orr.w	r3, r3, r6
 8000726:	4770      	bx	lr
 8000728:	ea94 0f0c 	teq	r4, ip
 800072c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000730:	bf18      	it	ne
 8000732:	ea95 0f0c 	teqne	r5, ip
 8000736:	d00c      	beq.n	8000752 <__aeabi_dmul+0x206>
 8000738:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800073c:	bf18      	it	ne
 800073e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000742:	d1d1      	bne.n	80006e8 <__aeabi_dmul+0x19c>
 8000744:	ea81 0103 	eor.w	r1, r1, r3
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000756:	bf06      	itte	eq
 8000758:	4610      	moveq	r0, r2
 800075a:	4619      	moveq	r1, r3
 800075c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000760:	d019      	beq.n	8000796 <__aeabi_dmul+0x24a>
 8000762:	ea94 0f0c 	teq	r4, ip
 8000766:	d102      	bne.n	800076e <__aeabi_dmul+0x222>
 8000768:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800076c:	d113      	bne.n	8000796 <__aeabi_dmul+0x24a>
 800076e:	ea95 0f0c 	teq	r5, ip
 8000772:	d105      	bne.n	8000780 <__aeabi_dmul+0x234>
 8000774:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000778:	bf1c      	itt	ne
 800077a:	4610      	movne	r0, r2
 800077c:	4619      	movne	r1, r3
 800077e:	d10a      	bne.n	8000796 <__aeabi_dmul+0x24a>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079e:	bd70      	pop	{r4, r5, r6, pc}

080007a0 <__aeabi_ddiv>:
 80007a0:	b570      	push	{r4, r5, r6, lr}
 80007a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ae:	bf1d      	ittte	ne
 80007b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b4:	ea94 0f0c 	teqne	r4, ip
 80007b8:	ea95 0f0c 	teqne	r5, ip
 80007bc:	f000 f8a7 	bleq	800090e <__aeabi_ddiv+0x16e>
 80007c0:	eba4 0405 	sub.w	r4, r4, r5
 80007c4:	ea81 0e03 	eor.w	lr, r1, r3
 80007c8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d0:	f000 8088 	beq.w	80008e4 <__aeabi_ddiv+0x144>
 80007d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007dc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007ec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f8:	429d      	cmp	r5, r3
 80007fa:	bf08      	it	eq
 80007fc:	4296      	cmpeq	r6, r2
 80007fe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000802:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000806:	d202      	bcs.n	800080e <__aeabi_ddiv+0x6e>
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	1ab6      	subs	r6, r6, r2
 8000810:	eb65 0503 	sbc.w	r5, r5, r3
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000822:	ebb6 0e02 	subs.w	lr, r6, r2
 8000826:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082a:	bf22      	ittt	cs
 800082c:	1ab6      	subcs	r6, r6, r2
 800082e:	4675      	movcs	r5, lr
 8000830:	ea40 000c 	orrcs.w	r0, r0, ip
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800087c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000880:	d018      	beq.n	80008b4 <__aeabi_ddiv+0x114>
 8000882:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000886:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000892:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000896:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089e:	d1c0      	bne.n	8000822 <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	d10b      	bne.n	80008be <__aeabi_ddiv+0x11e>
 80008a6:	ea41 0100 	orr.w	r1, r1, r0
 80008aa:	f04f 0000 	mov.w	r0, #0
 80008ae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b2:	e7b6      	b.n	8000822 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	bf04      	itt	eq
 80008ba:	4301      	orreq	r1, r0
 80008bc:	2000      	moveq	r0, #0
 80008be:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c2:	bf88      	it	hi
 80008c4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c8:	f63f aeaf 	bhi.w	800062a <__aeabi_dmul+0xde>
 80008cc:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d0:	bf04      	itt	eq
 80008d2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008da:	f150 0000 	adcs.w	r0, r0, #0
 80008de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e2:	bd70      	pop	{r4, r5, r6, pc}
 80008e4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008ec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f0:	bfc2      	ittt	gt
 80008f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	popgt	{r4, r5, r6, pc}
 80008fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000900:	f04f 0e00 	mov.w	lr, #0
 8000904:	3c01      	subs	r4, #1
 8000906:	e690      	b.n	800062a <__aeabi_dmul+0xde>
 8000908:	ea45 0e06 	orr.w	lr, r5, r6
 800090c:	e68d      	b.n	800062a <__aeabi_dmul+0xde>
 800090e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000912:	ea94 0f0c 	teq	r4, ip
 8000916:	bf08      	it	eq
 8000918:	ea95 0f0c 	teqeq	r5, ip
 800091c:	f43f af3b 	beq.w	8000796 <__aeabi_dmul+0x24a>
 8000920:	ea94 0f0c 	teq	r4, ip
 8000924:	d10a      	bne.n	800093c <__aeabi_ddiv+0x19c>
 8000926:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092a:	f47f af34 	bne.w	8000796 <__aeabi_dmul+0x24a>
 800092e:	ea95 0f0c 	teq	r5, ip
 8000932:	f47f af25 	bne.w	8000780 <__aeabi_dmul+0x234>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e72c      	b.n	8000796 <__aeabi_dmul+0x24a>
 800093c:	ea95 0f0c 	teq	r5, ip
 8000940:	d106      	bne.n	8000950 <__aeabi_ddiv+0x1b0>
 8000942:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000946:	f43f aefd 	beq.w	8000744 <__aeabi_dmul+0x1f8>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e722      	b.n	8000796 <__aeabi_dmul+0x24a>
 8000950:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000954:	bf18      	it	ne
 8000956:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095a:	f47f aec5 	bne.w	80006e8 <__aeabi_dmul+0x19c>
 800095e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000962:	f47f af0d 	bne.w	8000780 <__aeabi_dmul+0x234>
 8000966:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096a:	f47f aeeb 	bne.w	8000744 <__aeabi_dmul+0x1f8>
 800096e:	e712      	b.n	8000796 <__aeabi_dmul+0x24a>

08000970 <__aeabi_d2iz>:
 8000970:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000974:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000978:	d215      	bcs.n	80009a6 <__aeabi_d2iz+0x36>
 800097a:	d511      	bpl.n	80009a0 <__aeabi_d2iz+0x30>
 800097c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000980:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000984:	d912      	bls.n	80009ac <__aeabi_d2iz+0x3c>
 8000986:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800098e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000992:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	bf18      	it	ne
 800099c:	4240      	negne	r0, r0
 800099e:	4770      	bx	lr
 80009a0:	f04f 0000 	mov.w	r0, #0
 80009a4:	4770      	bx	lr
 80009a6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009aa:	d105      	bne.n	80009b8 <__aeabi_d2iz+0x48>
 80009ac:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009b0:	bf08      	it	eq
 80009b2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009b6:	4770      	bx	lr
 80009b8:	f04f 0000 	mov.w	r0, #0
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop

080009c0 <__aeabi_uldivmod>:
 80009c0:	b953      	cbnz	r3, 80009d8 <__aeabi_uldivmod+0x18>
 80009c2:	b94a      	cbnz	r2, 80009d8 <__aeabi_uldivmod+0x18>
 80009c4:	2900      	cmp	r1, #0
 80009c6:	bf08      	it	eq
 80009c8:	2800      	cmpeq	r0, #0
 80009ca:	bf1c      	itt	ne
 80009cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80009d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80009d4:	f000 b97a 	b.w	8000ccc <__aeabi_idiv0>
 80009d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80009dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009e0:	f000 f806 	bl	80009f0 <__udivmoddi4>
 80009e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009ec:	b004      	add	sp, #16
 80009ee:	4770      	bx	lr

080009f0 <__udivmoddi4>:
 80009f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f4:	468c      	mov	ip, r1
 80009f6:	460d      	mov	r5, r1
 80009f8:	4604      	mov	r4, r0
 80009fa:	9e08      	ldr	r6, [sp, #32]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d151      	bne.n	8000aa4 <__udivmoddi4+0xb4>
 8000a00:	428a      	cmp	r2, r1
 8000a02:	4617      	mov	r7, r2
 8000a04:	d96d      	bls.n	8000ae2 <__udivmoddi4+0xf2>
 8000a06:	fab2 fe82 	clz	lr, r2
 8000a0a:	f1be 0f00 	cmp.w	lr, #0
 8000a0e:	d00b      	beq.n	8000a28 <__udivmoddi4+0x38>
 8000a10:	f1ce 0c20 	rsb	ip, lr, #32
 8000a14:	fa01 f50e 	lsl.w	r5, r1, lr
 8000a18:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000a1c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000a20:	ea4c 0c05 	orr.w	ip, ip, r5
 8000a24:	fa00 f40e 	lsl.w	r4, r0, lr
 8000a28:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000a2c:	0c25      	lsrs	r5, r4, #16
 8000a2e:	fbbc f8fa 	udiv	r8, ip, sl
 8000a32:	fa1f f987 	uxth.w	r9, r7
 8000a36:	fb0a cc18 	mls	ip, sl, r8, ip
 8000a3a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000a3e:	fb08 f309 	mul.w	r3, r8, r9
 8000a42:	42ab      	cmp	r3, r5
 8000a44:	d90a      	bls.n	8000a5c <__udivmoddi4+0x6c>
 8000a46:	19ed      	adds	r5, r5, r7
 8000a48:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000a4c:	f080 8123 	bcs.w	8000c96 <__udivmoddi4+0x2a6>
 8000a50:	42ab      	cmp	r3, r5
 8000a52:	f240 8120 	bls.w	8000c96 <__udivmoddi4+0x2a6>
 8000a56:	f1a8 0802 	sub.w	r8, r8, #2
 8000a5a:	443d      	add	r5, r7
 8000a5c:	1aed      	subs	r5, r5, r3
 8000a5e:	b2a4      	uxth	r4, r4
 8000a60:	fbb5 f0fa 	udiv	r0, r5, sl
 8000a64:	fb0a 5510 	mls	r5, sl, r0, r5
 8000a68:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a6c:	fb00 f909 	mul.w	r9, r0, r9
 8000a70:	45a1      	cmp	r9, r4
 8000a72:	d909      	bls.n	8000a88 <__udivmoddi4+0x98>
 8000a74:	19e4      	adds	r4, r4, r7
 8000a76:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000a7a:	f080 810a 	bcs.w	8000c92 <__udivmoddi4+0x2a2>
 8000a7e:	45a1      	cmp	r9, r4
 8000a80:	f240 8107 	bls.w	8000c92 <__udivmoddi4+0x2a2>
 8000a84:	3802      	subs	r0, #2
 8000a86:	443c      	add	r4, r7
 8000a88:	eba4 0409 	sub.w	r4, r4, r9
 8000a8c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a90:	2100      	movs	r1, #0
 8000a92:	2e00      	cmp	r6, #0
 8000a94:	d061      	beq.n	8000b5a <__udivmoddi4+0x16a>
 8000a96:	fa24 f40e 	lsr.w	r4, r4, lr
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	6034      	str	r4, [r6, #0]
 8000a9e:	6073      	str	r3, [r6, #4]
 8000aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa4:	428b      	cmp	r3, r1
 8000aa6:	d907      	bls.n	8000ab8 <__udivmoddi4+0xc8>
 8000aa8:	2e00      	cmp	r6, #0
 8000aaa:	d054      	beq.n	8000b56 <__udivmoddi4+0x166>
 8000aac:	2100      	movs	r1, #0
 8000aae:	e886 0021 	stmia.w	r6, {r0, r5}
 8000ab2:	4608      	mov	r0, r1
 8000ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ab8:	fab3 f183 	clz	r1, r3
 8000abc:	2900      	cmp	r1, #0
 8000abe:	f040 808e 	bne.w	8000bde <__udivmoddi4+0x1ee>
 8000ac2:	42ab      	cmp	r3, r5
 8000ac4:	d302      	bcc.n	8000acc <__udivmoddi4+0xdc>
 8000ac6:	4282      	cmp	r2, r0
 8000ac8:	f200 80fa 	bhi.w	8000cc0 <__udivmoddi4+0x2d0>
 8000acc:	1a84      	subs	r4, r0, r2
 8000ace:	eb65 0503 	sbc.w	r5, r5, r3
 8000ad2:	2001      	movs	r0, #1
 8000ad4:	46ac      	mov	ip, r5
 8000ad6:	2e00      	cmp	r6, #0
 8000ad8:	d03f      	beq.n	8000b5a <__udivmoddi4+0x16a>
 8000ada:	e886 1010 	stmia.w	r6, {r4, ip}
 8000ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae2:	b912      	cbnz	r2, 8000aea <__udivmoddi4+0xfa>
 8000ae4:	2701      	movs	r7, #1
 8000ae6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000aea:	fab7 fe87 	clz	lr, r7
 8000aee:	f1be 0f00 	cmp.w	lr, #0
 8000af2:	d134      	bne.n	8000b5e <__udivmoddi4+0x16e>
 8000af4:	1beb      	subs	r3, r5, r7
 8000af6:	0c3a      	lsrs	r2, r7, #16
 8000af8:	fa1f fc87 	uxth.w	ip, r7
 8000afc:	2101      	movs	r1, #1
 8000afe:	fbb3 f8f2 	udiv	r8, r3, r2
 8000b02:	0c25      	lsrs	r5, r4, #16
 8000b04:	fb02 3318 	mls	r3, r2, r8, r3
 8000b08:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000b0c:	fb0c f308 	mul.w	r3, ip, r8
 8000b10:	42ab      	cmp	r3, r5
 8000b12:	d907      	bls.n	8000b24 <__udivmoddi4+0x134>
 8000b14:	19ed      	adds	r5, r5, r7
 8000b16:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000b1a:	d202      	bcs.n	8000b22 <__udivmoddi4+0x132>
 8000b1c:	42ab      	cmp	r3, r5
 8000b1e:	f200 80d1 	bhi.w	8000cc4 <__udivmoddi4+0x2d4>
 8000b22:	4680      	mov	r8, r0
 8000b24:	1aed      	subs	r5, r5, r3
 8000b26:	b2a3      	uxth	r3, r4
 8000b28:	fbb5 f0f2 	udiv	r0, r5, r2
 8000b2c:	fb02 5510 	mls	r5, r2, r0, r5
 8000b30:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000b34:	fb0c fc00 	mul.w	ip, ip, r0
 8000b38:	45a4      	cmp	ip, r4
 8000b3a:	d907      	bls.n	8000b4c <__udivmoddi4+0x15c>
 8000b3c:	19e4      	adds	r4, r4, r7
 8000b3e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b42:	d202      	bcs.n	8000b4a <__udivmoddi4+0x15a>
 8000b44:	45a4      	cmp	ip, r4
 8000b46:	f200 80b8 	bhi.w	8000cba <__udivmoddi4+0x2ca>
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	eba4 040c 	sub.w	r4, r4, ip
 8000b50:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b54:	e79d      	b.n	8000a92 <__udivmoddi4+0xa2>
 8000b56:	4631      	mov	r1, r6
 8000b58:	4630      	mov	r0, r6
 8000b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5e:	f1ce 0420 	rsb	r4, lr, #32
 8000b62:	fa05 f30e 	lsl.w	r3, r5, lr
 8000b66:	fa07 f70e 	lsl.w	r7, r7, lr
 8000b6a:	fa20 f804 	lsr.w	r8, r0, r4
 8000b6e:	0c3a      	lsrs	r2, r7, #16
 8000b70:	fa25 f404 	lsr.w	r4, r5, r4
 8000b74:	ea48 0803 	orr.w	r8, r8, r3
 8000b78:	fbb4 f1f2 	udiv	r1, r4, r2
 8000b7c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000b80:	fb02 4411 	mls	r4, r2, r1, r4
 8000b84:	fa1f fc87 	uxth.w	ip, r7
 8000b88:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000b8c:	fb01 f30c 	mul.w	r3, r1, ip
 8000b90:	42ab      	cmp	r3, r5
 8000b92:	fa00 f40e 	lsl.w	r4, r0, lr
 8000b96:	d909      	bls.n	8000bac <__udivmoddi4+0x1bc>
 8000b98:	19ed      	adds	r5, r5, r7
 8000b9a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 8000b9e:	f080 808a 	bcs.w	8000cb6 <__udivmoddi4+0x2c6>
 8000ba2:	42ab      	cmp	r3, r5
 8000ba4:	f240 8087 	bls.w	8000cb6 <__udivmoddi4+0x2c6>
 8000ba8:	3902      	subs	r1, #2
 8000baa:	443d      	add	r5, r7
 8000bac:	1aeb      	subs	r3, r5, r3
 8000bae:	fa1f f588 	uxth.w	r5, r8
 8000bb2:	fbb3 f0f2 	udiv	r0, r3, r2
 8000bb6:	fb02 3310 	mls	r3, r2, r0, r3
 8000bba:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000bbe:	fb00 f30c 	mul.w	r3, r0, ip
 8000bc2:	42ab      	cmp	r3, r5
 8000bc4:	d907      	bls.n	8000bd6 <__udivmoddi4+0x1e6>
 8000bc6:	19ed      	adds	r5, r5, r7
 8000bc8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000bcc:	d26f      	bcs.n	8000cae <__udivmoddi4+0x2be>
 8000bce:	42ab      	cmp	r3, r5
 8000bd0:	d96d      	bls.n	8000cae <__udivmoddi4+0x2be>
 8000bd2:	3802      	subs	r0, #2
 8000bd4:	443d      	add	r5, r7
 8000bd6:	1aeb      	subs	r3, r5, r3
 8000bd8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bdc:	e78f      	b.n	8000afe <__udivmoddi4+0x10e>
 8000bde:	f1c1 0720 	rsb	r7, r1, #32
 8000be2:	fa22 f807 	lsr.w	r8, r2, r7
 8000be6:	408b      	lsls	r3, r1
 8000be8:	fa05 f401 	lsl.w	r4, r5, r1
 8000bec:	ea48 0303 	orr.w	r3, r8, r3
 8000bf0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000bf4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000bf8:	40fd      	lsrs	r5, r7
 8000bfa:	ea4e 0e04 	orr.w	lr, lr, r4
 8000bfe:	fbb5 f9fc 	udiv	r9, r5, ip
 8000c02:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000c06:	fb0c 5519 	mls	r5, ip, r9, r5
 8000c0a:	fa1f f883 	uxth.w	r8, r3
 8000c0e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000c12:	fb09 f408 	mul.w	r4, r9, r8
 8000c16:	42ac      	cmp	r4, r5
 8000c18:	fa02 f201 	lsl.w	r2, r2, r1
 8000c1c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000c20:	d908      	bls.n	8000c34 <__udivmoddi4+0x244>
 8000c22:	18ed      	adds	r5, r5, r3
 8000c24:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000c28:	d243      	bcs.n	8000cb2 <__udivmoddi4+0x2c2>
 8000c2a:	42ac      	cmp	r4, r5
 8000c2c:	d941      	bls.n	8000cb2 <__udivmoddi4+0x2c2>
 8000c2e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c32:	441d      	add	r5, r3
 8000c34:	1b2d      	subs	r5, r5, r4
 8000c36:	fa1f fe8e 	uxth.w	lr, lr
 8000c3a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000c3e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000c42:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000c46:	fb00 f808 	mul.w	r8, r0, r8
 8000c4a:	45a0      	cmp	r8, r4
 8000c4c:	d907      	bls.n	8000c5e <__udivmoddi4+0x26e>
 8000c4e:	18e4      	adds	r4, r4, r3
 8000c50:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000c54:	d229      	bcs.n	8000caa <__udivmoddi4+0x2ba>
 8000c56:	45a0      	cmp	r8, r4
 8000c58:	d927      	bls.n	8000caa <__udivmoddi4+0x2ba>
 8000c5a:	3802      	subs	r0, #2
 8000c5c:	441c      	add	r4, r3
 8000c5e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c62:	eba4 0408 	sub.w	r4, r4, r8
 8000c66:	fba0 8902 	umull	r8, r9, r0, r2
 8000c6a:	454c      	cmp	r4, r9
 8000c6c:	46c6      	mov	lr, r8
 8000c6e:	464d      	mov	r5, r9
 8000c70:	d315      	bcc.n	8000c9e <__udivmoddi4+0x2ae>
 8000c72:	d012      	beq.n	8000c9a <__udivmoddi4+0x2aa>
 8000c74:	b156      	cbz	r6, 8000c8c <__udivmoddi4+0x29c>
 8000c76:	ebba 030e 	subs.w	r3, sl, lr
 8000c7a:	eb64 0405 	sbc.w	r4, r4, r5
 8000c7e:	fa04 f707 	lsl.w	r7, r4, r7
 8000c82:	40cb      	lsrs	r3, r1
 8000c84:	431f      	orrs	r7, r3
 8000c86:	40cc      	lsrs	r4, r1
 8000c88:	6037      	str	r7, [r6, #0]
 8000c8a:	6074      	str	r4, [r6, #4]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	4618      	mov	r0, r3
 8000c94:	e6f8      	b.n	8000a88 <__udivmoddi4+0x98>
 8000c96:	4690      	mov	r8, r2
 8000c98:	e6e0      	b.n	8000a5c <__udivmoddi4+0x6c>
 8000c9a:	45c2      	cmp	sl, r8
 8000c9c:	d2ea      	bcs.n	8000c74 <__udivmoddi4+0x284>
 8000c9e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ca2:	eb69 0503 	sbc.w	r5, r9, r3
 8000ca6:	3801      	subs	r0, #1
 8000ca8:	e7e4      	b.n	8000c74 <__udivmoddi4+0x284>
 8000caa:	4628      	mov	r0, r5
 8000cac:	e7d7      	b.n	8000c5e <__udivmoddi4+0x26e>
 8000cae:	4640      	mov	r0, r8
 8000cb0:	e791      	b.n	8000bd6 <__udivmoddi4+0x1e6>
 8000cb2:	4681      	mov	r9, r0
 8000cb4:	e7be      	b.n	8000c34 <__udivmoddi4+0x244>
 8000cb6:	4601      	mov	r1, r0
 8000cb8:	e778      	b.n	8000bac <__udivmoddi4+0x1bc>
 8000cba:	3802      	subs	r0, #2
 8000cbc:	443c      	add	r4, r7
 8000cbe:	e745      	b.n	8000b4c <__udivmoddi4+0x15c>
 8000cc0:	4608      	mov	r0, r1
 8000cc2:	e708      	b.n	8000ad6 <__udivmoddi4+0xe6>
 8000cc4:	f1a8 0802 	sub.w	r8, r8, #2
 8000cc8:	443d      	add	r5, r7
 8000cca:	e72b      	b.n	8000b24 <__udivmoddi4+0x134>

08000ccc <__aeabi_idiv0>:
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <main>:
void SystemClock_Config(void);
static void MX_TIM1_Init(void);
static void MX_GPIO_Init(void);

int main(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  HAL_Init();
 8000cd4:	f000 fbb0 	bl	8001438 <HAL_Init>
  SystemClock_Config();
 8000cd8:	f000 f944 	bl	8000f64 <SystemClock_Config>
  MX_GPIO_Init();
 8000cdc:	f000 fa70 	bl	80011c0 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000ce0:	f000 f9a8 	bl	8001034 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 8000ce4:	f006 fa14 	bl	8007110 <MX_USB_DEVICE_Init>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4812      	ldr	r0, [pc, #72]	; (8000d34 <main+0x64>)
 8000cec:	f002 fd0e 	bl	800370c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000cf0:	2104      	movs	r1, #4
 8000cf2:	4810      	ldr	r0, [pc, #64]	; (8000d34 <main+0x64>)
 8000cf4:	f002 fd0a 	bl	800370c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000cf8:	2108      	movs	r1, #8
 8000cfa:	480e      	ldr	r0, [pc, #56]	; (8000d34 <main+0x64>)
 8000cfc:	f002 fd06 	bl	800370c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000d00:	210c      	movs	r1, #12
 8000d02:	480c      	ldr	r0, [pc, #48]	; (8000d34 <main+0x64>)
 8000d04:	f002 fd02 	bl	800370c <HAL_TIM_PWM_Start>

  incoming.angle_0 = 5;
 8000d08:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <main+0x68>)
 8000d0a:	2205      	movs	r2, #5
 8000d0c:	711a      	strb	r2, [r3, #4]
  incoming.angle_1 = 0;
 8000d0e:	4b0a      	ldr	r3, [pc, #40]	; (8000d38 <main+0x68>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	715a      	strb	r2, [r3, #5]
  incoming.angle_2 = 0;
 8000d14:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <main+0x68>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	719a      	strb	r2, [r3, #6]
  incoming.angle_3 = 10;
 8000d1a:	4b07      	ldr	r3, [pc, #28]	; (8000d38 <main+0x68>)
 8000d1c:	220a      	movs	r2, #10
 8000d1e:	71da      	strb	r2, [r3, #7]

  servo_sweep(incoming);
 8000d20:	4b05      	ldr	r3, [pc, #20]	; (8000d38 <main+0x68>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	4611      	mov	r1, r2
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	461a      	mov	r2, r3
 8000d2a:	4608      	mov	r0, r1
 8000d2c:	4611      	mov	r1, r2
 8000d2e:	f000 f849 	bl	8000dc4 <servo_sweep>

  while (1)
 8000d32:	e7fe      	b.n	8000d32 <main+0x62>
 8000d34:	20000218 	.word	0x20000218
 8000d38:	20000210 	.word	0x20000210

08000d3c <map>:
}

/* -------------------------------------------------- */

int map(int st1, int fn1, int st2, int fn2, int value)
{
 8000d3c:	b5b0      	push	{r4, r5, r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	607a      	str	r2, [r7, #4]
 8000d48:	603b      	str	r3, [r7, #0]
    return (1.0 * (value - st1)) / ((fn1 - st1) * 1.0) * (fn2 - st2) + st2;
 8000d4a:	6a3a      	ldr	r2, [r7, #32]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	1ad3      	subs	r3, r2, r3
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff fb95 	bl	8000480 <__aeabi_i2d>
 8000d56:	4604      	mov	r4, r0
 8000d58:	460d      	mov	r5, r1
 8000d5a:	68ba      	ldr	r2, [r7, #8]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	1ad3      	subs	r3, r2, r3
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff fb8d 	bl	8000480 <__aeabi_i2d>
 8000d66:	4602      	mov	r2, r0
 8000d68:	460b      	mov	r3, r1
 8000d6a:	4620      	mov	r0, r4
 8000d6c:	4629      	mov	r1, r5
 8000d6e:	f7ff fd17 	bl	80007a0 <__aeabi_ddiv>
 8000d72:	4603      	mov	r3, r0
 8000d74:	460c      	mov	r4, r1
 8000d76:	4625      	mov	r5, r4
 8000d78:	461c      	mov	r4, r3
 8000d7a:	683a      	ldr	r2, [r7, #0]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	1ad3      	subs	r3, r2, r3
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff fb7d 	bl	8000480 <__aeabi_i2d>
 8000d86:	4602      	mov	r2, r0
 8000d88:	460b      	mov	r3, r1
 8000d8a:	4620      	mov	r0, r4
 8000d8c:	4629      	mov	r1, r5
 8000d8e:	f7ff fbdd 	bl	800054c <__aeabi_dmul>
 8000d92:	4603      	mov	r3, r0
 8000d94:	460c      	mov	r4, r1
 8000d96:	4625      	mov	r5, r4
 8000d98:	461c      	mov	r4, r3
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f7ff fb70 	bl	8000480 <__aeabi_i2d>
 8000da0:	4602      	mov	r2, r0
 8000da2:	460b      	mov	r3, r1
 8000da4:	4620      	mov	r0, r4
 8000da6:	4629      	mov	r1, r5
 8000da8:	f7ff fa1e 	bl	80001e8 <__adddf3>
 8000dac:	4603      	mov	r3, r0
 8000dae:	460c      	mov	r4, r1
 8000db0:	4618      	mov	r0, r3
 8000db2:	4621      	mov	r1, r4
 8000db4:	f7ff fddc 	bl	8000970 <__aeabi_d2iz>
 8000db8:	4603      	mov	r3, r0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3710      	adds	r7, #16
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000dc4 <servo_sweep>:

void servo_sweep(command_t incoming_command)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	463b      	mov	r3, r7
 8000dcc:	e883 0003 	stmia.w	r3, {r0, r1}
	int servo_0, servo_1, servo_2, servo_3;

	servo_0 = 10 + (int)((120 * (90 - incoming_command.angle_0)) / (90));
 8000dd0:	793b      	ldrb	r3, [r7, #4]
 8000dd2:	f1c3 025a 	rsb	r2, r3, #90	; 0x5a
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	011b      	lsls	r3, r3, #4
 8000dda:	1a9b      	subs	r3, r3, r2
 8000ddc:	00db      	lsls	r3, r3, #3
 8000dde:	4a21      	ldr	r2, [pc, #132]	; (8000e64 <servo_sweep+0xa0>)
 8000de0:	fb82 1203 	smull	r1, r2, r2, r3
 8000de4:	441a      	add	r2, r3
 8000de6:	1192      	asrs	r2, r2, #6
 8000de8:	17db      	asrs	r3, r3, #31
 8000dea:	1ad3      	subs	r3, r2, r3
 8000dec:	330a      	adds	r3, #10
 8000dee:	617b      	str	r3, [r7, #20]
	servo_1 = 10 + (int)((120 * (90 - incoming_command.angle_1)) / (90));
 8000df0:	797b      	ldrb	r3, [r7, #5]
 8000df2:	f1c3 025a 	rsb	r2, r3, #90	; 0x5a
 8000df6:	4613      	mov	r3, r2
 8000df8:	011b      	lsls	r3, r3, #4
 8000dfa:	1a9b      	subs	r3, r3, r2
 8000dfc:	00db      	lsls	r3, r3, #3
 8000dfe:	4a19      	ldr	r2, [pc, #100]	; (8000e64 <servo_sweep+0xa0>)
 8000e00:	fb82 1203 	smull	r1, r2, r2, r3
 8000e04:	441a      	add	r2, r3
 8000e06:	1192      	asrs	r2, r2, #6
 8000e08:	17db      	asrs	r3, r3, #31
 8000e0a:	1ad3      	subs	r3, r2, r3
 8000e0c:	330a      	adds	r3, #10
 8000e0e:	613b      	str	r3, [r7, #16]
	servo_2 = 10 + (int)((120 * (90 - incoming_command.angle_2)) / (90));
 8000e10:	79bb      	ldrb	r3, [r7, #6]
 8000e12:	f1c3 025a 	rsb	r2, r3, #90	; 0x5a
 8000e16:	4613      	mov	r3, r2
 8000e18:	011b      	lsls	r3, r3, #4
 8000e1a:	1a9b      	subs	r3, r3, r2
 8000e1c:	00db      	lsls	r3, r3, #3
 8000e1e:	4a11      	ldr	r2, [pc, #68]	; (8000e64 <servo_sweep+0xa0>)
 8000e20:	fb82 1203 	smull	r1, r2, r2, r3
 8000e24:	441a      	add	r2, r3
 8000e26:	1192      	asrs	r2, r2, #6
 8000e28:	17db      	asrs	r3, r3, #31
 8000e2a:	1ad3      	subs	r3, r2, r3
 8000e2c:	330a      	adds	r3, #10
 8000e2e:	60fb      	str	r3, [r7, #12]
	servo_3 = 10 + (int)((120 * (90 - incoming_command.angle_3)) / (90));
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	f1c3 025a 	rsb	r2, r3, #90	; 0x5a
 8000e36:	4613      	mov	r3, r2
 8000e38:	011b      	lsls	r3, r3, #4
 8000e3a:	1a9b      	subs	r3, r3, r2
 8000e3c:	00db      	lsls	r3, r3, #3
 8000e3e:	4a09      	ldr	r2, [pc, #36]	; (8000e64 <servo_sweep+0xa0>)
 8000e40:	fb82 1203 	smull	r1, r2, r2, r3
 8000e44:	441a      	add	r2, r3
 8000e46:	1192      	asrs	r2, r2, #6
 8000e48:	17db      	asrs	r3, r3, #31
 8000e4a:	1ad3      	subs	r3, r2, r3
 8000e4c:	330a      	adds	r3, #10
 8000e4e:	60bb      	str	r3, [r7, #8]

	servo_write(servo_0, servo_1, servo_2, servo_3);
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	68fa      	ldr	r2, [r7, #12]
 8000e54:	6939      	ldr	r1, [r7, #16]
 8000e56:	6978      	ldr	r0, [r7, #20]
 8000e58:	f000 f806 	bl	8000e68 <servo_write>
}
 8000e5c:	bf00      	nop
 8000e5e:	3718      	adds	r7, #24
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	b60b60b7 	.word	0xb60b60b7

08000e68 <servo_write>:

void servo_write(int servo_0, int servo_1, int servo_2, int servo_3)
{
 8000e68:	b590      	push	{r4, r7, lr}
 8000e6a:	b087      	sub	sp, #28
 8000e6c:	af02      	add	r7, sp, #8
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
 8000e74:	603b      	str	r3, [r7, #0]
	htim1.Instance->CCR1 = map(0, 180, 50, 250, servo_0);
 8000e76:	4b1a      	ldr	r3, [pc, #104]	; (8000ee0 <servo_write+0x78>)
 8000e78:	681c      	ldr	r4, [r3, #0]
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	9300      	str	r3, [sp, #0]
 8000e7e:	23fa      	movs	r3, #250	; 0xfa
 8000e80:	2232      	movs	r2, #50	; 0x32
 8000e82:	21b4      	movs	r1, #180	; 0xb4
 8000e84:	2000      	movs	r0, #0
 8000e86:	f7ff ff59 	bl	8000d3c <map>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	6363      	str	r3, [r4, #52]	; 0x34
	htim1.Instance->CCR2 = map(0, 180, 50, 250, servo_1);
 8000e8e:	4b14      	ldr	r3, [pc, #80]	; (8000ee0 <servo_write+0x78>)
 8000e90:	681c      	ldr	r4, [r3, #0]
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	9300      	str	r3, [sp, #0]
 8000e96:	23fa      	movs	r3, #250	; 0xfa
 8000e98:	2232      	movs	r2, #50	; 0x32
 8000e9a:	21b4      	movs	r1, #180	; 0xb4
 8000e9c:	2000      	movs	r0, #0
 8000e9e:	f7ff ff4d 	bl	8000d3c <map>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	63a3      	str	r3, [r4, #56]	; 0x38
	htim1.Instance->CCR3 = map(0, 180, 50, 250, servo_2);
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <servo_write+0x78>)
 8000ea8:	681c      	ldr	r4, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	9300      	str	r3, [sp, #0]
 8000eae:	23fa      	movs	r3, #250	; 0xfa
 8000eb0:	2232      	movs	r2, #50	; 0x32
 8000eb2:	21b4      	movs	r1, #180	; 0xb4
 8000eb4:	2000      	movs	r0, #0
 8000eb6:	f7ff ff41 	bl	8000d3c <map>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	63e3      	str	r3, [r4, #60]	; 0x3c
	htim1.Instance->CCR4 = map(0, 180, 50, 250, servo_3);
 8000ebe:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <servo_write+0x78>)
 8000ec0:	681c      	ldr	r4, [r3, #0]
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	9300      	str	r3, [sp, #0]
 8000ec6:	23fa      	movs	r3, #250	; 0xfa
 8000ec8:	2232      	movs	r2, #50	; 0x32
 8000eca:	21b4      	movs	r1, #180	; 0xb4
 8000ecc:	2000      	movs	r0, #0
 8000ece:	f7ff ff35 	bl	8000d3c <map>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	6423      	str	r3, [r4, #64]	; 0x40
}
 8000ed6:	bf00      	nop
 8000ed8:	3714      	adds	r7, #20
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd90      	pop	{r4, r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000218 	.word	0x20000218

08000ee4 <CDC_ReceiveCallBack>:

/* -------------------------------------------------- */

void CDC_ReceiveCallBack(uint8_t *buffer, uint32_t size)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
	char temp[4];

	if (size == 4)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	2b04      	cmp	r3, #4
 8000ef2:	d116      	bne.n	8000f22 <CDC_ReceiveCallBack+0x3e>
	{
		memcpy(temp, buffer, size);
 8000ef4:	f107 030c 	add.w	r3, r7, #12
 8000ef8:	683a      	ldr	r2, [r7, #0]
 8000efa:	6879      	ldr	r1, [r7, #4]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f006 fe73 	bl	8007be8 <memcpy>

		if (strcmp(temp, key) == 0)
 8000f02:	f107 030c 	add.w	r3, r7, #12
 8000f06:	4915      	ldr	r1, [pc, #84]	; (8000f5c <CDC_ReceiveCallBack+0x78>)
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff f95d 	bl	80001c8 <strcmp>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d11e      	bne.n	8000f52 <CDC_ReceiveCallBack+0x6e>
		{
			CDC_Transmit_FS(buffer, size);
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	4619      	mov	r1, r3
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f006 f9bc 	bl	8007298 <CDC_Transmit_FS>
		if (strcmp(incoming.key, key) == 0)
		{
			servo_sweep(incoming);
		}
	}
}
 8000f20:	e017      	b.n	8000f52 <CDC_ReceiveCallBack+0x6e>
	else if (size == 8)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	2b08      	cmp	r3, #8
 8000f26:	d114      	bne.n	8000f52 <CDC_ReceiveCallBack+0x6e>
		memcpy(&incoming, buffer, size);
 8000f28:	683a      	ldr	r2, [r7, #0]
 8000f2a:	6879      	ldr	r1, [r7, #4]
 8000f2c:	480c      	ldr	r0, [pc, #48]	; (8000f60 <CDC_ReceiveCallBack+0x7c>)
 8000f2e:	f006 fe5b 	bl	8007be8 <memcpy>
		if (strcmp(incoming.key, key) == 0)
 8000f32:	490a      	ldr	r1, [pc, #40]	; (8000f5c <CDC_ReceiveCallBack+0x78>)
 8000f34:	480a      	ldr	r0, [pc, #40]	; (8000f60 <CDC_ReceiveCallBack+0x7c>)
 8000f36:	f7ff f947 	bl	80001c8 <strcmp>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d108      	bne.n	8000f52 <CDC_ReceiveCallBack+0x6e>
			servo_sweep(incoming);
 8000f40:	4b07      	ldr	r3, [pc, #28]	; (8000f60 <CDC_ReceiveCallBack+0x7c>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	4611      	mov	r1, r2
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	461a      	mov	r2, r3
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	4611      	mov	r1, r2
 8000f4e:	f7ff ff39 	bl	8000dc4 <servo_sweep>
}
 8000f52:	bf00      	nop
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	08007dec 	.word	0x08007dec
 8000f60:	20000210 	.word	0x20000210

08000f64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b094      	sub	sp, #80	; 0x50
 8000f68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f6a:	f107 0320 	add.w	r3, r7, #32
 8000f6e:	2230      	movs	r2, #48	; 0x30
 8000f70:	2100      	movs	r1, #0
 8000f72:	4618      	mov	r0, r3
 8000f74:	f006 fe43 	bl	8007bfe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f78:	f107 030c 	add.w	r3, r7, #12
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60bb      	str	r3, [r7, #8]
 8000f8c:	4a27      	ldr	r2, [pc, #156]	; (800102c <SystemClock_Config+0xc8>)
 8000f8e:	4b27      	ldr	r3, [pc, #156]	; (800102c <SystemClock_Config+0xc8>)
 8000f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f96:	6413      	str	r3, [r2, #64]	; 0x40
 8000f98:	4b24      	ldr	r3, [pc, #144]	; (800102c <SystemClock_Config+0xc8>)
 8000f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	607b      	str	r3, [r7, #4]
 8000fa8:	4a21      	ldr	r2, [pc, #132]	; (8001030 <SystemClock_Config+0xcc>)
 8000faa:	4b21      	ldr	r3, [pc, #132]	; (8001030 <SystemClock_Config+0xcc>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb2:	6013      	str	r3, [r2, #0]
 8000fb4:	4b1e      	ldr	r3, [pc, #120]	; (8001030 <SystemClock_Config+0xcc>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fbc:	607b      	str	r3, [r7, #4]
 8000fbe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fd4:	2304      	movs	r3, #4
 8000fd6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000fd8:	2348      	movs	r3, #72	; 0x48
 8000fda:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe4:	f107 0320 	add.w	r3, r7, #32
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f001 fef5 	bl	8002dd8 <HAL_RCC_OscConfig>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ff4:	f000 f91a 	bl	800122c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ff8:	230f      	movs	r3, #15
 8000ffa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001004:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001008:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800100a:	2300      	movs	r3, #0
 800100c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800100e:	f107 030c 	add.w	r3, r7, #12
 8001012:	2102      	movs	r1, #2
 8001014:	4618      	mov	r0, r3
 8001016:	f002 f94f 	bl	80032b8 <HAL_RCC_ClockConfig>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001020:	f000 f904 	bl	800122c <Error_Handler>
  }
}
 8001024:	bf00      	nop
 8001026:	3750      	adds	r7, #80	; 0x50
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40023800 	.word	0x40023800
 8001030:	40007000 	.word	0x40007000

08001034 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b096      	sub	sp, #88	; 0x58
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800103a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
 8001046:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001048:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001052:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	609a      	str	r2, [r3, #8]
 800105e:	60da      	str	r2, [r3, #12]
 8001060:	611a      	str	r2, [r3, #16]
 8001062:	615a      	str	r2, [r3, #20]
 8001064:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001066:	1d3b      	adds	r3, r7, #4
 8001068:	2220      	movs	r2, #32
 800106a:	2100      	movs	r1, #0
 800106c:	4618      	mov	r0, r3
 800106e:	f006 fdc6 	bl	8007bfe <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001072:	4b51      	ldr	r3, [pc, #324]	; (80011b8 <MX_TIM1_Init+0x184>)
 8001074:	4a51      	ldr	r2, [pc, #324]	; (80011bc <MX_TIM1_Init+0x188>)
 8001076:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 360;
 8001078:	4b4f      	ldr	r3, [pc, #316]	; (80011b8 <MX_TIM1_Init+0x184>)
 800107a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800107e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001080:	4b4d      	ldr	r3, [pc, #308]	; (80011b8 <MX_TIM1_Init+0x184>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 8001086:	4b4c      	ldr	r3, [pc, #304]	; (80011b8 <MX_TIM1_Init+0x184>)
 8001088:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800108c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800108e:	4b4a      	ldr	r3, [pc, #296]	; (80011b8 <MX_TIM1_Init+0x184>)
 8001090:	2200      	movs	r2, #0
 8001092:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001094:	4b48      	ldr	r3, [pc, #288]	; (80011b8 <MX_TIM1_Init+0x184>)
 8001096:	2200      	movs	r2, #0
 8001098:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800109a:	4b47      	ldr	r3, [pc, #284]	; (80011b8 <MX_TIM1_Init+0x184>)
 800109c:	2200      	movs	r2, #0
 800109e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010a0:	4845      	ldr	r0, [pc, #276]	; (80011b8 <MX_TIM1_Init+0x184>)
 80010a2:	f002 fad3 	bl	800364c <HAL_TIM_Base_Init>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80010ac:	f000 f8be 	bl	800122c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010b4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010ba:	4619      	mov	r1, r3
 80010bc:	483e      	ldr	r0, [pc, #248]	; (80011b8 <MX_TIM1_Init+0x184>)
 80010be:	f002 fc29 	bl	8003914 <HAL_TIM_ConfigClockSource>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80010c8:	f000 f8b0 	bl	800122c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010cc:	483a      	ldr	r0, [pc, #232]	; (80011b8 <MX_TIM1_Init+0x184>)
 80010ce:	f002 fae8 	bl	80036a2 <HAL_TIM_PWM_Init>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80010d8:	f000 f8a8 	bl	800122c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010dc:	2300      	movs	r3, #0
 80010de:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010e0:	2300      	movs	r3, #0
 80010e2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010e8:	4619      	mov	r1, r3
 80010ea:	4833      	ldr	r0, [pc, #204]	; (80011b8 <MX_TIM1_Init+0x184>)
 80010ec:	f002 ffda 	bl	80040a4 <HAL_TIMEx_MasterConfigSynchronization>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80010f6:	f000 f899 	bl	800122c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010fa:	2360      	movs	r3, #96	; 0x60
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 50;
 80010fe:	2332      	movs	r3, #50	; 0x32
 8001100:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001102:	2300      	movs	r3, #0
 8001104:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001106:	2300      	movs	r3, #0
 8001108:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800110a:	2300      	movs	r3, #0
 800110c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800110e:	2300      	movs	r3, #0
 8001110:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001112:	2300      	movs	r3, #0
 8001114:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001116:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800111a:	2200      	movs	r2, #0
 800111c:	4619      	mov	r1, r3
 800111e:	4826      	ldr	r0, [pc, #152]	; (80011b8 <MX_TIM1_Init+0x184>)
 8001120:	f002 fb32 	bl	8003788 <HAL_TIM_PWM_ConfigChannel>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800112a:	f000 f87f 	bl	800122c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800112e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001132:	2204      	movs	r2, #4
 8001134:	4619      	mov	r1, r3
 8001136:	4820      	ldr	r0, [pc, #128]	; (80011b8 <MX_TIM1_Init+0x184>)
 8001138:	f002 fb26 	bl	8003788 <HAL_TIM_PWM_ConfigChannel>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8001142:	f000 f873 	bl	800122c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001146:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800114a:	2208      	movs	r2, #8
 800114c:	4619      	mov	r1, r3
 800114e:	481a      	ldr	r0, [pc, #104]	; (80011b8 <MX_TIM1_Init+0x184>)
 8001150:	f002 fb1a 	bl	8003788 <HAL_TIM_PWM_ConfigChannel>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800115a:	f000 f867 	bl	800122c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800115e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001162:	220c      	movs	r2, #12
 8001164:	4619      	mov	r1, r3
 8001166:	4814      	ldr	r0, [pc, #80]	; (80011b8 <MX_TIM1_Init+0x184>)
 8001168:	f002 fb0e 	bl	8003788 <HAL_TIM_PWM_ConfigChannel>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001172:	f000 f85b 	bl	800122c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001176:	2300      	movs	r3, #0
 8001178:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800117a:	2300      	movs	r3, #0
 800117c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800117e:	2300      	movs	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001186:	2300      	movs	r3, #0
 8001188:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800118a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800118e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001190:	2300      	movs	r3, #0
 8001192:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001194:	1d3b      	adds	r3, r7, #4
 8001196:	4619      	mov	r1, r3
 8001198:	4807      	ldr	r0, [pc, #28]	; (80011b8 <MX_TIM1_Init+0x184>)
 800119a:	f002 ffff 	bl	800419c <HAL_TIMEx_ConfigBreakDeadTime>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 80011a4:	f000 f842 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80011a8:	4803      	ldr	r0, [pc, #12]	; (80011b8 <MX_TIM1_Init+0x184>)
 80011aa:	f000 f891 	bl	80012d0 <HAL_TIM_MspPostInit>

}
 80011ae:	bf00      	nop
 80011b0:	3758      	adds	r7, #88	; 0x58
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000218 	.word	0x20000218
 80011bc:	40010000 	.word	0x40010000

080011c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	4a17      	ldr	r2, [pc, #92]	; (8001228 <MX_GPIO_Init+0x68>)
 80011cc:	4b16      	ldr	r3, [pc, #88]	; (8001228 <MX_GPIO_Init+0x68>)
 80011ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011d4:	6313      	str	r3, [r2, #48]	; 0x30
 80011d6:	4b14      	ldr	r3, [pc, #80]	; (8001228 <MX_GPIO_Init+0x68>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	4a10      	ldr	r2, [pc, #64]	; (8001228 <MX_GPIO_Init+0x68>)
 80011e8:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <MX_GPIO_Init+0x68>)
 80011ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ec:	f043 0310 	orr.w	r3, r3, #16
 80011f0:	6313      	str	r3, [r2, #48]	; 0x30
 80011f2:	4b0d      	ldr	r3, [pc, #52]	; (8001228 <MX_GPIO_Init+0x68>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	f003 0310 	and.w	r3, r3, #16
 80011fa:	60bb      	str	r3, [r7, #8]
 80011fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	607b      	str	r3, [r7, #4]
 8001202:	4a09      	ldr	r2, [pc, #36]	; (8001228 <MX_GPIO_Init+0x68>)
 8001204:	4b08      	ldr	r3, [pc, #32]	; (8001228 <MX_GPIO_Init+0x68>)
 8001206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	6313      	str	r3, [r2, #48]	; 0x30
 800120e:	4b06      	ldr	r3, [pc, #24]	; (8001228 <MX_GPIO_Init+0x68>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	687b      	ldr	r3, [r7, #4]

}
 800121a:	bf00      	nop
 800121c:	3714      	adds	r7, #20
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	40023800 	.word	0x40023800

0800122c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
	...

0800123c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	607b      	str	r3, [r7, #4]
 8001246:	4a10      	ldr	r2, [pc, #64]	; (8001288 <HAL_MspInit+0x4c>)
 8001248:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <HAL_MspInit+0x4c>)
 800124a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001250:	6453      	str	r3, [r2, #68]	; 0x44
 8001252:	4b0d      	ldr	r3, [pc, #52]	; (8001288 <HAL_MspInit+0x4c>)
 8001254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001256:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	603b      	str	r3, [r7, #0]
 8001262:	4a09      	ldr	r2, [pc, #36]	; (8001288 <HAL_MspInit+0x4c>)
 8001264:	4b08      	ldr	r3, [pc, #32]	; (8001288 <HAL_MspInit+0x4c>)
 8001266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800126c:	6413      	str	r3, [r2, #64]	; 0x40
 800126e:	4b06      	ldr	r3, [pc, #24]	; (8001288 <HAL_MspInit+0x4c>)
 8001270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001276:	603b      	str	r3, [r7, #0]
 8001278:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	40023800 	.word	0x40023800

0800128c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a0b      	ldr	r2, [pc, #44]	; (80012c8 <HAL_TIM_Base_MspInit+0x3c>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d10d      	bne.n	80012ba <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	4a0a      	ldr	r2, [pc, #40]	; (80012cc <HAL_TIM_Base_MspInit+0x40>)
 80012a4:	4b09      	ldr	r3, [pc, #36]	; (80012cc <HAL_TIM_Base_MspInit+0x40>)
 80012a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	6453      	str	r3, [r2, #68]	; 0x44
 80012ae:	4b07      	ldr	r3, [pc, #28]	; (80012cc <HAL_TIM_Base_MspInit+0x40>)
 80012b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80012ba:	bf00      	nop
 80012bc:	3714      	adds	r7, #20
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	40010000 	.word	0x40010000
 80012cc:	40023800 	.word	0x40023800

080012d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b088      	sub	sp, #32
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d8:	f107 030c 	add.w	r3, r7, #12
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a12      	ldr	r2, [pc, #72]	; (8001338 <HAL_TIM_MspPostInit+0x68>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d11e      	bne.n	8001330 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	60bb      	str	r3, [r7, #8]
 80012f6:	4a11      	ldr	r2, [pc, #68]	; (800133c <HAL_TIM_MspPostInit+0x6c>)
 80012f8:	4b10      	ldr	r3, [pc, #64]	; (800133c <HAL_TIM_MspPostInit+0x6c>)
 80012fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fc:	f043 0310 	orr.w	r3, r3, #16
 8001300:	6313      	str	r3, [r2, #48]	; 0x30
 8001302:	4b0e      	ldr	r3, [pc, #56]	; (800133c <HAL_TIM_MspPostInit+0x6c>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	f003 0310 	and.w	r3, r3, #16
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 800130e:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8001312:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001314:	2302      	movs	r3, #2
 8001316:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131c:	2300      	movs	r3, #0
 800131e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001320:	2301      	movs	r3, #1
 8001322:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001324:	f107 030c 	add.w	r3, r7, #12
 8001328:	4619      	mov	r1, r3
 800132a:	4805      	ldr	r0, [pc, #20]	; (8001340 <HAL_TIM_MspPostInit+0x70>)
 800132c:	f000 fa28 	bl	8001780 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001330:	bf00      	nop
 8001332:	3720      	adds	r7, #32
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40010000 	.word	0x40010000
 800133c:	40023800 	.word	0x40023800
 8001340:	40021000 	.word	0x40021000

08001344 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr

08001352 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001356:	e7fe      	b.n	8001356 <HardFault_Handler+0x4>

08001358 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800135c:	e7fe      	b.n	800135c <MemManage_Handler+0x4>

0800135e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001362:	e7fe      	b.n	8001362 <BusFault_Handler+0x4>

08001364 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001368:	e7fe      	b.n	8001368 <UsageFault_Handler+0x4>

0800136a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001386:	b480      	push	{r7}
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001398:	f000 f8a0 	bl	80014dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800139c:	bf00      	nop
 800139e:	bd80      	pop	{r7, pc}

080013a0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80013a4:	4802      	ldr	r0, [pc, #8]	; (80013b0 <OTG_FS_IRQHandler+0x10>)
 80013a6:	f000 fcd5 	bl	8001d54 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	2000172c 	.word	0x2000172c

080013b4 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80013bc:	4b11      	ldr	r3, [pc, #68]	; (8001404 <_sbrk+0x50>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d102      	bne.n	80013ca <_sbrk+0x16>
		heap_end = &end;
 80013c4:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <_sbrk+0x50>)
 80013c6:	4a10      	ldr	r2, [pc, #64]	; (8001408 <_sbrk+0x54>)
 80013c8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80013ca:	4b0e      	ldr	r3, [pc, #56]	; (8001404 <_sbrk+0x50>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80013d0:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <_sbrk+0x50>)
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4413      	add	r3, r2
 80013d8:	466a      	mov	r2, sp
 80013da:	4293      	cmp	r3, r2
 80013dc:	d907      	bls.n	80013ee <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80013de:	f006 fbc9 	bl	8007b74 <__errno>
 80013e2:	4602      	mov	r2, r0
 80013e4:	230c      	movs	r3, #12
 80013e6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80013e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013ec:	e006      	b.n	80013fc <_sbrk+0x48>
	}

	heap_end += incr;
 80013ee:	4b05      	ldr	r3, [pc, #20]	; (8001404 <_sbrk+0x50>)
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4413      	add	r3, r2
 80013f6:	4a03      	ldr	r2, [pc, #12]	; (8001404 <_sbrk+0x50>)
 80013f8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80013fa:	68fb      	ldr	r3, [r7, #12]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3710      	adds	r7, #16
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	20000200 	.word	0x20000200
 8001408:	20001b38 	.word	0x20001b38

0800140c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001410:	4a08      	ldr	r2, [pc, #32]	; (8001434 <SystemInit+0x28>)
 8001412:	4b08      	ldr	r3, [pc, #32]	; (8001434 <SystemInit+0x28>)
 8001414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001418:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800141c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001420:	4b04      	ldr	r3, [pc, #16]	; (8001434 <SystemInit+0x28>)
 8001422:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001426:	609a      	str	r2, [r3, #8]
#endif
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	e000ed00 	.word	0xe000ed00

08001438 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800143c:	4a0e      	ldr	r2, [pc, #56]	; (8001478 <HAL_Init+0x40>)
 800143e:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <HAL_Init+0x40>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001446:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001448:	4a0b      	ldr	r2, [pc, #44]	; (8001478 <HAL_Init+0x40>)
 800144a:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <HAL_Init+0x40>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001452:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001454:	4a08      	ldr	r2, [pc, #32]	; (8001478 <HAL_Init+0x40>)
 8001456:	4b08      	ldr	r3, [pc, #32]	; (8001478 <HAL_Init+0x40>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800145e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001460:	2003      	movs	r0, #3
 8001462:	f000 f94b 	bl	80016fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001466:	2000      	movs	r0, #0
 8001468:	f000 f808 	bl	800147c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800146c:	f7ff fee6 	bl	800123c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40023c00 	.word	0x40023c00

0800147c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001484:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <HAL_InitTick+0x54>)
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <HAL_InitTick+0x58>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	4619      	mov	r1, r3
 800148e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001492:	fbb3 f3f1 	udiv	r3, r3, r1
 8001496:	fbb2 f3f3 	udiv	r3, r2, r3
 800149a:	4618      	mov	r0, r3
 800149c:	f000 f963 	bl	8001766 <HAL_SYSTICK_Config>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e00e      	b.n	80014c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2b0f      	cmp	r3, #15
 80014ae:	d80a      	bhi.n	80014c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014b0:	2200      	movs	r2, #0
 80014b2:	6879      	ldr	r1, [r7, #4]
 80014b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014b8:	f000 f92b 	bl	8001712 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014bc:	4a06      	ldr	r2, [pc, #24]	; (80014d8 <HAL_InitTick+0x5c>)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014c2:	2300      	movs	r3, #0
 80014c4:	e000      	b.n	80014c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	20000000 	.word	0x20000000
 80014d4:	20000008 	.word	0x20000008
 80014d8:	20000004 	.word	0x20000004

080014dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014e0:	4b06      	ldr	r3, [pc, #24]	; (80014fc <HAL_IncTick+0x20>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	461a      	mov	r2, r3
 80014e6:	4b06      	ldr	r3, [pc, #24]	; (8001500 <HAL_IncTick+0x24>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4413      	add	r3, r2
 80014ec:	4a04      	ldr	r2, [pc, #16]	; (8001500 <HAL_IncTick+0x24>)
 80014ee:	6013      	str	r3, [r2, #0]
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	20000008 	.word	0x20000008
 8001500:	20000258 	.word	0x20000258

08001504 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  return uwTick;
 8001508:	4b03      	ldr	r3, [pc, #12]	; (8001518 <HAL_GetTick+0x14>)
 800150a:	681b      	ldr	r3, [r3, #0]
}
 800150c:	4618      	mov	r0, r3
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	20000258 	.word	0x20000258

0800151c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001524:	f7ff ffee 	bl	8001504 <HAL_GetTick>
 8001528:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001534:	d005      	beq.n	8001542 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001536:	4b09      	ldr	r3, [pc, #36]	; (800155c <HAL_Delay+0x40>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	461a      	mov	r2, r3
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	4413      	add	r3, r2
 8001540:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001542:	bf00      	nop
 8001544:	f7ff ffde 	bl	8001504 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	1ad2      	subs	r2, r2, r3
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	429a      	cmp	r2, r3
 8001552:	d3f7      	bcc.n	8001544 <HAL_Delay+0x28>
  {
  }
}
 8001554:	bf00      	nop
 8001556:	3710      	adds	r7, #16
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	20000008 	.word	0x20000008

08001560 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f003 0307 	and.w	r3, r3, #7
 800156e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001570:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001576:	68ba      	ldr	r2, [r7, #8]
 8001578:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800157c:	4013      	ands	r3, r2
 800157e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001588:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800158c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001590:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001592:	4a04      	ldr	r2, [pc, #16]	; (80015a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	60d3      	str	r3, [r2, #12]
}
 8001598:	bf00      	nop
 800159a:	3714      	adds	r7, #20
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	e000ed00 	.word	0xe000ed00

080015a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015ac:	4b04      	ldr	r3, [pc, #16]	; (80015c0 <__NVIC_GetPriorityGrouping+0x18>)
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	0a1b      	lsrs	r3, r3, #8
 80015b2:	f003 0307 	and.w	r3, r3, #7
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	db0b      	blt.n	80015ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015d6:	4909      	ldr	r1, [pc, #36]	; (80015fc <__NVIC_EnableIRQ+0x38>)
 80015d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015dc:	095b      	lsrs	r3, r3, #5
 80015de:	79fa      	ldrb	r2, [r7, #7]
 80015e0:	f002 021f 	and.w	r2, r2, #31
 80015e4:	2001      	movs	r0, #1
 80015e6:	fa00 f202 	lsl.w	r2, r0, r2
 80015ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	e000e100 	.word	0xe000e100

08001600 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	6039      	str	r1, [r7, #0]
 800160a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800160c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001610:	2b00      	cmp	r3, #0
 8001612:	db0a      	blt.n	800162a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001614:	490d      	ldr	r1, [pc, #52]	; (800164c <__NVIC_SetPriority+0x4c>)
 8001616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161a:	683a      	ldr	r2, [r7, #0]
 800161c:	b2d2      	uxtb	r2, r2
 800161e:	0112      	lsls	r2, r2, #4
 8001620:	b2d2      	uxtb	r2, r2
 8001622:	440b      	add	r3, r1
 8001624:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001628:	e00a      	b.n	8001640 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800162a:	4909      	ldr	r1, [pc, #36]	; (8001650 <__NVIC_SetPriority+0x50>)
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	f003 030f 	and.w	r3, r3, #15
 8001632:	3b04      	subs	r3, #4
 8001634:	683a      	ldr	r2, [r7, #0]
 8001636:	b2d2      	uxtb	r2, r2
 8001638:	0112      	lsls	r2, r2, #4
 800163a:	b2d2      	uxtb	r2, r2
 800163c:	440b      	add	r3, r1
 800163e:	761a      	strb	r2, [r3, #24]
}
 8001640:	bf00      	nop
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	e000e100 	.word	0xe000e100
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001654:	b480      	push	{r7}
 8001656:	b089      	sub	sp, #36	; 0x24
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	f1c3 0307 	rsb	r3, r3, #7
 800166e:	2b04      	cmp	r3, #4
 8001670:	bf28      	it	cs
 8001672:	2304      	movcs	r3, #4
 8001674:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	3304      	adds	r3, #4
 800167a:	2b06      	cmp	r3, #6
 800167c:	d902      	bls.n	8001684 <NVIC_EncodePriority+0x30>
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	3b03      	subs	r3, #3
 8001682:	e000      	b.n	8001686 <NVIC_EncodePriority+0x32>
 8001684:	2300      	movs	r3, #0
 8001686:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001688:	2201      	movs	r2, #1
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	1e5a      	subs	r2, r3, #1
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	401a      	ands	r2, r3
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800169a:	2101      	movs	r1, #1
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	fa01 f303 	lsl.w	r3, r1, r3
 80016a2:	1e59      	subs	r1, r3, #1
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a8:	4313      	orrs	r3, r2
         );
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3724      	adds	r7, #36	; 0x24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
	...

080016b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3b01      	subs	r3, #1
 80016c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016c8:	d301      	bcc.n	80016ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ca:	2301      	movs	r3, #1
 80016cc:	e00f      	b.n	80016ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ce:	4a0a      	ldr	r2, [pc, #40]	; (80016f8 <SysTick_Config+0x40>)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3b01      	subs	r3, #1
 80016d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016d6:	210f      	movs	r1, #15
 80016d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016dc:	f7ff ff90 	bl	8001600 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016e0:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <SysTick_Config+0x40>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016e6:	4b04      	ldr	r3, [pc, #16]	; (80016f8 <SysTick_Config+0x40>)
 80016e8:	2207      	movs	r2, #7
 80016ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	e000e010 	.word	0xe000e010

080016fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7ff ff2b 	bl	8001560 <__NVIC_SetPriorityGrouping>
}
 800170a:	bf00      	nop
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001712:	b580      	push	{r7, lr}
 8001714:	b086      	sub	sp, #24
 8001716:	af00      	add	r7, sp, #0
 8001718:	4603      	mov	r3, r0
 800171a:	60b9      	str	r1, [r7, #8]
 800171c:	607a      	str	r2, [r7, #4]
 800171e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001720:	2300      	movs	r3, #0
 8001722:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001724:	f7ff ff40 	bl	80015a8 <__NVIC_GetPriorityGrouping>
 8001728:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	68b9      	ldr	r1, [r7, #8]
 800172e:	6978      	ldr	r0, [r7, #20]
 8001730:	f7ff ff90 	bl	8001654 <NVIC_EncodePriority>
 8001734:	4602      	mov	r2, r0
 8001736:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800173a:	4611      	mov	r1, r2
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff ff5f 	bl	8001600 <__NVIC_SetPriority>
}
 8001742:	bf00      	nop
 8001744:	3718      	adds	r7, #24
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b082      	sub	sp, #8
 800174e:	af00      	add	r7, sp, #0
 8001750:	4603      	mov	r3, r0
 8001752:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff ff33 	bl	80015c4 <__NVIC_EnableIRQ>
}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b082      	sub	sp, #8
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f7ff ffa2 	bl	80016b8 <SysTick_Config>
 8001774:	4603      	mov	r3, r0
}
 8001776:	4618      	mov	r0, r3
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
	...

08001780 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001780:	b480      	push	{r7}
 8001782:	b089      	sub	sp, #36	; 0x24
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800178a:	2300      	movs	r3, #0
 800178c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800178e:	2300      	movs	r3, #0
 8001790:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001792:	2300      	movs	r3, #0
 8001794:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001796:	2300      	movs	r3, #0
 8001798:	61fb      	str	r3, [r7, #28]
 800179a:	e16b      	b.n	8001a74 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800179c:	2201      	movs	r2, #1
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	4013      	ands	r3, r2
 80017ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	f040 815a 	bne.w	8001a6e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d00b      	beq.n	80017da <HAL_GPIO_Init+0x5a>
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d007      	beq.n	80017da <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017ce:	2b11      	cmp	r3, #17
 80017d0:	d003      	beq.n	80017da <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2b12      	cmp	r3, #18
 80017d8:	d130      	bne.n	800183c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	2203      	movs	r2, #3
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	43db      	mvns	r3, r3
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	4013      	ands	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	68da      	ldr	r2, [r3, #12]
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	4313      	orrs	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001810:	2201      	movs	r2, #1
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	43db      	mvns	r3, r3
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	4013      	ands	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	091b      	lsrs	r3, r3, #4
 8001826:	f003 0201 	and.w	r2, r3, #1
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	4313      	orrs	r3, r2
 8001834:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	2203      	movs	r2, #3
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	43db      	mvns	r3, r3
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	4013      	ands	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	689a      	ldr	r2, [r3, #8]
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	4313      	orrs	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	2b02      	cmp	r3, #2
 8001872:	d003      	beq.n	800187c <HAL_GPIO_Init+0xfc>
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	2b12      	cmp	r3, #18
 800187a:	d123      	bne.n	80018c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	08da      	lsrs	r2, r3, #3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	3208      	adds	r2, #8
 8001884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001888:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	f003 0307 	and.w	r3, r3, #7
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	220f      	movs	r2, #15
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	43db      	mvns	r3, r3
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	4013      	ands	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	691a      	ldr	r2, [r3, #16]
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	08da      	lsrs	r2, r3, #3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	3208      	adds	r2, #8
 80018be:	69b9      	ldr	r1, [r7, #24]
 80018c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	2203      	movs	r2, #3
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	43db      	mvns	r3, r3
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	4013      	ands	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f003 0203 	and.w	r2, r3, #3
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001900:	2b00      	cmp	r3, #0
 8001902:	f000 80b4 	beq.w	8001a6e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	4a5f      	ldr	r2, [pc, #380]	; (8001a88 <HAL_GPIO_Init+0x308>)
 800190c:	4b5e      	ldr	r3, [pc, #376]	; (8001a88 <HAL_GPIO_Init+0x308>)
 800190e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001910:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001914:	6453      	str	r3, [r2, #68]	; 0x44
 8001916:	4b5c      	ldr	r3, [pc, #368]	; (8001a88 <HAL_GPIO_Init+0x308>)
 8001918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001922:	4a5a      	ldr	r2, [pc, #360]	; (8001a8c <HAL_GPIO_Init+0x30c>)
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	089b      	lsrs	r3, r3, #2
 8001928:	3302      	adds	r3, #2
 800192a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800192e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	f003 0303 	and.w	r3, r3, #3
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	220f      	movs	r2, #15
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	43db      	mvns	r3, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4013      	ands	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a51      	ldr	r2, [pc, #324]	; (8001a90 <HAL_GPIO_Init+0x310>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d02b      	beq.n	80019a6 <HAL_GPIO_Init+0x226>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a50      	ldr	r2, [pc, #320]	; (8001a94 <HAL_GPIO_Init+0x314>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d025      	beq.n	80019a2 <HAL_GPIO_Init+0x222>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a4f      	ldr	r2, [pc, #316]	; (8001a98 <HAL_GPIO_Init+0x318>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d01f      	beq.n	800199e <HAL_GPIO_Init+0x21e>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a4e      	ldr	r2, [pc, #312]	; (8001a9c <HAL_GPIO_Init+0x31c>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d019      	beq.n	800199a <HAL_GPIO_Init+0x21a>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a4d      	ldr	r2, [pc, #308]	; (8001aa0 <HAL_GPIO_Init+0x320>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d013      	beq.n	8001996 <HAL_GPIO_Init+0x216>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a4c      	ldr	r2, [pc, #304]	; (8001aa4 <HAL_GPIO_Init+0x324>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d00d      	beq.n	8001992 <HAL_GPIO_Init+0x212>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a4b      	ldr	r2, [pc, #300]	; (8001aa8 <HAL_GPIO_Init+0x328>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d007      	beq.n	800198e <HAL_GPIO_Init+0x20e>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a4a      	ldr	r2, [pc, #296]	; (8001aac <HAL_GPIO_Init+0x32c>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d101      	bne.n	800198a <HAL_GPIO_Init+0x20a>
 8001986:	2307      	movs	r3, #7
 8001988:	e00e      	b.n	80019a8 <HAL_GPIO_Init+0x228>
 800198a:	2308      	movs	r3, #8
 800198c:	e00c      	b.n	80019a8 <HAL_GPIO_Init+0x228>
 800198e:	2306      	movs	r3, #6
 8001990:	e00a      	b.n	80019a8 <HAL_GPIO_Init+0x228>
 8001992:	2305      	movs	r3, #5
 8001994:	e008      	b.n	80019a8 <HAL_GPIO_Init+0x228>
 8001996:	2304      	movs	r3, #4
 8001998:	e006      	b.n	80019a8 <HAL_GPIO_Init+0x228>
 800199a:	2303      	movs	r3, #3
 800199c:	e004      	b.n	80019a8 <HAL_GPIO_Init+0x228>
 800199e:	2302      	movs	r3, #2
 80019a0:	e002      	b.n	80019a8 <HAL_GPIO_Init+0x228>
 80019a2:	2301      	movs	r3, #1
 80019a4:	e000      	b.n	80019a8 <HAL_GPIO_Init+0x228>
 80019a6:	2300      	movs	r3, #0
 80019a8:	69fa      	ldr	r2, [r7, #28]
 80019aa:	f002 0203 	and.w	r2, r2, #3
 80019ae:	0092      	lsls	r2, r2, #2
 80019b0:	4093      	lsls	r3, r2
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019b8:	4934      	ldr	r1, [pc, #208]	; (8001a8c <HAL_GPIO_Init+0x30c>)
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	089b      	lsrs	r3, r3, #2
 80019be:	3302      	adds	r3, #2
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019c6:	4b3a      	ldr	r3, [pc, #232]	; (8001ab0 <HAL_GPIO_Init+0x330>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	43db      	mvns	r3, r3
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	4013      	ands	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d003      	beq.n	80019ea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019ea:	4a31      	ldr	r2, [pc, #196]	; (8001ab0 <HAL_GPIO_Init+0x330>)
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80019f0:	4b2f      	ldr	r3, [pc, #188]	; (8001ab0 <HAL_GPIO_Init+0x330>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	43db      	mvns	r3, r3
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	4013      	ands	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d003      	beq.n	8001a14 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a14:	4a26      	ldr	r2, [pc, #152]	; (8001ab0 <HAL_GPIO_Init+0x330>)
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a1a:	4b25      	ldr	r3, [pc, #148]	; (8001ab0 <HAL_GPIO_Init+0x330>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	43db      	mvns	r3, r3
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	4013      	ands	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d003      	beq.n	8001a3e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a3e:	4a1c      	ldr	r2, [pc, #112]	; (8001ab0 <HAL_GPIO_Init+0x330>)
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a44:	4b1a      	ldr	r3, [pc, #104]	; (8001ab0 <HAL_GPIO_Init+0x330>)
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	4013      	ands	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d003      	beq.n	8001a68 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a68:	4a11      	ldr	r2, [pc, #68]	; (8001ab0 <HAL_GPIO_Init+0x330>)
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	3301      	adds	r3, #1
 8001a72:	61fb      	str	r3, [r7, #28]
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	2b0f      	cmp	r3, #15
 8001a78:	f67f ae90 	bls.w	800179c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a7c:	bf00      	nop
 8001a7e:	3724      	adds	r7, #36	; 0x24
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	40013800 	.word	0x40013800
 8001a90:	40020000 	.word	0x40020000
 8001a94:	40020400 	.word	0x40020400
 8001a98:	40020800 	.word	0x40020800
 8001a9c:	40020c00 	.word	0x40020c00
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	40021400 	.word	0x40021400
 8001aa8:	40021800 	.word	0x40021800
 8001aac:	40021c00 	.word	0x40021c00
 8001ab0:	40013c00 	.word	0x40013c00

08001ab4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ab6:	b08f      	sub	sp, #60	; 0x3c
 8001ab8:	af0a      	add	r7, sp, #40	; 0x28
 8001aba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d101      	bne.n	8001ac6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e10f      	b.n	8001ce6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d106      	bne.n	8001ae6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f005 fd1f 	bl	8007524 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2203      	movs	r2, #3
 8001aea:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d102      	bne.n	8001b00 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f002 fcb0 	bl	800446a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	603b      	str	r3, [r7, #0]
 8001b10:	687e      	ldr	r6, [r7, #4]
 8001b12:	466d      	mov	r5, sp
 8001b14:	f106 0410 	add.w	r4, r6, #16
 8001b18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b20:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b24:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b28:	1d33      	adds	r3, r6, #4
 8001b2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b2c:	6838      	ldr	r0, [r7, #0]
 8001b2e:	f002 fb87 	bl	8004240 <USB_CoreInit>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d005      	beq.n	8001b44 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e0d0      	b.n	8001ce6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2100      	movs	r1, #0
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f002 fc9e 	bl	800448c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b50:	2300      	movs	r3, #0
 8001b52:	73fb      	strb	r3, [r7, #15]
 8001b54:	e04a      	b.n	8001bec <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b56:	7bfa      	ldrb	r2, [r7, #15]
 8001b58:	6879      	ldr	r1, [r7, #4]
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	00db      	lsls	r3, r3, #3
 8001b5e:	1a9b      	subs	r3, r3, r2
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	440b      	add	r3, r1
 8001b64:	333d      	adds	r3, #61	; 0x3d
 8001b66:	2201      	movs	r2, #1
 8001b68:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b6a:	7bfa      	ldrb	r2, [r7, #15]
 8001b6c:	6879      	ldr	r1, [r7, #4]
 8001b6e:	4613      	mov	r3, r2
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	1a9b      	subs	r3, r3, r2
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	440b      	add	r3, r1
 8001b78:	333c      	adds	r3, #60	; 0x3c
 8001b7a:	7bfa      	ldrb	r2, [r7, #15]
 8001b7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b7e:	7bfa      	ldrb	r2, [r7, #15]
 8001b80:	7bfb      	ldrb	r3, [r7, #15]
 8001b82:	b298      	uxth	r0, r3
 8001b84:	6879      	ldr	r1, [r7, #4]
 8001b86:	4613      	mov	r3, r2
 8001b88:	00db      	lsls	r3, r3, #3
 8001b8a:	1a9b      	subs	r3, r3, r2
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	440b      	add	r3, r1
 8001b90:	3342      	adds	r3, #66	; 0x42
 8001b92:	4602      	mov	r2, r0
 8001b94:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b96:	7bfa      	ldrb	r2, [r7, #15]
 8001b98:	6879      	ldr	r1, [r7, #4]
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	00db      	lsls	r3, r3, #3
 8001b9e:	1a9b      	subs	r3, r3, r2
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	440b      	add	r3, r1
 8001ba4:	333f      	adds	r3, #63	; 0x3f
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001baa:	7bfa      	ldrb	r2, [r7, #15]
 8001bac:	6879      	ldr	r1, [r7, #4]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	00db      	lsls	r3, r3, #3
 8001bb2:	1a9b      	subs	r3, r3, r2
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	440b      	add	r3, r1
 8001bb8:	3344      	adds	r3, #68	; 0x44
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001bbe:	7bfa      	ldrb	r2, [r7, #15]
 8001bc0:	6879      	ldr	r1, [r7, #4]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	00db      	lsls	r3, r3, #3
 8001bc6:	1a9b      	subs	r3, r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	440b      	add	r3, r1
 8001bcc:	3348      	adds	r3, #72	; 0x48
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001bd2:	7bfa      	ldrb	r2, [r7, #15]
 8001bd4:	6879      	ldr	r1, [r7, #4]
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	1a9b      	subs	r3, r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	440b      	add	r3, r1
 8001be0:	3350      	adds	r3, #80	; 0x50
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001be6:	7bfb      	ldrb	r3, [r7, #15]
 8001be8:	3301      	adds	r3, #1
 8001bea:	73fb      	strb	r3, [r7, #15]
 8001bec:	7bfa      	ldrb	r2, [r7, #15]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d3af      	bcc.n	8001b56 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	73fb      	strb	r3, [r7, #15]
 8001bfa:	e044      	b.n	8001c86 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001bfc:	7bfa      	ldrb	r2, [r7, #15]
 8001bfe:	6879      	ldr	r1, [r7, #4]
 8001c00:	4613      	mov	r3, r2
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	1a9b      	subs	r3, r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	440b      	add	r3, r1
 8001c0a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001c0e:	2200      	movs	r2, #0
 8001c10:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c12:	7bfa      	ldrb	r2, [r7, #15]
 8001c14:	6879      	ldr	r1, [r7, #4]
 8001c16:	4613      	mov	r3, r2
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	1a9b      	subs	r3, r3, r2
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	440b      	add	r3, r1
 8001c20:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001c24:	7bfa      	ldrb	r2, [r7, #15]
 8001c26:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c28:	7bfa      	ldrb	r2, [r7, #15]
 8001c2a:	6879      	ldr	r1, [r7, #4]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	1a9b      	subs	r3, r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	440b      	add	r3, r1
 8001c36:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c3e:	7bfa      	ldrb	r2, [r7, #15]
 8001c40:	6879      	ldr	r1, [r7, #4]
 8001c42:	4613      	mov	r3, r2
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	1a9b      	subs	r3, r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	440b      	add	r3, r1
 8001c4c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c54:	7bfa      	ldrb	r2, [r7, #15]
 8001c56:	6879      	ldr	r1, [r7, #4]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	1a9b      	subs	r3, r3, r2
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	440b      	add	r3, r1
 8001c62:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c6a:	7bfa      	ldrb	r2, [r7, #15]
 8001c6c:	6879      	ldr	r1, [r7, #4]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	00db      	lsls	r3, r3, #3
 8001c72:	1a9b      	subs	r3, r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	440b      	add	r3, r1
 8001c78:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c80:	7bfb      	ldrb	r3, [r7, #15]
 8001c82:	3301      	adds	r3, #1
 8001c84:	73fb      	strb	r3, [r7, #15]
 8001c86:	7bfa      	ldrb	r2, [r7, #15]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d3b5      	bcc.n	8001bfc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	603b      	str	r3, [r7, #0]
 8001c96:	687e      	ldr	r6, [r7, #4]
 8001c98:	466d      	mov	r5, sp
 8001c9a:	f106 0410 	add.w	r4, r6, #16
 8001c9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ca0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ca2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ca4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ca6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001caa:	e885 0003 	stmia.w	r5, {r0, r1}
 8001cae:	1d33      	adds	r3, r6, #4
 8001cb0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cb2:	6838      	ldr	r0, [r7, #0]
 8001cb4:	f002 fc14 	bl	80044e0 <USB_DevInit>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d005      	beq.n	8001cca <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2202      	movs	r2, #2
 8001cc2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e00d      	b.n	8001ce6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f003 fc94 	bl	800560c <USB_DevDisconnect>

  return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3714      	adds	r7, #20
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001cee <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b084      	sub	sp, #16
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d101      	bne.n	8001d0a <HAL_PCD_Start+0x1c>
 8001d06:	2302      	movs	r3, #2
 8001d08:	e020      	b.n	8001d4c <HAL_PCD_Start+0x5e>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d109      	bne.n	8001d2e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d005      	beq.n	8001d2e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d26:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f003 fc51 	bl	80055da <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f002 fb83 	bl	8004448 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3710      	adds	r7, #16
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001d54:	b590      	push	{r4, r7, lr}
 8001d56:	b08d      	sub	sp, #52	; 0x34
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d62:	6a3b      	ldr	r3, [r7, #32]
 8001d64:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f003 fcfa 	bl	8005764 <USB_GetMode>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	f040 83aa 	bne.w	80024cc <HAL_PCD_IRQHandler+0x778>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f003 fc5e 	bl	800563e <USB_ReadInterrupts>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	f000 83a0 	beq.w	80024ca <HAL_PCD_IRQHandler+0x776>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f003 fc55 	bl	800563e <USB_ReadInterrupts>
 8001d94:	4603      	mov	r3, r0
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d107      	bne.n	8001dae <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	6812      	ldr	r2, [r2, #0]
 8001da6:	6952      	ldr	r2, [r2, #20]
 8001da8:	f002 0202 	and.w	r2, r2, #2
 8001dac:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f003 fc43 	bl	800563e <USB_ReadInterrupts>
 8001db8:	4603      	mov	r3, r0
 8001dba:	f003 0310 	and.w	r3, r3, #16
 8001dbe:	2b10      	cmp	r3, #16
 8001dc0:	d161      	bne.n	8001e86 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	6812      	ldr	r2, [r2, #0]
 8001dca:	6992      	ldr	r2, [r2, #24]
 8001dcc:	f022 0210 	bic.w	r2, r2, #16
 8001dd0:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001dd2:	6a3b      	ldr	r3, [r7, #32]
 8001dd4:	6a1b      	ldr	r3, [r3, #32]
 8001dd6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	f003 020f 	and.w	r2, r3, #15
 8001dde:	4613      	mov	r3, r2
 8001de0:	00db      	lsls	r3, r3, #3
 8001de2:	1a9b      	subs	r3, r3, r2
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	4413      	add	r3, r2
 8001dee:	3304      	adds	r3, #4
 8001df0:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	0c5b      	lsrs	r3, r3, #17
 8001df6:	f003 030f 	and.w	r3, r3, #15
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d124      	bne.n	8001e48 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001e04:	4013      	ands	r3, r2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d035      	beq.n	8001e76 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	091b      	lsrs	r3, r3, #4
 8001e12:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001e14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	6a38      	ldr	r0, [r7, #32]
 8001e1e:	f003 faaf 	bl	8005380 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	68da      	ldr	r2, [r3, #12]
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	091b      	lsrs	r3, r3, #4
 8001e2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e2e:	441a      	add	r2, r3
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	699a      	ldr	r2, [r3, #24]
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	091b      	lsrs	r3, r3, #4
 8001e3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e40:	441a      	add	r2, r3
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	619a      	str	r2, [r3, #24]
 8001e46:	e016      	b.n	8001e76 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	0c5b      	lsrs	r3, r3, #17
 8001e4c:	f003 030f 	and.w	r3, r3, #15
 8001e50:	2b06      	cmp	r3, #6
 8001e52:	d110      	bne.n	8001e76 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001e5a:	2208      	movs	r2, #8
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	6a38      	ldr	r0, [r7, #32]
 8001e60:	f003 fa8e 	bl	8005380 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	699a      	ldr	r2, [r3, #24]
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	091b      	lsrs	r3, r3, #4
 8001e6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e70:	441a      	add	r2, r3
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	6812      	ldr	r2, [r2, #0]
 8001e7e:	6992      	ldr	r2, [r2, #24]
 8001e80:	f042 0210 	orr.w	r2, r2, #16
 8001e84:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f003 fbd7 	bl	800563e <USB_ReadInterrupts>
 8001e90:	4603      	mov	r3, r0
 8001e92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e96:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001e9a:	d16e      	bne.n	8001f7a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f003 fbdd 	bl	8005664 <USB_ReadDevAllOutEpInterrupt>
 8001eaa:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001eac:	e062      	b.n	8001f74 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eb0:	f003 0301 	and.w	r3, r3, #1
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d057      	beq.n	8001f68 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ebe:	b2d2      	uxtb	r2, r2
 8001ec0:	4611      	mov	r1, r2
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f003 fc02 	bl	80056cc <USB_ReadDevOutEPInterrupt>
 8001ec8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d00c      	beq.n	8001eee <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed6:	015a      	lsls	r2, r3, #5
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	4413      	add	r3, r2
 8001edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001ee6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f000 fdbf 	bl	8002a6c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	f003 0308 	and.w	r3, r3, #8
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d00c      	beq.n	8001f12 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efa:	015a      	lsls	r2, r3, #5
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	4413      	add	r3, r2
 8001f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f04:	461a      	mov	r2, r3
 8001f06:	2308      	movs	r3, #8
 8001f08:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001f0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 feb9 	bl	8002c84 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	f003 0310 	and.w	r3, r3, #16
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d008      	beq.n	8001f2e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1e:	015a      	lsls	r2, r3, #5
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	4413      	add	r3, r2
 8001f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f28:	461a      	mov	r2, r3
 8001f2a:	2310      	movs	r3, #16
 8001f2c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	f003 0320 	and.w	r3, r3, #32
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d008      	beq.n	8001f4a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3a:	015a      	lsls	r2, r3, #5
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	4413      	add	r3, r2
 8001f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f44:	461a      	mov	r2, r3
 8001f46:	2320      	movs	r3, #32
 8001f48:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d009      	beq.n	8001f68 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f56:	015a      	lsls	r2, r3, #5
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f60:	461a      	mov	r2, r3
 8001f62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f66:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f70:	085b      	lsrs	r3, r3, #1
 8001f72:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d199      	bne.n	8001eae <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f003 fb5d 	bl	800563e <USB_ReadInterrupts>
 8001f84:	4603      	mov	r3, r0
 8001f86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f8a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001f8e:	f040 80c1 	bne.w	8002114 <HAL_PCD_IRQHandler+0x3c0>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f003 fb7e 	bl	8005698 <USB_ReadDevAllInEpInterrupt>
 8001f9c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001fa2:	e0b3      	b.n	800210c <HAL_PCD_IRQHandler+0x3b8>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f000 80a8 	beq.w	8002100 <HAL_PCD_IRQHandler+0x3ac>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fb6:	b2d2      	uxtb	r2, r2
 8001fb8:	4611      	mov	r1, r2
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f003 fba4 	bl	8005708 <USB_ReadDevInEPInterrupt>
 8001fc0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	f003 0301 	and.w	r3, r3, #1
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d058      	beq.n	800207e <HAL_PCD_IRQHandler+0x32a>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fce:	f003 030f 	and.w	r3, r3, #15
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fe8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	43db      	mvns	r3, r3
 8001fee:	4013      	ands	r3, r2
 8001ff0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff4:	015a      	lsls	r2, r3, #5
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ffe:	461a      	mov	r2, r3
 8002000:	2301      	movs	r3, #1
 8002002:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d132      	bne.n	8002072 <HAL_PCD_IRQHandler+0x31e>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800200c:	6879      	ldr	r1, [r7, #4]
 800200e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002010:	4613      	mov	r3, r2
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	1a9b      	subs	r3, r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	440b      	add	r3, r1
 800201a:	3348      	adds	r3, #72	; 0x48
 800201c:	6819      	ldr	r1, [r3, #0]
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002022:	4613      	mov	r3, r2
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	1a9b      	subs	r3, r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	4403      	add	r3, r0
 800202c:	3344      	adds	r3, #68	; 0x44
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4419      	add	r1, r3
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002036:	4613      	mov	r3, r2
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	1a9b      	subs	r3, r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	4403      	add	r3, r0
 8002040:	3348      	adds	r3, #72	; 0x48
 8002042:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002046:	2b00      	cmp	r3, #0
 8002048:	d113      	bne.n	8002072 <HAL_PCD_IRQHandler+0x31e>
 800204a:	6879      	ldr	r1, [r7, #4]
 800204c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800204e:	4613      	mov	r3, r2
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	1a9b      	subs	r3, r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	440b      	add	r3, r1
 8002058:	3350      	adds	r3, #80	; 0x50
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d108      	bne.n	8002072 <HAL_PCD_IRQHandler+0x31e>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6818      	ldr	r0, [r3, #0]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800206a:	461a      	mov	r2, r3
 800206c:	2101      	movs	r1, #1
 800206e:	f003 fbad 	bl	80057cc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	b2db      	uxtb	r3, r3
 8002076:	4619      	mov	r1, r3
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f005 fad4 	bl	8007626 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	f003 0308 	and.w	r3, r3, #8
 8002084:	2b00      	cmp	r3, #0
 8002086:	d008      	beq.n	800209a <HAL_PCD_IRQHandler+0x346>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208a:	015a      	lsls	r2, r3, #5
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	4413      	add	r3, r2
 8002090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002094:	461a      	mov	r2, r3
 8002096:	2308      	movs	r3, #8
 8002098:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	f003 0310 	and.w	r3, r3, #16
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d008      	beq.n	80020b6 <HAL_PCD_IRQHandler+0x362>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80020a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a6:	015a      	lsls	r2, r3, #5
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	4413      	add	r3, r2
 80020ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020b0:	461a      	mov	r2, r3
 80020b2:	2310      	movs	r3, #16
 80020b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d008      	beq.n	80020d2 <HAL_PCD_IRQHandler+0x37e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80020c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c2:	015a      	lsls	r2, r3, #5
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	4413      	add	r3, r2
 80020c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020cc:	461a      	mov	r2, r3
 80020ce:	2340      	movs	r3, #64	; 0x40
 80020d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d008      	beq.n	80020ee <HAL_PCD_IRQHandler+0x39a>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80020dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020de:	015a      	lsls	r2, r3, #5
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	4413      	add	r3, r2
 80020e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020e8:	461a      	mov	r2, r3
 80020ea:	2302      	movs	r3, #2
 80020ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d003      	beq.n	8002100 <HAL_PCD_IRQHandler+0x3ac>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80020f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 fc27 	bl	800294e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002102:	3301      	adds	r3, #1
 8002104:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002108:	085b      	lsrs	r3, r3, #1
 800210a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800210c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800210e:	2b00      	cmp	r3, #0
 8002110:	f47f af48 	bne.w	8001fa4 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4618      	mov	r0, r3
 800211a:	f003 fa90 	bl	800563e <USB_ReadInterrupts>
 800211e:	4603      	mov	r3, r0
 8002120:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002124:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002128:	d123      	bne.n	8002172 <HAL_PCD_IRQHandler+0x41e>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002130:	461a      	mov	r2, r3
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f023 0301 	bic.w	r3, r3, #1
 800213e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002146:	2b01      	cmp	r3, #1
 8002148:	d108      	bne.n	800215c <HAL_PCD_IRQHandler+0x408>
      {
        hpcd->LPM_State = LPM_L0;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002152:	2100      	movs	r1, #0
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f000 fe33 	bl	8002dc0 <HAL_PCDEx_LPM_Callback>
 800215a:	e002      	b.n	8002162 <HAL_PCD_IRQHandler+0x40e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f005 fadb 	bl	8007718 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	6812      	ldr	r2, [r2, #0]
 800216a:	6952      	ldr	r2, [r2, #20]
 800216c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002170:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4618      	mov	r0, r3
 8002178:	f003 fa61 	bl	800563e <USB_ReadInterrupts>
 800217c:	4603      	mov	r3, r0
 800217e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002182:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002186:	d112      	bne.n	80021ae <HAL_PCD_IRQHandler+0x45a>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f003 0301 	and.w	r3, r3, #1
 8002194:	2b01      	cmp	r3, #1
 8002196:	d102      	bne.n	800219e <HAL_PCD_IRQHandler+0x44a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f005 fa95 	bl	80076c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	6812      	ldr	r2, [r2, #0]
 80021a6:	6952      	ldr	r2, [r2, #20]
 80021a8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80021ac:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f003 fa43 	bl	800563e <USB_ReadInterrupts>
 80021b8:	4603      	mov	r3, r0
 80021ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021c2:	f040 80d2 	bne.w	800236a <HAL_PCD_IRQHandler+0x616>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021cc:	461a      	mov	r2, r3
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f023 0301 	bic.w	r3, r3, #1
 80021da:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2110      	movs	r1, #16
 80021e2:	4618      	mov	r0, r3
 80021e4:	f002 fae2 	bl	80047ac <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021e8:	2300      	movs	r3, #0
 80021ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021ec:	e05a      	b.n	80022a4 <HAL_PCD_IRQHandler+0x550>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80021ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021f0:	015a      	lsls	r2, r3, #5
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	4413      	add	r3, r2
 80021f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021fa:	461a      	mov	r2, r3
 80021fc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002200:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002204:	015a      	lsls	r2, r3, #5
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	4413      	add	r3, r2
 800220a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800220e:	4619      	mov	r1, r3
 8002210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002212:	015a      	lsls	r2, r3, #5
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	4413      	add	r3, r2
 8002218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002222:	600b      	str	r3, [r1, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002226:	015a      	lsls	r2, r3, #5
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	4413      	add	r3, r2
 800222c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002230:	4619      	mov	r1, r3
 8002232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002234:	015a      	lsls	r2, r3, #5
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	4413      	add	r3, r2
 800223a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002244:	600b      	str	r3, [r1, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002248:	015a      	lsls	r2, r3, #5
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	4413      	add	r3, r2
 800224e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002252:	461a      	mov	r2, r3
 8002254:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002258:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800225a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800225c:	015a      	lsls	r2, r3, #5
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	4413      	add	r3, r2
 8002262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002266:	4619      	mov	r1, r3
 8002268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800226a:	015a      	lsls	r2, r3, #5
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	4413      	add	r3, r2
 8002270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800227a:	600b      	str	r3, [r1, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800227c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800227e:	015a      	lsls	r2, r3, #5
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	4413      	add	r3, r2
 8002284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002288:	4619      	mov	r1, r3
 800228a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800228c:	015a      	lsls	r2, r3, #5
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	4413      	add	r3, r2
 8002292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800229c:	600b      	str	r3, [r1, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800229e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a0:	3301      	adds	r3, #1
 80022a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685a      	ldr	r2, [r3, #4]
 80022a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d89f      	bhi.n	80021ee <HAL_PCD_IRQHandler+0x49a>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022b4:	461a      	mov	r2, r3
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022bc:	69db      	ldr	r3, [r3, #28]
 80022be:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80022c2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d018      	beq.n	80022fe <HAL_PCD_IRQHandler+0x5aa>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022d2:	461a      	mov	r2, r3
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022de:	f043 030b 	orr.w	r3, r3, #11
 80022e2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022ec:	461a      	mov	r2, r3
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f6:	f043 030b 	orr.w	r3, r3, #11
 80022fa:	6453      	str	r3, [r2, #68]	; 0x44
 80022fc:	e017      	b.n	800232e <HAL_PCD_IRQHandler+0x5da>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002304:	461a      	mov	r2, r3
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800230c:	695b      	ldr	r3, [r3, #20]
 800230e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002312:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002316:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800231e:	461a      	mov	r2, r3
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	f043 030b 	orr.w	r3, r3, #11
 800232c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002334:	461a      	mov	r2, r3
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002342:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6818      	ldr	r0, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002354:	461a      	mov	r2, r3
 8002356:	f003 fa39 	bl	80057cc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	6812      	ldr	r2, [r2, #0]
 8002362:	6952      	ldr	r2, [r2, #20]
 8002364:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002368:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f003 f965 	bl	800563e <USB_ReadInterrupts>
 8002374:	4603      	mov	r3, r0
 8002376:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800237a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800237e:	d124      	bne.n	80023ca <HAL_PCD_IRQHandler+0x676>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4618      	mov	r0, r3
 8002386:	f003 f9fb 	bl	8005780 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f002 fa6e 	bl	8004870 <USB_GetDevSpeed>
 8002394:	4603      	mov	r3, r0
 8002396:	461a      	mov	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681c      	ldr	r4, [r3, #0]
 80023a0:	f001 f948 	bl	8003634 <HAL_RCC_GetHCLKFreq>
 80023a4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	461a      	mov	r2, r3
 80023ae:	4620      	mov	r0, r4
 80023b0:	f001 ffa8 	bl	8004304 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f005 f95e 	bl	8007676 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	6812      	ldr	r2, [r2, #0]
 80023c2:	6952      	ldr	r2, [r2, #20]
 80023c4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80023c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f003 f935 	bl	800563e <USB_ReadInterrupts>
 80023d4:	4603      	mov	r3, r0
 80023d6:	f003 0308 	and.w	r3, r3, #8
 80023da:	2b08      	cmp	r3, #8
 80023dc:	d10a      	bne.n	80023f4 <HAL_PCD_IRQHandler+0x6a0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f005 f93b 	bl	800765a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	6812      	ldr	r2, [r2, #0]
 80023ec:	6952      	ldr	r2, [r2, #20]
 80023ee:	f002 0208 	and.w	r2, r2, #8
 80023f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f003 f920 	bl	800563e <USB_ReadInterrupts>
 80023fe:	4603      	mov	r3, r0
 8002400:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002404:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002408:	d10f      	bne.n	800242a <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800240a:	2300      	movs	r3, #0
 800240c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800240e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002410:	b2db      	uxtb	r3, r3
 8002412:	4619      	mov	r1, r3
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f005 f99f 	bl	8007758 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	6812      	ldr	r2, [r2, #0]
 8002422:	6952      	ldr	r2, [r2, #20]
 8002424:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002428:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4618      	mov	r0, r3
 8002430:	f003 f905 	bl	800563e <USB_ReadInterrupts>
 8002434:	4603      	mov	r3, r0
 8002436:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800243a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800243e:	d10f      	bne.n	8002460 <HAL_PCD_IRQHandler+0x70c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002440:	2300      	movs	r3, #0
 8002442:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002446:	b2db      	uxtb	r3, r3
 8002448:	4619      	mov	r1, r3
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f005 f972 	bl	8007734 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	6812      	ldr	r2, [r2, #0]
 8002458:	6952      	ldr	r2, [r2, #20]
 800245a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800245e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4618      	mov	r0, r3
 8002466:	f003 f8ea 	bl	800563e <USB_ReadInterrupts>
 800246a:	4603      	mov	r3, r0
 800246c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002470:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002474:	d10a      	bne.n	800248c <HAL_PCD_IRQHandler+0x738>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f005 f980 	bl	800777c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	6812      	ldr	r2, [r2, #0]
 8002484:	6952      	ldr	r2, [r2, #20]
 8002486:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800248a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4618      	mov	r0, r3
 8002492:	f003 f8d4 	bl	800563e <USB_ReadInterrupts>
 8002496:	4603      	mov	r3, r0
 8002498:	f003 0304 	and.w	r3, r3, #4
 800249c:	2b04      	cmp	r3, #4
 800249e:	d115      	bne.n	80024cc <HAL_PCD_IRQHandler+0x778>
    {
      temp = hpcd->Instance->GOTGINT;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	f003 0304 	and.w	r3, r3, #4
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d002      	beq.n	80024b8 <HAL_PCD_IRQHandler+0x764>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f005 f970 	bl	8007798 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	6812      	ldr	r2, [r2, #0]
 80024c0:	6851      	ldr	r1, [r2, #4]
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	430a      	orrs	r2, r1
 80024c6:	605a      	str	r2, [r3, #4]
 80024c8:	e000      	b.n	80024cc <HAL_PCD_IRQHandler+0x778>
      return;
 80024ca:	bf00      	nop
    }
  }
}
 80024cc:	3734      	adds	r7, #52	; 0x34
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd90      	pop	{r4, r7, pc}

080024d2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b082      	sub	sp, #8
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
 80024da:	460b      	mov	r3, r1
 80024dc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d101      	bne.n	80024ec <HAL_PCD_SetAddress+0x1a>
 80024e8:	2302      	movs	r3, #2
 80024ea:	e013      	b.n	8002514 <HAL_PCD_SetAddress+0x42>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	78fa      	ldrb	r2, [r7, #3]
 80024f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	78fa      	ldrb	r2, [r7, #3]
 8002502:	4611      	mov	r1, r2
 8002504:	4618      	mov	r0, r3
 8002506:	f003 f840 	bl	800558a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	4608      	mov	r0, r1
 8002526:	4611      	mov	r1, r2
 8002528:	461a      	mov	r2, r3
 800252a:	4603      	mov	r3, r0
 800252c:	70fb      	strb	r3, [r7, #3]
 800252e:	460b      	mov	r3, r1
 8002530:	803b      	strh	r3, [r7, #0]
 8002532:	4613      	mov	r3, r2
 8002534:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002536:	2300      	movs	r3, #0
 8002538:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800253a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800253e:	2b00      	cmp	r3, #0
 8002540:	da0f      	bge.n	8002562 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002542:	78fb      	ldrb	r3, [r7, #3]
 8002544:	f003 020f 	and.w	r2, r3, #15
 8002548:	4613      	mov	r3, r2
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	1a9b      	subs	r3, r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	3338      	adds	r3, #56	; 0x38
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	4413      	add	r3, r2
 8002556:	3304      	adds	r3, #4
 8002558:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2201      	movs	r2, #1
 800255e:	705a      	strb	r2, [r3, #1]
 8002560:	e00f      	b.n	8002582 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002562:	78fb      	ldrb	r3, [r7, #3]
 8002564:	f003 020f 	and.w	r2, r3, #15
 8002568:	4613      	mov	r3, r2
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	1a9b      	subs	r3, r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	4413      	add	r3, r2
 8002578:	3304      	adds	r3, #4
 800257a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002582:	78fb      	ldrb	r3, [r7, #3]
 8002584:	f003 030f 	and.w	r3, r3, #15
 8002588:	b2da      	uxtb	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800258e:	883a      	ldrh	r2, [r7, #0]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	78ba      	ldrb	r2, [r7, #2]
 8002598:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	785b      	ldrb	r3, [r3, #1]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d004      	beq.n	80025ac <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80025ac:	78bb      	ldrb	r3, [r7, #2]
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d102      	bne.n	80025b8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2200      	movs	r2, #0
 80025b6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d101      	bne.n	80025c6 <HAL_PCD_EP_Open+0xaa>
 80025c2:	2302      	movs	r3, #2
 80025c4:	e00e      	b.n	80025e4 <HAL_PCD_EP_Open+0xc8>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2201      	movs	r2, #1
 80025ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68f9      	ldr	r1, [r7, #12]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f002 f970 	bl	80048ba <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80025e2:	7afb      	ldrb	r3, [r7, #11]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3710      	adds	r7, #16
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	460b      	mov	r3, r1
 80025f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80025f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	da0f      	bge.n	8002620 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002600:	78fb      	ldrb	r3, [r7, #3]
 8002602:	f003 020f 	and.w	r2, r3, #15
 8002606:	4613      	mov	r3, r2
 8002608:	00db      	lsls	r3, r3, #3
 800260a:	1a9b      	subs	r3, r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	3338      	adds	r3, #56	; 0x38
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	4413      	add	r3, r2
 8002614:	3304      	adds	r3, #4
 8002616:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2201      	movs	r2, #1
 800261c:	705a      	strb	r2, [r3, #1]
 800261e:	e00f      	b.n	8002640 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002620:	78fb      	ldrb	r3, [r7, #3]
 8002622:	f003 020f 	and.w	r2, r3, #15
 8002626:	4613      	mov	r3, r2
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	1a9b      	subs	r3, r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	4413      	add	r3, r2
 8002636:	3304      	adds	r3, #4
 8002638:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2200      	movs	r2, #0
 800263e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002640:	78fb      	ldrb	r3, [r7, #3]
 8002642:	f003 030f 	and.w	r3, r3, #15
 8002646:	b2da      	uxtb	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002652:	2b01      	cmp	r3, #1
 8002654:	d101      	bne.n	800265a <HAL_PCD_EP_Close+0x6e>
 8002656:	2302      	movs	r3, #2
 8002658:	e00e      	b.n	8002678 <HAL_PCD_EP_Close+0x8c>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2201      	movs	r2, #1
 800265e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68f9      	ldr	r1, [r7, #12]
 8002668:	4618      	mov	r0, r3
 800266a:	f002 f9b1 	bl	80049d0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002676:	2300      	movs	r3, #0
}
 8002678:	4618      	mov	r0, r3
 800267a:	3710      	adds	r7, #16
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	607a      	str	r2, [r7, #4]
 800268a:	603b      	str	r3, [r7, #0]
 800268c:	460b      	mov	r3, r1
 800268e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002690:	7afb      	ldrb	r3, [r7, #11]
 8002692:	f003 020f 	and.w	r2, r3, #15
 8002696:	4613      	mov	r3, r2
 8002698:	00db      	lsls	r3, r3, #3
 800269a:	1a9b      	subs	r3, r3, r2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	4413      	add	r3, r2
 80026a6:	3304      	adds	r3, #4
 80026a8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	683a      	ldr	r2, [r7, #0]
 80026b4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	2200      	movs	r2, #0
 80026ba:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	2200      	movs	r2, #0
 80026c0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026c2:	7afb      	ldrb	r3, [r7, #11]
 80026c4:	f003 030f 	and.w	r3, r3, #15
 80026c8:	b2da      	uxtb	r2, r3
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d102      	bne.n	80026dc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80026dc:	7afb      	ldrb	r3, [r7, #11]
 80026de:	f003 030f 	and.w	r3, r3, #15
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d109      	bne.n	80026fa <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6818      	ldr	r0, [r3, #0]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	461a      	mov	r2, r3
 80026f2:	6979      	ldr	r1, [r7, #20]
 80026f4:	f002 fcac 	bl	8005050 <USB_EP0StartXfer>
 80026f8:	e008      	b.n	800270c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6818      	ldr	r0, [r3, #0]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	b2db      	uxtb	r3, r3
 8002704:	461a      	mov	r2, r3
 8002706:	6979      	ldr	r1, [r7, #20]
 8002708:	f002 fa46 	bl	8004b98 <USB_EPStartXfer>
  }

  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3718      	adds	r7, #24
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002716:	b480      	push	{r7}
 8002718:	b083      	sub	sp, #12
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
 800271e:	460b      	mov	r3, r1
 8002720:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002722:	78fb      	ldrb	r3, [r7, #3]
 8002724:	f003 020f 	and.w	r2, r3, #15
 8002728:	6879      	ldr	r1, [r7, #4]
 800272a:	4613      	mov	r3, r2
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	1a9b      	subs	r3, r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	440b      	add	r3, r1
 8002734:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002738:	681b      	ldr	r3, [r3, #0]
}
 800273a:	4618      	mov	r0, r3
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr

08002746 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b086      	sub	sp, #24
 800274a:	af00      	add	r7, sp, #0
 800274c:	60f8      	str	r0, [r7, #12]
 800274e:	607a      	str	r2, [r7, #4]
 8002750:	603b      	str	r3, [r7, #0]
 8002752:	460b      	mov	r3, r1
 8002754:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002756:	7afb      	ldrb	r3, [r7, #11]
 8002758:	f003 020f 	and.w	r2, r3, #15
 800275c:	4613      	mov	r3, r2
 800275e:	00db      	lsls	r3, r3, #3
 8002760:	1a9b      	subs	r3, r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	3338      	adds	r3, #56	; 0x38
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	4413      	add	r3, r2
 800276a:	3304      	adds	r3, #4
 800276c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	2200      	movs	r2, #0
 800277e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	2201      	movs	r2, #1
 8002784:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002786:	7afb      	ldrb	r3, [r7, #11]
 8002788:	f003 030f 	and.w	r3, r3, #15
 800278c:	b2da      	uxtb	r2, r3
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d102      	bne.n	80027a0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80027a0:	7afb      	ldrb	r3, [r7, #11]
 80027a2:	f003 030f 	and.w	r3, r3, #15
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d109      	bne.n	80027be <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6818      	ldr	r0, [r3, #0]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	461a      	mov	r2, r3
 80027b6:	6979      	ldr	r1, [r7, #20]
 80027b8:	f002 fc4a 	bl	8005050 <USB_EP0StartXfer>
 80027bc:	e008      	b.n	80027d0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6818      	ldr	r0, [r3, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	461a      	mov	r2, r3
 80027ca:	6979      	ldr	r1, [r7, #20]
 80027cc:	f002 f9e4 	bl	8004b98 <USB_EPStartXfer>
  }

  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3718      	adds	r7, #24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b084      	sub	sp, #16
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
 80027e2:	460b      	mov	r3, r1
 80027e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80027e6:	78fb      	ldrb	r3, [r7, #3]
 80027e8:	f003 020f 	and.w	r2, r3, #15
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d901      	bls.n	80027f8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e050      	b.n	800289a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80027f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	da0f      	bge.n	8002820 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002800:	78fb      	ldrb	r3, [r7, #3]
 8002802:	f003 020f 	and.w	r2, r3, #15
 8002806:	4613      	mov	r3, r2
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	1a9b      	subs	r3, r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	3338      	adds	r3, #56	; 0x38
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	4413      	add	r3, r2
 8002814:	3304      	adds	r3, #4
 8002816:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2201      	movs	r2, #1
 800281c:	705a      	strb	r2, [r3, #1]
 800281e:	e00d      	b.n	800283c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002820:	78fa      	ldrb	r2, [r7, #3]
 8002822:	4613      	mov	r3, r2
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	1a9b      	subs	r3, r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	4413      	add	r3, r2
 8002832:	3304      	adds	r3, #4
 8002834:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2200      	movs	r2, #0
 800283a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2201      	movs	r2, #1
 8002840:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002842:	78fb      	ldrb	r3, [r7, #3]
 8002844:	f003 030f 	and.w	r3, r3, #15
 8002848:	b2da      	uxtb	r2, r3
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002854:	2b01      	cmp	r3, #1
 8002856:	d101      	bne.n	800285c <HAL_PCD_EP_SetStall+0x82>
 8002858:	2302      	movs	r3, #2
 800285a:	e01e      	b.n	800289a <HAL_PCD_EP_SetStall+0xc0>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68f9      	ldr	r1, [r7, #12]
 800286a:	4618      	mov	r0, r3
 800286c:	f002 fdb1 	bl	80053d2 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002870:	78fb      	ldrb	r3, [r7, #3]
 8002872:	f003 030f 	and.w	r3, r3, #15
 8002876:	2b00      	cmp	r3, #0
 8002878:	d10a      	bne.n	8002890 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6818      	ldr	r0, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	b2d9      	uxtb	r1, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800288a:	461a      	mov	r2, r3
 800288c:	f002 ff9e 	bl	80057cc <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b084      	sub	sp, #16
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
 80028aa:	460b      	mov	r3, r1
 80028ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80028ae:	78fb      	ldrb	r3, [r7, #3]
 80028b0:	f003 020f 	and.w	r2, r3, #15
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d901      	bls.n	80028c0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e042      	b.n	8002946 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80028c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	da0f      	bge.n	80028e8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028c8:	78fb      	ldrb	r3, [r7, #3]
 80028ca:	f003 020f 	and.w	r2, r3, #15
 80028ce:	4613      	mov	r3, r2
 80028d0:	00db      	lsls	r3, r3, #3
 80028d2:	1a9b      	subs	r3, r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	3338      	adds	r3, #56	; 0x38
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	4413      	add	r3, r2
 80028dc:	3304      	adds	r3, #4
 80028de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2201      	movs	r2, #1
 80028e4:	705a      	strb	r2, [r3, #1]
 80028e6:	e00f      	b.n	8002908 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028e8:	78fb      	ldrb	r3, [r7, #3]
 80028ea:	f003 020f 	and.w	r2, r3, #15
 80028ee:	4613      	mov	r3, r2
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	1a9b      	subs	r3, r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	4413      	add	r3, r2
 80028fe:	3304      	adds	r3, #4
 8002900:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2200      	movs	r2, #0
 8002906:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800290e:	78fb      	ldrb	r3, [r7, #3]
 8002910:	f003 030f 	and.w	r3, r3, #15
 8002914:	b2da      	uxtb	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002920:	2b01      	cmp	r3, #1
 8002922:	d101      	bne.n	8002928 <HAL_PCD_EP_ClrStall+0x86>
 8002924:	2302      	movs	r3, #2
 8002926:	e00e      	b.n	8002946 <HAL_PCD_EP_ClrStall+0xa4>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68f9      	ldr	r1, [r7, #12]
 8002936:	4618      	mov	r0, r3
 8002938:	f002 fdbd 	bl	80054b6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b08a      	sub	sp, #40	; 0x28
 8002952:	af02      	add	r7, sp, #8
 8002954:	6078      	str	r0, [r7, #4]
 8002956:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	4613      	mov	r3, r2
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	1a9b      	subs	r3, r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	3338      	adds	r3, #56	; 0x38
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	4413      	add	r3, r2
 8002972:	3304      	adds	r3, #4
 8002974:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	699a      	ldr	r2, [r3, #24]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	429a      	cmp	r2, r3
 8002980:	d901      	bls.n	8002986 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e06d      	b.n	8002a62 <PCD_WriteEmptyTxFifo+0x114>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	695a      	ldr	r2, [r3, #20]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	689a      	ldr	r2, [r3, #8]
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	429a      	cmp	r2, r3
 800299a:	d202      	bcs.n	80029a2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	3303      	adds	r3, #3
 80029a6:	089b      	lsrs	r3, r3, #2
 80029a8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80029aa:	e02b      	b.n	8002a04 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	695a      	ldr	r2, [r3, #20]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	689a      	ldr	r2, [r3, #8]
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d202      	bcs.n	80029c8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	3303      	adds	r3, #3
 80029cc:	089b      	lsrs	r3, r3, #2
 80029ce:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	68d9      	ldr	r1, [r3, #12]
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	b2da      	uxtb	r2, r3
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	9300      	str	r3, [sp, #0]
 80029e4:	4603      	mov	r3, r0
 80029e6:	6978      	ldr	r0, [r7, #20]
 80029e8:	f002 fc95 	bl	8005316 <USB_WritePacket>

    ep->xfer_buff  += len;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	68da      	ldr	r2, [r3, #12]
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	441a      	add	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	699a      	ldr	r2, [r3, #24]
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	441a      	add	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	015a      	lsls	r2, r3, #5
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d309      	bcc.n	8002a2e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	699a      	ldr	r2, [r3, #24]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d203      	bcs.n	8002a2e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1be      	bne.n	80029ac <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	695a      	ldr	r2, [r3, #20]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d812      	bhi.n	8002a60 <PCD_WriteEmptyTxFifo+0x112>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	f003 030f 	and.w	r3, r3, #15
 8002a40:	2201      	movs	r2, #1
 8002a42:	fa02 f303 	lsl.w	r3, r2, r3
 8002a46:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a4e:	4619      	mov	r1, r3
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	43db      	mvns	r3, r3
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3720      	adds	r7, #32
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
	...

08002a6c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	333c      	adds	r3, #60	; 0x3c
 8002a84:	3304      	adds	r3, #4
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	015a      	lsls	r2, r3, #5
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	4413      	add	r3, r2
 8002a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	f040 80a0 	bne.w	8002be4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	f003 0308 	and.w	r3, r3, #8
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d015      	beq.n	8002ada <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	4a72      	ldr	r2, [pc, #456]	; (8002c7c <PCD_EP_OutXfrComplete_int+0x210>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	f240 80dd 	bls.w	8002c72 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	f000 80d7 	beq.w	8002c72 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	015a      	lsls	r2, r3, #5
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	4413      	add	r3, r2
 8002acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ad6:	6093      	str	r3, [r2, #8]
 8002ad8:	e0cb      	b.n	8002c72 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	f003 0320 	and.w	r3, r3, #32
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d009      	beq.n	8002af8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	015a      	lsls	r2, r3, #5
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	4413      	add	r3, r2
 8002aec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002af0:	461a      	mov	r2, r3
 8002af2:	2320      	movs	r3, #32
 8002af4:	6093      	str	r3, [r2, #8]
 8002af6:	e0bc      	b.n	8002c72 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f040 80b7 	bne.w	8002c72 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	4a5d      	ldr	r2, [pc, #372]	; (8002c7c <PCD_EP_OutXfrComplete_int+0x210>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d90f      	bls.n	8002b2c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00a      	beq.n	8002b2c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	015a      	lsls	r2, r3, #5
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b22:	461a      	mov	r2, r3
 8002b24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b28:	6093      	str	r3, [r2, #8]
 8002b2a:	e0a2      	b.n	8002c72 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002b2c:	6879      	ldr	r1, [r7, #4]
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	4613      	mov	r3, r2
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	1a9b      	subs	r3, r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	440b      	add	r3, r1
 8002b3a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002b3e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	0159      	lsls	r1, r3, #5
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	440b      	add	r3, r1
 8002b48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002b52:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	1a9b      	subs	r3, r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4403      	add	r3, r0
 8002b62:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002b66:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002b68:	6879      	ldr	r1, [r7, #4]
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	1a9b      	subs	r3, r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	440b      	add	r3, r1
 8002b76:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002b7a:	6819      	ldr	r1, [r3, #0]
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	683a      	ldr	r2, [r7, #0]
 8002b80:	4613      	mov	r3, r2
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	1a9b      	subs	r3, r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	4403      	add	r3, r0
 8002b8a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4419      	add	r1, r3
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	683a      	ldr	r2, [r7, #0]
 8002b96:	4613      	mov	r3, r2
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	1a9b      	subs	r3, r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4403      	add	r3, r0
 8002ba0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002ba4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d114      	bne.n	8002bd6 <PCD_EP_OutXfrComplete_int+0x16a>
 8002bac:	6879      	ldr	r1, [r7, #4]
 8002bae:	683a      	ldr	r2, [r7, #0]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	1a9b      	subs	r3, r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	440b      	add	r3, r1
 8002bba:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d108      	bne.n	8002bd6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6818      	ldr	r0, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002bce:	461a      	mov	r2, r3
 8002bd0:	2101      	movs	r1, #1
 8002bd2:	f002 fdfb 	bl	80057cc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	4619      	mov	r1, r3
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f004 fd07 	bl	80075f0 <HAL_PCD_DataOutStageCallback>
 8002be2:	e046      	b.n	8002c72 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	4a26      	ldr	r2, [pc, #152]	; (8002c80 <PCD_EP_OutXfrComplete_int+0x214>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d124      	bne.n	8002c36 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00a      	beq.n	8002c0c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	015a      	lsls	r2, r3, #5
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c02:	461a      	mov	r2, r3
 8002c04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c08:	6093      	str	r3, [r2, #8]
 8002c0a:	e032      	b.n	8002c72 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	f003 0320 	and.w	r3, r3, #32
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d008      	beq.n	8002c28 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	015a      	lsls	r2, r3, #5
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c22:	461a      	mov	r2, r3
 8002c24:	2320      	movs	r3, #32
 8002c26:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f004 fcde 	bl	80075f0 <HAL_PCD_DataOutStageCallback>
 8002c34:	e01d      	b.n	8002c72 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d114      	bne.n	8002c66 <PCD_EP_OutXfrComplete_int+0x1fa>
 8002c3c:	6879      	ldr	r1, [r7, #4]
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	4613      	mov	r3, r2
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	1a9b      	subs	r3, r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	440b      	add	r3, r1
 8002c4a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d108      	bne.n	8002c66 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6818      	ldr	r0, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002c5e:	461a      	mov	r2, r3
 8002c60:	2100      	movs	r1, #0
 8002c62:	f002 fdb3 	bl	80057cc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f004 fcbf 	bl	80075f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3718      	adds	r7, #24
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	4f54300a 	.word	0x4f54300a
 8002c80:	4f54310a 	.word	0x4f54310a

08002c84 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	333c      	adds	r3, #60	; 0x3c
 8002c9c:	3304      	adds	r3, #4
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	015a      	lsls	r2, r3, #5
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	4413      	add	r3, r2
 8002caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	4a15      	ldr	r2, [pc, #84]	; (8002d0c <PCD_EP_OutSetupPacket_int+0x88>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d90e      	bls.n	8002cd8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d009      	beq.n	8002cd8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	015a      	lsls	r2, r3, #5
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	4413      	add	r3, r2
 8002ccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cd6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f004 fc77 	bl	80075cc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	4a0a      	ldr	r2, [pc, #40]	; (8002d0c <PCD_EP_OutSetupPacket_int+0x88>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d90c      	bls.n	8002d00 <PCD_EP_OutSetupPacket_int+0x7c>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d108      	bne.n	8002d00 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6818      	ldr	r0, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	f002 fd66 	bl	80057cc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3718      	adds	r7, #24
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	4f54300a 	.word	0x4f54300a

08002d10 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b085      	sub	sp, #20
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	460b      	mov	r3, r1
 8002d1a:	70fb      	strb	r3, [r7, #3]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d26:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002d28:	78fb      	ldrb	r3, [r7, #3]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d107      	bne.n	8002d3e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	883a      	ldrh	r2, [r7, #0]
 8002d34:	0411      	lsls	r1, r2, #16
 8002d36:	68ba      	ldr	r2, [r7, #8]
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	629a      	str	r2, [r3, #40]	; 0x28
 8002d3c:	e028      	b.n	8002d90 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d44:	0c1b      	lsrs	r3, r3, #16
 8002d46:	68ba      	ldr	r2, [r7, #8]
 8002d48:	4413      	add	r3, r2
 8002d4a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	73fb      	strb	r3, [r7, #15]
 8002d50:	e00d      	b.n	8002d6e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	7bfb      	ldrb	r3, [r7, #15]
 8002d58:	3340      	adds	r3, #64	; 0x40
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4413      	add	r3, r2
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	0c1b      	lsrs	r3, r3, #16
 8002d62:	68ba      	ldr	r2, [r7, #8]
 8002d64:	4413      	add	r3, r2
 8002d66:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002d68:	7bfb      	ldrb	r3, [r7, #15]
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	73fb      	strb	r3, [r7, #15]
 8002d6e:	7bfa      	ldrb	r2, [r7, #15]
 8002d70:	78fb      	ldrb	r3, [r7, #3]
 8002d72:	3b01      	subs	r3, #1
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d3ec      	bcc.n	8002d52 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6819      	ldr	r1, [r3, #0]
 8002d7c:	78fb      	ldrb	r3, [r7, #3]
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	883a      	ldrh	r2, [r7, #0]
 8002d82:	0410      	lsls	r0, r2, #16
 8002d84:	68ba      	ldr	r2, [r7, #8]
 8002d86:	4302      	orrs	r2, r0
 8002d88:	3340      	adds	r3, #64	; 0x40
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	440b      	add	r3, r1
 8002d8e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3714      	adds	r7, #20
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr

08002d9e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b083      	sub	sp, #12
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
 8002da6:	460b      	mov	r3, r1
 8002da8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	887a      	ldrh	r2, [r7, #2]
 8002db0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	460b      	mov	r3, r1
 8002dca:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b086      	sub	sp, #24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e25b      	b.n	80032a2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d075      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002df6:	4ba3      	ldr	r3, [pc, #652]	; (8003084 <HAL_RCC_OscConfig+0x2ac>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f003 030c 	and.w	r3, r3, #12
 8002dfe:	2b04      	cmp	r3, #4
 8002e00:	d00c      	beq.n	8002e1c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e02:	4ba0      	ldr	r3, [pc, #640]	; (8003084 <HAL_RCC_OscConfig+0x2ac>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e0a:	2b08      	cmp	r3, #8
 8002e0c:	d112      	bne.n	8002e34 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e0e:	4b9d      	ldr	r3, [pc, #628]	; (8003084 <HAL_RCC_OscConfig+0x2ac>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e1a:	d10b      	bne.n	8002e34 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e1c:	4b99      	ldr	r3, [pc, #612]	; (8003084 <HAL_RCC_OscConfig+0x2ac>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d05b      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x108>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d157      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e236      	b.n	80032a2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e3c:	d106      	bne.n	8002e4c <HAL_RCC_OscConfig+0x74>
 8002e3e:	4a91      	ldr	r2, [pc, #580]	; (8003084 <HAL_RCC_OscConfig+0x2ac>)
 8002e40:	4b90      	ldr	r3, [pc, #576]	; (8003084 <HAL_RCC_OscConfig+0x2ac>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e48:	6013      	str	r3, [r2, #0]
 8002e4a:	e01d      	b.n	8002e88 <HAL_RCC_OscConfig+0xb0>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e54:	d10c      	bne.n	8002e70 <HAL_RCC_OscConfig+0x98>
 8002e56:	4a8b      	ldr	r2, [pc, #556]	; (8003084 <HAL_RCC_OscConfig+0x2ac>)
 8002e58:	4b8a      	ldr	r3, [pc, #552]	; (8003084 <HAL_RCC_OscConfig+0x2ac>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e60:	6013      	str	r3, [r2, #0]
 8002e62:	4a88      	ldr	r2, [pc, #544]	; (8003084 <HAL_RCC_OscConfig+0x2ac>)
 8002e64:	4b87      	ldr	r3, [pc, #540]	; (8003084 <HAL_RCC_OscConfig+0x2ac>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e6c:	6013      	str	r3, [r2, #0]
 8002e6e:	e00b      	b.n	8002e88 <HAL_RCC_OscConfig+0xb0>
 8002e70:	4a84      	ldr	r2, [pc, #528]	; (8003084 <HAL_RCC_OscConfig+0x2ac>)
 8002e72:	4b84      	ldr	r3, [pc, #528]	; (8003084 <HAL_RCC_OscConfig+0x2ac>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e7a:	6013      	str	r3, [r2, #0]
 8002e7c:	4a81      	ldr	r2, [pc, #516]	; (8003084 <HAL_RCC_OscConfig+0x2ac>)
 8002e7e:	4b81      	ldr	r3, [pc, #516]	; (8003084 <HAL_RCC_OscConfig+0x2ac>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d013      	beq.n	8002eb8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e90:	f7fe fb38 	bl	8001504 <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e96:	e008      	b.n	8002eaa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e98:	f7fe fb34 	bl	8001504 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b64      	cmp	r3, #100	; 0x64
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e1fb      	b.n	80032a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eaa:	4b76      	ldr	r3, [pc, #472]	; (8003084 <HAL_RCC_OscConfig+0x2ac>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d0f0      	beq.n	8002e98 <HAL_RCC_OscConfig+0xc0>
 8002eb6:	e014      	b.n	8002ee2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb8:	f7fe fb24 	bl	8001504 <HAL_GetTick>
 8002ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ebe:	e008      	b.n	8002ed2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ec0:	f7fe fb20 	bl	8001504 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b64      	cmp	r3, #100	; 0x64
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e1e7      	b.n	80032a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ed2:	4b6c      	ldr	r3, [pc, #432]	; (8003084 <HAL_RCC_OscConfig+0x2ac>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1f0      	bne.n	8002ec0 <HAL_RCC_OscConfig+0xe8>
 8002ede:	e000      	b.n	8002ee2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ee0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d063      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002eee:	4b65      	ldr	r3, [pc, #404]	; (8003084 <HAL_RCC_OscConfig+0x2ac>)
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f003 030c 	and.w	r3, r3, #12
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00b      	beq.n	8002f12 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002efa:	4b62      	ldr	r3, [pc, #392]	; (8003084 <HAL_RCC_OscConfig+0x2ac>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f02:	2b08      	cmp	r3, #8
 8002f04:	d11c      	bne.n	8002f40 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f06:	4b5f      	ldr	r3, [pc, #380]	; (8003084 <HAL_RCC_OscConfig+0x2ac>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d116      	bne.n	8002f40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f12:	4b5c      	ldr	r3, [pc, #368]	; (8003084 <HAL_RCC_OscConfig+0x2ac>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d005      	beq.n	8002f2a <HAL_RCC_OscConfig+0x152>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d001      	beq.n	8002f2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e1bb      	b.n	80032a2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f2a:	4956      	ldr	r1, [pc, #344]	; (8003084 <HAL_RCC_OscConfig+0x2ac>)
 8002f2c:	4b55      	ldr	r3, [pc, #340]	; (8003084 <HAL_RCC_OscConfig+0x2ac>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f3e:	e03a      	b.n	8002fb6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d020      	beq.n	8002f8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f48:	4b4f      	ldr	r3, [pc, #316]	; (8003088 <HAL_RCC_OscConfig+0x2b0>)
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f4e:	f7fe fad9 	bl	8001504 <HAL_GetTick>
 8002f52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f54:	e008      	b.n	8002f68 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f56:	f7fe fad5 	bl	8001504 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e19c      	b.n	80032a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f68:	4b46      	ldr	r3, [pc, #280]	; (8003084 <HAL_RCC_OscConfig+0x2ac>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d0f0      	beq.n	8002f56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f74:	4943      	ldr	r1, [pc, #268]	; (8003084 <HAL_RCC_OscConfig+0x2ac>)
 8002f76:	4b43      	ldr	r3, [pc, #268]	; (8003084 <HAL_RCC_OscConfig+0x2ac>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	4313      	orrs	r3, r2
 8002f86:	600b      	str	r3, [r1, #0]
 8002f88:	e015      	b.n	8002fb6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f8a:	4b3f      	ldr	r3, [pc, #252]	; (8003088 <HAL_RCC_OscConfig+0x2b0>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f90:	f7fe fab8 	bl	8001504 <HAL_GetTick>
 8002f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f96:	e008      	b.n	8002faa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f98:	f7fe fab4 	bl	8001504 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e17b      	b.n	80032a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002faa:	4b36      	ldr	r3, [pc, #216]	; (8003084 <HAL_RCC_OscConfig+0x2ac>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1f0      	bne.n	8002f98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0308 	and.w	r3, r3, #8
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d030      	beq.n	8003024 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d016      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fca:	4b30      	ldr	r3, [pc, #192]	; (800308c <HAL_RCC_OscConfig+0x2b4>)
 8002fcc:	2201      	movs	r2, #1
 8002fce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd0:	f7fe fa98 	bl	8001504 <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fd6:	e008      	b.n	8002fea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fd8:	f7fe fa94 	bl	8001504 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e15b      	b.n	80032a2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fea:	4b26      	ldr	r3, [pc, #152]	; (8003084 <HAL_RCC_OscConfig+0x2ac>)
 8002fec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d0f0      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x200>
 8002ff6:	e015      	b.n	8003024 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ff8:	4b24      	ldr	r3, [pc, #144]	; (800308c <HAL_RCC_OscConfig+0x2b4>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ffe:	f7fe fa81 	bl	8001504 <HAL_GetTick>
 8003002:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003004:	e008      	b.n	8003018 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003006:	f7fe fa7d 	bl	8001504 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d901      	bls.n	8003018 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e144      	b.n	80032a2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003018:	4b1a      	ldr	r3, [pc, #104]	; (8003084 <HAL_RCC_OscConfig+0x2ac>)
 800301a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800301c:	f003 0302 	and.w	r3, r3, #2
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1f0      	bne.n	8003006 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0304 	and.w	r3, r3, #4
 800302c:	2b00      	cmp	r3, #0
 800302e:	f000 80a0 	beq.w	8003172 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003032:	2300      	movs	r3, #0
 8003034:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003036:	4b13      	ldr	r3, [pc, #76]	; (8003084 <HAL_RCC_OscConfig+0x2ac>)
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d10f      	bne.n	8003062 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003042:	2300      	movs	r3, #0
 8003044:	60bb      	str	r3, [r7, #8]
 8003046:	4a0f      	ldr	r2, [pc, #60]	; (8003084 <HAL_RCC_OscConfig+0x2ac>)
 8003048:	4b0e      	ldr	r3, [pc, #56]	; (8003084 <HAL_RCC_OscConfig+0x2ac>)
 800304a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003050:	6413      	str	r3, [r2, #64]	; 0x40
 8003052:	4b0c      	ldr	r3, [pc, #48]	; (8003084 <HAL_RCC_OscConfig+0x2ac>)
 8003054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800305a:	60bb      	str	r3, [r7, #8]
 800305c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800305e:	2301      	movs	r3, #1
 8003060:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003062:	4b0b      	ldr	r3, [pc, #44]	; (8003090 <HAL_RCC_OscConfig+0x2b8>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800306a:	2b00      	cmp	r3, #0
 800306c:	d121      	bne.n	80030b2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800306e:	4a08      	ldr	r2, [pc, #32]	; (8003090 <HAL_RCC_OscConfig+0x2b8>)
 8003070:	4b07      	ldr	r3, [pc, #28]	; (8003090 <HAL_RCC_OscConfig+0x2b8>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003078:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800307a:	f7fe fa43 	bl	8001504 <HAL_GetTick>
 800307e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003080:	e011      	b.n	80030a6 <HAL_RCC_OscConfig+0x2ce>
 8003082:	bf00      	nop
 8003084:	40023800 	.word	0x40023800
 8003088:	42470000 	.word	0x42470000
 800308c:	42470e80 	.word	0x42470e80
 8003090:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003094:	f7fe fa36 	bl	8001504 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e0fd      	b.n	80032a2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a6:	4b81      	ldr	r3, [pc, #516]	; (80032ac <HAL_RCC_OscConfig+0x4d4>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d0f0      	beq.n	8003094 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d106      	bne.n	80030c8 <HAL_RCC_OscConfig+0x2f0>
 80030ba:	4a7d      	ldr	r2, [pc, #500]	; (80032b0 <HAL_RCC_OscConfig+0x4d8>)
 80030bc:	4b7c      	ldr	r3, [pc, #496]	; (80032b0 <HAL_RCC_OscConfig+0x4d8>)
 80030be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c0:	f043 0301 	orr.w	r3, r3, #1
 80030c4:	6713      	str	r3, [r2, #112]	; 0x70
 80030c6:	e01c      	b.n	8003102 <HAL_RCC_OscConfig+0x32a>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	2b05      	cmp	r3, #5
 80030ce:	d10c      	bne.n	80030ea <HAL_RCC_OscConfig+0x312>
 80030d0:	4a77      	ldr	r2, [pc, #476]	; (80032b0 <HAL_RCC_OscConfig+0x4d8>)
 80030d2:	4b77      	ldr	r3, [pc, #476]	; (80032b0 <HAL_RCC_OscConfig+0x4d8>)
 80030d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d6:	f043 0304 	orr.w	r3, r3, #4
 80030da:	6713      	str	r3, [r2, #112]	; 0x70
 80030dc:	4a74      	ldr	r2, [pc, #464]	; (80032b0 <HAL_RCC_OscConfig+0x4d8>)
 80030de:	4b74      	ldr	r3, [pc, #464]	; (80032b0 <HAL_RCC_OscConfig+0x4d8>)
 80030e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e2:	f043 0301 	orr.w	r3, r3, #1
 80030e6:	6713      	str	r3, [r2, #112]	; 0x70
 80030e8:	e00b      	b.n	8003102 <HAL_RCC_OscConfig+0x32a>
 80030ea:	4a71      	ldr	r2, [pc, #452]	; (80032b0 <HAL_RCC_OscConfig+0x4d8>)
 80030ec:	4b70      	ldr	r3, [pc, #448]	; (80032b0 <HAL_RCC_OscConfig+0x4d8>)
 80030ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f0:	f023 0301 	bic.w	r3, r3, #1
 80030f4:	6713      	str	r3, [r2, #112]	; 0x70
 80030f6:	4a6e      	ldr	r2, [pc, #440]	; (80032b0 <HAL_RCC_OscConfig+0x4d8>)
 80030f8:	4b6d      	ldr	r3, [pc, #436]	; (80032b0 <HAL_RCC_OscConfig+0x4d8>)
 80030fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030fc:	f023 0304 	bic.w	r3, r3, #4
 8003100:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d015      	beq.n	8003136 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800310a:	f7fe f9fb 	bl	8001504 <HAL_GetTick>
 800310e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003110:	e00a      	b.n	8003128 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003112:	f7fe f9f7 	bl	8001504 <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003120:	4293      	cmp	r3, r2
 8003122:	d901      	bls.n	8003128 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e0bc      	b.n	80032a2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003128:	4b61      	ldr	r3, [pc, #388]	; (80032b0 <HAL_RCC_OscConfig+0x4d8>)
 800312a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d0ee      	beq.n	8003112 <HAL_RCC_OscConfig+0x33a>
 8003134:	e014      	b.n	8003160 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003136:	f7fe f9e5 	bl	8001504 <HAL_GetTick>
 800313a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800313c:	e00a      	b.n	8003154 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800313e:	f7fe f9e1 	bl	8001504 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	f241 3288 	movw	r2, #5000	; 0x1388
 800314c:	4293      	cmp	r3, r2
 800314e:	d901      	bls.n	8003154 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e0a6      	b.n	80032a2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003154:	4b56      	ldr	r3, [pc, #344]	; (80032b0 <HAL_RCC_OscConfig+0x4d8>)
 8003156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003158:	f003 0302 	and.w	r3, r3, #2
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1ee      	bne.n	800313e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003160:	7dfb      	ldrb	r3, [r7, #23]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d105      	bne.n	8003172 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003166:	4a52      	ldr	r2, [pc, #328]	; (80032b0 <HAL_RCC_OscConfig+0x4d8>)
 8003168:	4b51      	ldr	r3, [pc, #324]	; (80032b0 <HAL_RCC_OscConfig+0x4d8>)
 800316a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003170:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	2b00      	cmp	r3, #0
 8003178:	f000 8092 	beq.w	80032a0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800317c:	4b4c      	ldr	r3, [pc, #304]	; (80032b0 <HAL_RCC_OscConfig+0x4d8>)
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f003 030c 	and.w	r3, r3, #12
 8003184:	2b08      	cmp	r3, #8
 8003186:	d05c      	beq.n	8003242 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	2b02      	cmp	r3, #2
 800318e:	d141      	bne.n	8003214 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003190:	4b48      	ldr	r3, [pc, #288]	; (80032b4 <HAL_RCC_OscConfig+0x4dc>)
 8003192:	2200      	movs	r2, #0
 8003194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003196:	f7fe f9b5 	bl	8001504 <HAL_GetTick>
 800319a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800319c:	e008      	b.n	80031b0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800319e:	f7fe f9b1 	bl	8001504 <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d901      	bls.n	80031b0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e078      	b.n	80032a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031b0:	4b3f      	ldr	r3, [pc, #252]	; (80032b0 <HAL_RCC_OscConfig+0x4d8>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d1f0      	bne.n	800319e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031bc:	493c      	ldr	r1, [pc, #240]	; (80032b0 <HAL_RCC_OscConfig+0x4d8>)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	69da      	ldr	r2, [r3, #28]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	431a      	orrs	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031cc:	019b      	lsls	r3, r3, #6
 80031ce:	431a      	orrs	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d4:	085b      	lsrs	r3, r3, #1
 80031d6:	3b01      	subs	r3, #1
 80031d8:	041b      	lsls	r3, r3, #16
 80031da:	431a      	orrs	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e0:	061b      	lsls	r3, r3, #24
 80031e2:	4313      	orrs	r3, r2
 80031e4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031e6:	4b33      	ldr	r3, [pc, #204]	; (80032b4 <HAL_RCC_OscConfig+0x4dc>)
 80031e8:	2201      	movs	r2, #1
 80031ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ec:	f7fe f98a 	bl	8001504 <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031f4:	f7fe f986 	bl	8001504 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e04d      	b.n	80032a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003206:	4b2a      	ldr	r3, [pc, #168]	; (80032b0 <HAL_RCC_OscConfig+0x4d8>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d0f0      	beq.n	80031f4 <HAL_RCC_OscConfig+0x41c>
 8003212:	e045      	b.n	80032a0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003214:	4b27      	ldr	r3, [pc, #156]	; (80032b4 <HAL_RCC_OscConfig+0x4dc>)
 8003216:	2200      	movs	r2, #0
 8003218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800321a:	f7fe f973 	bl	8001504 <HAL_GetTick>
 800321e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003220:	e008      	b.n	8003234 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003222:	f7fe f96f 	bl	8001504 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d901      	bls.n	8003234 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e036      	b.n	80032a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003234:	4b1e      	ldr	r3, [pc, #120]	; (80032b0 <HAL_RCC_OscConfig+0x4d8>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1f0      	bne.n	8003222 <HAL_RCC_OscConfig+0x44a>
 8003240:	e02e      	b.n	80032a0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d101      	bne.n	800324e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e029      	b.n	80032a2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800324e:	4b18      	ldr	r3, [pc, #96]	; (80032b0 <HAL_RCC_OscConfig+0x4d8>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	429a      	cmp	r2, r3
 8003260:	d11c      	bne.n	800329c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800326c:	429a      	cmp	r2, r3
 800326e:	d115      	bne.n	800329c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003276:	4013      	ands	r3, r2
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800327c:	4293      	cmp	r3, r2
 800327e:	d10d      	bne.n	800329c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800328a:	429a      	cmp	r2, r3
 800328c:	d106      	bne.n	800329c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003298:	429a      	cmp	r2, r3
 800329a:	d001      	beq.n	80032a0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e000      	b.n	80032a2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3718      	adds	r7, #24
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	40007000 	.word	0x40007000
 80032b0:	40023800 	.word	0x40023800
 80032b4:	42470060 	.word	0x42470060

080032b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d101      	bne.n	80032cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e0cc      	b.n	8003466 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032cc:	4b68      	ldr	r3, [pc, #416]	; (8003470 <HAL_RCC_ClockConfig+0x1b8>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 020f 	and.w	r2, r3, #15
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d20c      	bcs.n	80032f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032da:	4b65      	ldr	r3, [pc, #404]	; (8003470 <HAL_RCC_ClockConfig+0x1b8>)
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	b2d2      	uxtb	r2, r2
 80032e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032e2:	4b63      	ldr	r3, [pc, #396]	; (8003470 <HAL_RCC_ClockConfig+0x1b8>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 020f 	and.w	r2, r3, #15
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d001      	beq.n	80032f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e0b8      	b.n	8003466 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d020      	beq.n	8003342 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0304 	and.w	r3, r3, #4
 8003308:	2b00      	cmp	r3, #0
 800330a:	d005      	beq.n	8003318 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800330c:	4a59      	ldr	r2, [pc, #356]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 800330e:	4b59      	ldr	r3, [pc, #356]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003316:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0308 	and.w	r3, r3, #8
 8003320:	2b00      	cmp	r3, #0
 8003322:	d005      	beq.n	8003330 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003324:	4a53      	ldr	r2, [pc, #332]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 8003326:	4b53      	ldr	r3, [pc, #332]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800332e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003330:	4950      	ldr	r1, [pc, #320]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 8003332:	4b50      	ldr	r3, [pc, #320]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	4313      	orrs	r3, r2
 8003340:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	2b00      	cmp	r3, #0
 800334c:	d044      	beq.n	80033d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d107      	bne.n	8003366 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003356:	4b47      	ldr	r3, [pc, #284]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d119      	bne.n	8003396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e07f      	b.n	8003466 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	2b02      	cmp	r3, #2
 800336c:	d003      	beq.n	8003376 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003372:	2b03      	cmp	r3, #3
 8003374:	d107      	bne.n	8003386 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003376:	4b3f      	ldr	r3, [pc, #252]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d109      	bne.n	8003396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e06f      	b.n	8003466 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003386:	4b3b      	ldr	r3, [pc, #236]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d101      	bne.n	8003396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e067      	b.n	8003466 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003396:	4937      	ldr	r1, [pc, #220]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 8003398:	4b36      	ldr	r3, [pc, #216]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f023 0203 	bic.w	r2, r3, #3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033a8:	f7fe f8ac 	bl	8001504 <HAL_GetTick>
 80033ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ae:	e00a      	b.n	80033c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033b0:	f7fe f8a8 	bl	8001504 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80033be:	4293      	cmp	r3, r2
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e04f      	b.n	8003466 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033c6:	4b2b      	ldr	r3, [pc, #172]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f003 020c 	and.w	r2, r3, #12
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d1eb      	bne.n	80033b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033d8:	4b25      	ldr	r3, [pc, #148]	; (8003470 <HAL_RCC_ClockConfig+0x1b8>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 020f 	and.w	r2, r3, #15
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d90c      	bls.n	8003400 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033e6:	4b22      	ldr	r3, [pc, #136]	; (8003470 <HAL_RCC_ClockConfig+0x1b8>)
 80033e8:	683a      	ldr	r2, [r7, #0]
 80033ea:	b2d2      	uxtb	r2, r2
 80033ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ee:	4b20      	ldr	r3, [pc, #128]	; (8003470 <HAL_RCC_ClockConfig+0x1b8>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 020f 	and.w	r2, r3, #15
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d001      	beq.n	8003400 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e032      	b.n	8003466 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0304 	and.w	r3, r3, #4
 8003408:	2b00      	cmp	r3, #0
 800340a:	d008      	beq.n	800341e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800340c:	4919      	ldr	r1, [pc, #100]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 800340e:	4b19      	ldr	r3, [pc, #100]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	4313      	orrs	r3, r2
 800341c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0308 	and.w	r3, r3, #8
 8003426:	2b00      	cmp	r3, #0
 8003428:	d009      	beq.n	800343e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800342a:	4912      	ldr	r1, [pc, #72]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 800342c:	4b11      	ldr	r3, [pc, #68]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	4313      	orrs	r3, r2
 800343c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800343e:	f000 f821 	bl	8003484 <HAL_RCC_GetSysClockFreq>
 8003442:	4601      	mov	r1, r0
 8003444:	4b0b      	ldr	r3, [pc, #44]	; (8003474 <HAL_RCC_ClockConfig+0x1bc>)
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	091b      	lsrs	r3, r3, #4
 800344a:	f003 030f 	and.w	r3, r3, #15
 800344e:	4a0a      	ldr	r2, [pc, #40]	; (8003478 <HAL_RCC_ClockConfig+0x1c0>)
 8003450:	5cd3      	ldrb	r3, [r2, r3]
 8003452:	fa21 f303 	lsr.w	r3, r1, r3
 8003456:	4a09      	ldr	r2, [pc, #36]	; (800347c <HAL_RCC_ClockConfig+0x1c4>)
 8003458:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800345a:	4b09      	ldr	r3, [pc, #36]	; (8003480 <HAL_RCC_ClockConfig+0x1c8>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4618      	mov	r0, r3
 8003460:	f7fe f80c 	bl	800147c <HAL_InitTick>

  return HAL_OK;
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	3710      	adds	r7, #16
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	40023c00 	.word	0x40023c00
 8003474:	40023800 	.word	0x40023800
 8003478:	08007df0 	.word	0x08007df0
 800347c:	20000000 	.word	0x20000000
 8003480:	20000004 	.word	0x20000004

08003484 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003488:	b08f      	sub	sp, #60	; 0x3c
 800348a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800348c:	2300      	movs	r3, #0
 800348e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003490:	2300      	movs	r3, #0
 8003492:	637b      	str	r3, [r7, #52]	; 0x34
 8003494:	2300      	movs	r3, #0
 8003496:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 8003498:	2300      	movs	r3, #0
 800349a:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800349c:	4b62      	ldr	r3, [pc, #392]	; (8003628 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f003 030c 	and.w	r3, r3, #12
 80034a4:	2b04      	cmp	r3, #4
 80034a6:	d007      	beq.n	80034b8 <HAL_RCC_GetSysClockFreq+0x34>
 80034a8:	2b08      	cmp	r3, #8
 80034aa:	d008      	beq.n	80034be <HAL_RCC_GetSysClockFreq+0x3a>
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f040 80b2 	bne.w	8003616 <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034b2:	4b5e      	ldr	r3, [pc, #376]	; (800362c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80034b4:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 80034b6:	e0b1      	b.n	800361c <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034b8:	4b5d      	ldr	r3, [pc, #372]	; (8003630 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80034ba:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80034bc:	e0ae      	b.n	800361c <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034be:	4b5a      	ldr	r3, [pc, #360]	; (8003628 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034c8:	4b57      	ldr	r3, [pc, #348]	; (8003628 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d04e      	beq.n	8003572 <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034d4:	4b54      	ldr	r3, [pc, #336]	; (8003628 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	099b      	lsrs	r3, r3, #6
 80034da:	f04f 0400 	mov.w	r4, #0
 80034de:	f240 11ff 	movw	r1, #511	; 0x1ff
 80034e2:	f04f 0200 	mov.w	r2, #0
 80034e6:	ea01 0103 	and.w	r1, r1, r3
 80034ea:	ea02 0204 	and.w	r2, r2, r4
 80034ee:	460b      	mov	r3, r1
 80034f0:	4614      	mov	r4, r2
 80034f2:	0160      	lsls	r0, r4, #5
 80034f4:	6278      	str	r0, [r7, #36]	; 0x24
 80034f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80034f8:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80034fc:	6278      	str	r0, [r7, #36]	; 0x24
 80034fe:	015b      	lsls	r3, r3, #5
 8003500:	623b      	str	r3, [r7, #32]
 8003502:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003506:	1a5b      	subs	r3, r3, r1
 8003508:	eb64 0402 	sbc.w	r4, r4, r2
 800350c:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8003510:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8003514:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8003518:	ebb8 0803 	subs.w	r8, r8, r3
 800351c:	eb69 0904 	sbc.w	r9, r9, r4
 8003520:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003524:	61fb      	str	r3, [r7, #28]
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800352c:	61fb      	str	r3, [r7, #28]
 800352e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8003532:	61bb      	str	r3, [r7, #24]
 8003534:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8003538:	eb18 0801 	adds.w	r8, r8, r1
 800353c:	eb49 0902 	adc.w	r9, r9, r2
 8003540:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8003544:	617b      	str	r3, [r7, #20]
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800354c:	617b      	str	r3, [r7, #20]
 800354e:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8003552:	613b      	str	r3, [r7, #16]
 8003554:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8003558:	4640      	mov	r0, r8
 800355a:	4649      	mov	r1, r9
 800355c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800355e:	f04f 0400 	mov.w	r4, #0
 8003562:	461a      	mov	r2, r3
 8003564:	4623      	mov	r3, r4
 8003566:	f7fd fa2b 	bl	80009c0 <__aeabi_uldivmod>
 800356a:	4603      	mov	r3, r0
 800356c:	460c      	mov	r4, r1
 800356e:	637b      	str	r3, [r7, #52]	; 0x34
 8003570:	e043      	b.n	80035fa <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003572:	4b2d      	ldr	r3, [pc, #180]	; (8003628 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	099b      	lsrs	r3, r3, #6
 8003578:	f04f 0400 	mov.w	r4, #0
 800357c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003580:	f04f 0200 	mov.w	r2, #0
 8003584:	ea01 0103 	and.w	r1, r1, r3
 8003588:	ea02 0204 	and.w	r2, r2, r4
 800358c:	460b      	mov	r3, r1
 800358e:	4614      	mov	r4, r2
 8003590:	0160      	lsls	r0, r4, #5
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	015b      	lsls	r3, r3, #5
 800359e:	60bb      	str	r3, [r7, #8]
 80035a0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80035a4:	1a5b      	subs	r3, r3, r1
 80035a6:	eb64 0402 	sbc.w	r4, r4, r2
 80035aa:	01a6      	lsls	r6, r4, #6
 80035ac:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 80035b0:	019d      	lsls	r5, r3, #6
 80035b2:	1aed      	subs	r5, r5, r3
 80035b4:	eb66 0604 	sbc.w	r6, r6, r4
 80035b8:	00f3      	lsls	r3, r6, #3
 80035ba:	607b      	str	r3, [r7, #4]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80035c2:	607b      	str	r3, [r7, #4]
 80035c4:	00eb      	lsls	r3, r5, #3
 80035c6:	603b      	str	r3, [r7, #0]
 80035c8:	e897 0060 	ldmia.w	r7, {r5, r6}
 80035cc:	186d      	adds	r5, r5, r1
 80035ce:	eb46 0602 	adc.w	r6, r6, r2
 80035d2:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 80035d6:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 80035da:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 80035de:	4655      	mov	r5, sl
 80035e0:	465e      	mov	r6, fp
 80035e2:	4628      	mov	r0, r5
 80035e4:	4631      	mov	r1, r6
 80035e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e8:	f04f 0400 	mov.w	r4, #0
 80035ec:	461a      	mov	r2, r3
 80035ee:	4623      	mov	r3, r4
 80035f0:	f7fd f9e6 	bl	80009c0 <__aeabi_uldivmod>
 80035f4:	4603      	mov	r3, r0
 80035f6:	460c      	mov	r4, r1
 80035f8:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035fa:	4b0b      	ldr	r3, [pc, #44]	; (8003628 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	0c1b      	lsrs	r3, r3, #16
 8003600:	f003 0303 	and.w	r3, r3, #3
 8003604:	3301      	adds	r3, #1
 8003606:	005b      	lsls	r3, r3, #1
 8003608:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 800360a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800360c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800360e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003612:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003614:	e002      	b.n	800361c <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003616:	4b05      	ldr	r3, [pc, #20]	; (800362c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003618:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800361a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800361c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800361e:	4618      	mov	r0, r3
 8003620:	373c      	adds	r7, #60	; 0x3c
 8003622:	46bd      	mov	sp, r7
 8003624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003628:	40023800 	.word	0x40023800
 800362c:	00f42400 	.word	0x00f42400
 8003630:	007a1200 	.word	0x007a1200

08003634 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003634:	b480      	push	{r7}
 8003636:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003638:	4b03      	ldr	r3, [pc, #12]	; (8003648 <HAL_RCC_GetHCLKFreq+0x14>)
 800363a:	681b      	ldr	r3, [r3, #0]
}
 800363c:	4618      	mov	r0, r3
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	20000000 	.word	0x20000000

0800364c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e01d      	b.n	800369a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d106      	bne.n	8003678 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f7fd fe0a 	bl	800128c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2202      	movs	r2, #2
 800367c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	3304      	adds	r3, #4
 8003688:	4619      	mov	r1, r3
 800368a:	4610      	mov	r0, r2
 800368c:	f000 f9fa 	bl	8003a84 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3708      	adds	r7, #8
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b082      	sub	sp, #8
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d101      	bne.n	80036b4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e01d      	b.n	80036f0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d106      	bne.n	80036ce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f000 f815 	bl	80036f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2202      	movs	r2, #2
 80036d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	3304      	adds	r3, #4
 80036de:	4619      	mov	r1, r3
 80036e0:	4610      	mov	r0, r2
 80036e2:	f000 f9cf 	bl	8003a84 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3708      	adds	r7, #8
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2201      	movs	r2, #1
 800371c:	6839      	ldr	r1, [r7, #0]
 800371e:	4618      	mov	r0, r3
 8003720:	f000 fc9a 	bl	8004058 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a15      	ldr	r2, [pc, #84]	; (8003780 <HAL_TIM_PWM_Start+0x74>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d004      	beq.n	8003738 <HAL_TIM_PWM_Start+0x2c>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a14      	ldr	r2, [pc, #80]	; (8003784 <HAL_TIM_PWM_Start+0x78>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d101      	bne.n	800373c <HAL_TIM_PWM_Start+0x30>
 8003738:	2301      	movs	r3, #1
 800373a:	e000      	b.n	800373e <HAL_TIM_PWM_Start+0x32>
 800373c:	2300      	movs	r3, #0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d007      	beq.n	8003752 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	6812      	ldr	r2, [r2, #0]
 800374a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800374c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003750:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f003 0307 	and.w	r3, r3, #7
 800375c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2b06      	cmp	r3, #6
 8003762:	d007      	beq.n	8003774 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	6812      	ldr	r2, [r2, #0]
 800376c:	6812      	ldr	r2, [r2, #0]
 800376e:	f042 0201 	orr.w	r2, r2, #1
 8003772:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3710      	adds	r7, #16
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	40010000 	.word	0x40010000
 8003784:	40010400 	.word	0x40010400

08003788 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800379a:	2b01      	cmp	r3, #1
 800379c:	d101      	bne.n	80037a2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800379e:	2302      	movs	r3, #2
 80037a0:	e0b4      	b.n	800390c <HAL_TIM_PWM_ConfigChannel+0x184>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2202      	movs	r2, #2
 80037ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2b0c      	cmp	r3, #12
 80037b6:	f200 809f 	bhi.w	80038f8 <HAL_TIM_PWM_ConfigChannel+0x170>
 80037ba:	a201      	add	r2, pc, #4	; (adr r2, 80037c0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80037bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c0:	080037f5 	.word	0x080037f5
 80037c4:	080038f9 	.word	0x080038f9
 80037c8:	080038f9 	.word	0x080038f9
 80037cc:	080038f9 	.word	0x080038f9
 80037d0:	08003835 	.word	0x08003835
 80037d4:	080038f9 	.word	0x080038f9
 80037d8:	080038f9 	.word	0x080038f9
 80037dc:	080038f9 	.word	0x080038f9
 80037e0:	08003877 	.word	0x08003877
 80037e4:	080038f9 	.word	0x080038f9
 80037e8:	080038f9 	.word	0x080038f9
 80037ec:	080038f9 	.word	0x080038f9
 80037f0:	080038b7 	.word	0x080038b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68b9      	ldr	r1, [r7, #8]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f000 f9e2 	bl	8003bc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	6812      	ldr	r2, [r2, #0]
 8003808:	6992      	ldr	r2, [r2, #24]
 800380a:	f042 0208 	orr.w	r2, r2, #8
 800380e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	6812      	ldr	r2, [r2, #0]
 8003818:	6992      	ldr	r2, [r2, #24]
 800381a:	f022 0204 	bic.w	r2, r2, #4
 800381e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	6812      	ldr	r2, [r2, #0]
 8003828:	6991      	ldr	r1, [r2, #24]
 800382a:	68ba      	ldr	r2, [r7, #8]
 800382c:	6912      	ldr	r2, [r2, #16]
 800382e:	430a      	orrs	r2, r1
 8003830:	619a      	str	r2, [r3, #24]
      break;
 8003832:	e062      	b.n	80038fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68b9      	ldr	r1, [r7, #8]
 800383a:	4618      	mov	r0, r3
 800383c:	f000 fa32 	bl	8003ca4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68fa      	ldr	r2, [r7, #12]
 8003846:	6812      	ldr	r2, [r2, #0]
 8003848:	6992      	ldr	r2, [r2, #24]
 800384a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800384e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	6812      	ldr	r2, [r2, #0]
 8003858:	6992      	ldr	r2, [r2, #24]
 800385a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800385e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	6812      	ldr	r2, [r2, #0]
 8003868:	6991      	ldr	r1, [r2, #24]
 800386a:	68ba      	ldr	r2, [r7, #8]
 800386c:	6912      	ldr	r2, [r2, #16]
 800386e:	0212      	lsls	r2, r2, #8
 8003870:	430a      	orrs	r2, r1
 8003872:	619a      	str	r2, [r3, #24]
      break;
 8003874:	e041      	b.n	80038fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68b9      	ldr	r1, [r7, #8]
 800387c:	4618      	mov	r0, r3
 800387e:	f000 fa87 	bl	8003d90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	6812      	ldr	r2, [r2, #0]
 800388a:	69d2      	ldr	r2, [r2, #28]
 800388c:	f042 0208 	orr.w	r2, r2, #8
 8003890:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	6812      	ldr	r2, [r2, #0]
 800389a:	69d2      	ldr	r2, [r2, #28]
 800389c:	f022 0204 	bic.w	r2, r2, #4
 80038a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	6812      	ldr	r2, [r2, #0]
 80038aa:	69d1      	ldr	r1, [r2, #28]
 80038ac:	68ba      	ldr	r2, [r7, #8]
 80038ae:	6912      	ldr	r2, [r2, #16]
 80038b0:	430a      	orrs	r2, r1
 80038b2:	61da      	str	r2, [r3, #28]
      break;
 80038b4:	e021      	b.n	80038fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68b9      	ldr	r1, [r7, #8]
 80038bc:	4618      	mov	r0, r3
 80038be:	f000 fadb 	bl	8003e78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	6812      	ldr	r2, [r2, #0]
 80038ca:	69d2      	ldr	r2, [r2, #28]
 80038cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	6812      	ldr	r2, [r2, #0]
 80038da:	69d2      	ldr	r2, [r2, #28]
 80038dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	6812      	ldr	r2, [r2, #0]
 80038ea:	69d1      	ldr	r1, [r2, #28]
 80038ec:	68ba      	ldr	r2, [r7, #8]
 80038ee:	6912      	ldr	r2, [r2, #16]
 80038f0:	0212      	lsls	r2, r2, #8
 80038f2:	430a      	orrs	r2, r1
 80038f4:	61da      	str	r2, [r3, #28]
      break;
 80038f6:	e000      	b.n	80038fa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80038f8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3710      	adds	r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003924:	2b01      	cmp	r3, #1
 8003926:	d101      	bne.n	800392c <HAL_TIM_ConfigClockSource+0x18>
 8003928:	2302      	movs	r3, #2
 800392a:	e0a6      	b.n	8003a7a <HAL_TIM_ConfigClockSource+0x166>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2202      	movs	r2, #2
 8003938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800394a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003952:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2b40      	cmp	r3, #64	; 0x40
 8003962:	d067      	beq.n	8003a34 <HAL_TIM_ConfigClockSource+0x120>
 8003964:	2b40      	cmp	r3, #64	; 0x40
 8003966:	d80b      	bhi.n	8003980 <HAL_TIM_ConfigClockSource+0x6c>
 8003968:	2b10      	cmp	r3, #16
 800396a:	d073      	beq.n	8003a54 <HAL_TIM_ConfigClockSource+0x140>
 800396c:	2b10      	cmp	r3, #16
 800396e:	d802      	bhi.n	8003976 <HAL_TIM_ConfigClockSource+0x62>
 8003970:	2b00      	cmp	r3, #0
 8003972:	d06f      	beq.n	8003a54 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003974:	e078      	b.n	8003a68 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003976:	2b20      	cmp	r3, #32
 8003978:	d06c      	beq.n	8003a54 <HAL_TIM_ConfigClockSource+0x140>
 800397a:	2b30      	cmp	r3, #48	; 0x30
 800397c:	d06a      	beq.n	8003a54 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800397e:	e073      	b.n	8003a68 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003980:	2b70      	cmp	r3, #112	; 0x70
 8003982:	d00d      	beq.n	80039a0 <HAL_TIM_ConfigClockSource+0x8c>
 8003984:	2b70      	cmp	r3, #112	; 0x70
 8003986:	d804      	bhi.n	8003992 <HAL_TIM_ConfigClockSource+0x7e>
 8003988:	2b50      	cmp	r3, #80	; 0x50
 800398a:	d033      	beq.n	80039f4 <HAL_TIM_ConfigClockSource+0xe0>
 800398c:	2b60      	cmp	r3, #96	; 0x60
 800398e:	d041      	beq.n	8003a14 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003990:	e06a      	b.n	8003a68 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003992:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003996:	d066      	beq.n	8003a66 <HAL_TIM_ConfigClockSource+0x152>
 8003998:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800399c:	d017      	beq.n	80039ce <HAL_TIM_ConfigClockSource+0xba>
      break;
 800399e:	e063      	b.n	8003a68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6818      	ldr	r0, [r3, #0]
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	6899      	ldr	r1, [r3, #8]
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685a      	ldr	r2, [r3, #4]
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	f000 fb32 	bl	8004018 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80039c2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68fa      	ldr	r2, [r7, #12]
 80039ca:	609a      	str	r2, [r3, #8]
      break;
 80039cc:	e04c      	b.n	8003a68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6818      	ldr	r0, [r3, #0]
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	6899      	ldr	r1, [r3, #8]
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	685a      	ldr	r2, [r3, #4]
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	f000 fb1b 	bl	8004018 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	6812      	ldr	r2, [r2, #0]
 80039ea:	6892      	ldr	r2, [r2, #8]
 80039ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039f0:	609a      	str	r2, [r3, #8]
      break;
 80039f2:	e039      	b.n	8003a68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6818      	ldr	r0, [r3, #0]
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	6859      	ldr	r1, [r3, #4]
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	461a      	mov	r2, r3
 8003a02:	f000 fa8f 	bl	8003f24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2150      	movs	r1, #80	; 0x50
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f000 fae8 	bl	8003fe2 <TIM_ITRx_SetConfig>
      break;
 8003a12:	e029      	b.n	8003a68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6818      	ldr	r0, [r3, #0]
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	6859      	ldr	r1, [r3, #4]
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	461a      	mov	r2, r3
 8003a22:	f000 faae 	bl	8003f82 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2160      	movs	r1, #96	; 0x60
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f000 fad8 	bl	8003fe2 <TIM_ITRx_SetConfig>
      break;
 8003a32:	e019      	b.n	8003a68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6818      	ldr	r0, [r3, #0]
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	6859      	ldr	r1, [r3, #4]
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	461a      	mov	r2, r3
 8003a42:	f000 fa6f 	bl	8003f24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2140      	movs	r1, #64	; 0x40
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f000 fac8 	bl	8003fe2 <TIM_ITRx_SetConfig>
      break;
 8003a52:	e009      	b.n	8003a68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	4610      	mov	r0, r2
 8003a60:	f000 fabf 	bl	8003fe2 <TIM_ITRx_SetConfig>
      break;
 8003a64:	e000      	b.n	8003a68 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003a66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3710      	adds	r7, #16
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
	...

08003a84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b085      	sub	sp, #20
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a40      	ldr	r2, [pc, #256]	; (8003b98 <TIM_Base_SetConfig+0x114>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d013      	beq.n	8003ac4 <TIM_Base_SetConfig+0x40>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aa2:	d00f      	beq.n	8003ac4 <TIM_Base_SetConfig+0x40>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a3d      	ldr	r2, [pc, #244]	; (8003b9c <TIM_Base_SetConfig+0x118>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d00b      	beq.n	8003ac4 <TIM_Base_SetConfig+0x40>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a3c      	ldr	r2, [pc, #240]	; (8003ba0 <TIM_Base_SetConfig+0x11c>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d007      	beq.n	8003ac4 <TIM_Base_SetConfig+0x40>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a3b      	ldr	r2, [pc, #236]	; (8003ba4 <TIM_Base_SetConfig+0x120>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d003      	beq.n	8003ac4 <TIM_Base_SetConfig+0x40>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a3a      	ldr	r2, [pc, #232]	; (8003ba8 <TIM_Base_SetConfig+0x124>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d108      	bne.n	8003ad6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a2f      	ldr	r2, [pc, #188]	; (8003b98 <TIM_Base_SetConfig+0x114>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d02b      	beq.n	8003b36 <TIM_Base_SetConfig+0xb2>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ae4:	d027      	beq.n	8003b36 <TIM_Base_SetConfig+0xb2>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a2c      	ldr	r2, [pc, #176]	; (8003b9c <TIM_Base_SetConfig+0x118>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d023      	beq.n	8003b36 <TIM_Base_SetConfig+0xb2>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a2b      	ldr	r2, [pc, #172]	; (8003ba0 <TIM_Base_SetConfig+0x11c>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d01f      	beq.n	8003b36 <TIM_Base_SetConfig+0xb2>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a2a      	ldr	r2, [pc, #168]	; (8003ba4 <TIM_Base_SetConfig+0x120>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d01b      	beq.n	8003b36 <TIM_Base_SetConfig+0xb2>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a29      	ldr	r2, [pc, #164]	; (8003ba8 <TIM_Base_SetConfig+0x124>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d017      	beq.n	8003b36 <TIM_Base_SetConfig+0xb2>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a28      	ldr	r2, [pc, #160]	; (8003bac <TIM_Base_SetConfig+0x128>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d013      	beq.n	8003b36 <TIM_Base_SetConfig+0xb2>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a27      	ldr	r2, [pc, #156]	; (8003bb0 <TIM_Base_SetConfig+0x12c>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d00f      	beq.n	8003b36 <TIM_Base_SetConfig+0xb2>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a26      	ldr	r2, [pc, #152]	; (8003bb4 <TIM_Base_SetConfig+0x130>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d00b      	beq.n	8003b36 <TIM_Base_SetConfig+0xb2>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a25      	ldr	r2, [pc, #148]	; (8003bb8 <TIM_Base_SetConfig+0x134>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d007      	beq.n	8003b36 <TIM_Base_SetConfig+0xb2>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a24      	ldr	r2, [pc, #144]	; (8003bbc <TIM_Base_SetConfig+0x138>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d003      	beq.n	8003b36 <TIM_Base_SetConfig+0xb2>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a23      	ldr	r2, [pc, #140]	; (8003bc0 <TIM_Base_SetConfig+0x13c>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d108      	bne.n	8003b48 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	689a      	ldr	r2, [r3, #8]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a0a      	ldr	r2, [pc, #40]	; (8003b98 <TIM_Base_SetConfig+0x114>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d003      	beq.n	8003b7c <TIM_Base_SetConfig+0xf8>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a0c      	ldr	r2, [pc, #48]	; (8003ba8 <TIM_Base_SetConfig+0x124>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d103      	bne.n	8003b84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	691a      	ldr	r2, [r3, #16]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	615a      	str	r2, [r3, #20]
}
 8003b8a:	bf00      	nop
 8003b8c:	3714      	adds	r7, #20
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	40010000 	.word	0x40010000
 8003b9c:	40000400 	.word	0x40000400
 8003ba0:	40000800 	.word	0x40000800
 8003ba4:	40000c00 	.word	0x40000c00
 8003ba8:	40010400 	.word	0x40010400
 8003bac:	40014000 	.word	0x40014000
 8003bb0:	40014400 	.word	0x40014400
 8003bb4:	40014800 	.word	0x40014800
 8003bb8:	40001800 	.word	0x40001800
 8003bbc:	40001c00 	.word	0x40001c00
 8003bc0:	40002000 	.word	0x40002000

08003bc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b087      	sub	sp, #28
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a1b      	ldr	r3, [r3, #32]
 8003bd2:	f023 0201 	bic.w	r2, r3, #1
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f023 0303 	bic.w	r3, r3, #3
 8003bfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	f023 0302 	bic.w	r3, r3, #2
 8003c0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	697a      	ldr	r2, [r7, #20]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a20      	ldr	r2, [pc, #128]	; (8003c9c <TIM_OC1_SetConfig+0xd8>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d003      	beq.n	8003c28 <TIM_OC1_SetConfig+0x64>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a1f      	ldr	r2, [pc, #124]	; (8003ca0 <TIM_OC1_SetConfig+0xdc>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d10c      	bne.n	8003c42 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	f023 0308 	bic.w	r3, r3, #8
 8003c2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	697a      	ldr	r2, [r7, #20]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	f023 0304 	bic.w	r3, r3, #4
 8003c40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a15      	ldr	r2, [pc, #84]	; (8003c9c <TIM_OC1_SetConfig+0xd8>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d003      	beq.n	8003c52 <TIM_OC1_SetConfig+0x8e>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a14      	ldr	r2, [pc, #80]	; (8003ca0 <TIM_OC1_SetConfig+0xdc>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d111      	bne.n	8003c76 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	695b      	ldr	r3, [r3, #20]
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	693a      	ldr	r2, [r7, #16]
 8003c7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	685a      	ldr	r2, [r3, #4]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	697a      	ldr	r2, [r7, #20]
 8003c8e:	621a      	str	r2, [r3, #32]
}
 8003c90:	bf00      	nop
 8003c92:	371c      	adds	r7, #28
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr
 8003c9c:	40010000 	.word	0x40010000
 8003ca0:	40010400 	.word	0x40010400

08003ca4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b087      	sub	sp, #28
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	f023 0210 	bic.w	r2, r3, #16
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	021b      	lsls	r3, r3, #8
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	f023 0320 	bic.w	r3, r3, #32
 8003cee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	011b      	lsls	r3, r3, #4
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a22      	ldr	r2, [pc, #136]	; (8003d88 <TIM_OC2_SetConfig+0xe4>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d003      	beq.n	8003d0c <TIM_OC2_SetConfig+0x68>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a21      	ldr	r2, [pc, #132]	; (8003d8c <TIM_OC2_SetConfig+0xe8>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d10d      	bne.n	8003d28 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	011b      	lsls	r3, r3, #4
 8003d1a:	697a      	ldr	r2, [r7, #20]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d26:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a17      	ldr	r2, [pc, #92]	; (8003d88 <TIM_OC2_SetConfig+0xe4>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d003      	beq.n	8003d38 <TIM_OC2_SetConfig+0x94>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a16      	ldr	r2, [pc, #88]	; (8003d8c <TIM_OC2_SetConfig+0xe8>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d113      	bne.n	8003d60 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	693a      	ldr	r2, [r7, #16]
 8003d64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685a      	ldr	r2, [r3, #4]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	621a      	str	r2, [r3, #32]
}
 8003d7a:	bf00      	nop
 8003d7c:	371c      	adds	r7, #28
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop
 8003d88:	40010000 	.word	0x40010000
 8003d8c:	40010400 	.word	0x40010400

08003d90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b087      	sub	sp, #28
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	69db      	ldr	r3, [r3, #28]
 8003db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f023 0303 	bic.w	r3, r3, #3
 8003dc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003dd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	021b      	lsls	r3, r3, #8
 8003de0:	697a      	ldr	r2, [r7, #20]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a21      	ldr	r2, [pc, #132]	; (8003e70 <TIM_OC3_SetConfig+0xe0>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d003      	beq.n	8003df6 <TIM_OC3_SetConfig+0x66>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a20      	ldr	r2, [pc, #128]	; (8003e74 <TIM_OC3_SetConfig+0xe4>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d10d      	bne.n	8003e12 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003dfc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	021b      	lsls	r3, r3, #8
 8003e04:	697a      	ldr	r2, [r7, #20]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a16      	ldr	r2, [pc, #88]	; (8003e70 <TIM_OC3_SetConfig+0xe0>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d003      	beq.n	8003e22 <TIM_OC3_SetConfig+0x92>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a15      	ldr	r2, [pc, #84]	; (8003e74 <TIM_OC3_SetConfig+0xe4>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d113      	bne.n	8003e4a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	011b      	lsls	r3, r3, #4
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	011b      	lsls	r3, r3, #4
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	685a      	ldr	r2, [r3, #4]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	697a      	ldr	r2, [r7, #20]
 8003e62:	621a      	str	r2, [r3, #32]
}
 8003e64:	bf00      	nop
 8003e66:	371c      	adds	r7, #28
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr
 8003e70:	40010000 	.word	0x40010000
 8003e74:	40010400 	.word	0x40010400

08003e78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b087      	sub	sp, #28
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a1b      	ldr	r3, [r3, #32]
 8003e86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	69db      	ldr	r3, [r3, #28]
 8003e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	021b      	lsls	r3, r3, #8
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ec2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	031b      	lsls	r3, r3, #12
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a12      	ldr	r2, [pc, #72]	; (8003f1c <TIM_OC4_SetConfig+0xa4>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d003      	beq.n	8003ee0 <TIM_OC4_SetConfig+0x68>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a11      	ldr	r2, [pc, #68]	; (8003f20 <TIM_OC4_SetConfig+0xa8>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d109      	bne.n	8003ef4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ee6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	019b      	lsls	r3, r3, #6
 8003eee:	697a      	ldr	r2, [r7, #20]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	697a      	ldr	r2, [r7, #20]
 8003ef8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685a      	ldr	r2, [r3, #4]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	621a      	str	r2, [r3, #32]
}
 8003f0e:	bf00      	nop
 8003f10:	371c      	adds	r7, #28
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	40010000 	.word	0x40010000
 8003f20:	40010400 	.word	0x40010400

08003f24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b087      	sub	sp, #28
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6a1b      	ldr	r3, [r3, #32]
 8003f34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6a1b      	ldr	r3, [r3, #32]
 8003f3a:	f023 0201 	bic.w	r2, r3, #1
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	011b      	lsls	r3, r3, #4
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	f023 030a 	bic.w	r3, r3, #10
 8003f60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	697a      	ldr	r2, [r7, #20]
 8003f74:	621a      	str	r2, [r3, #32]
}
 8003f76:	bf00      	nop
 8003f78:	371c      	adds	r7, #28
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr

08003f82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f82:	b480      	push	{r7}
 8003f84:	b087      	sub	sp, #28
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	60f8      	str	r0, [r7, #12]
 8003f8a:	60b9      	str	r1, [r7, #8]
 8003f8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6a1b      	ldr	r3, [r3, #32]
 8003f92:	f023 0210 	bic.w	r2, r3, #16
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6a1b      	ldr	r3, [r3, #32]
 8003fa4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003fac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	031b      	lsls	r3, r3, #12
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003fbe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	011b      	lsls	r3, r3, #4
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	697a      	ldr	r2, [r7, #20]
 8003fce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	621a      	str	r2, [r3, #32]
}
 8003fd6:	bf00      	nop
 8003fd8:	371c      	adds	r7, #28
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr

08003fe2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	b085      	sub	sp, #20
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
 8003fea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ff8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ffa:	683a      	ldr	r2, [r7, #0]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	f043 0307 	orr.w	r3, r3, #7
 8004004:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	609a      	str	r2, [r3, #8]
}
 800400c:	bf00      	nop
 800400e:	3714      	adds	r7, #20
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004018:	b480      	push	{r7}
 800401a:	b087      	sub	sp, #28
 800401c:	af00      	add	r7, sp, #0
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	60b9      	str	r1, [r7, #8]
 8004022:	607a      	str	r2, [r7, #4]
 8004024:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004032:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	021a      	lsls	r2, r3, #8
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	431a      	orrs	r2, r3
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	4313      	orrs	r3, r2
 8004040:	697a      	ldr	r2, [r7, #20]
 8004042:	4313      	orrs	r3, r2
 8004044:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	697a      	ldr	r2, [r7, #20]
 800404a:	609a      	str	r2, [r3, #8]
}
 800404c:	bf00      	nop
 800404e:	371c      	adds	r7, #28
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004058:	b480      	push	{r7}
 800405a:	b087      	sub	sp, #28
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	f003 031f 	and.w	r3, r3, #31
 800406a:	2201      	movs	r2, #1
 800406c:	fa02 f303 	lsl.w	r3, r2, r3
 8004070:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6a1a      	ldr	r2, [r3, #32]
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	43db      	mvns	r3, r3
 800407a:	401a      	ands	r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6a1a      	ldr	r2, [r3, #32]
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	f003 031f 	and.w	r3, r3, #31
 800408a:	6879      	ldr	r1, [r7, #4]
 800408c:	fa01 f303 	lsl.w	r3, r1, r3
 8004090:	431a      	orrs	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	621a      	str	r2, [r3, #32]
}
 8004096:	bf00      	nop
 8004098:	371c      	adds	r7, #28
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
	...

080040a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b085      	sub	sp, #20
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d101      	bne.n	80040bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040b8:	2302      	movs	r3, #2
 80040ba:	e05a      	b.n	8004172 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2202      	movs	r2, #2
 80040c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68fa      	ldr	r2, [r7, #12]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a21      	ldr	r2, [pc, #132]	; (8004180 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d022      	beq.n	8004146 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004108:	d01d      	beq.n	8004146 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a1d      	ldr	r2, [pc, #116]	; (8004184 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d018      	beq.n	8004146 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a1b      	ldr	r2, [pc, #108]	; (8004188 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d013      	beq.n	8004146 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a1a      	ldr	r2, [pc, #104]	; (800418c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d00e      	beq.n	8004146 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a18      	ldr	r2, [pc, #96]	; (8004190 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d009      	beq.n	8004146 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a17      	ldr	r2, [pc, #92]	; (8004194 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d004      	beq.n	8004146 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a15      	ldr	r2, [pc, #84]	; (8004198 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d10c      	bne.n	8004160 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800414c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	68ba      	ldr	r2, [r7, #8]
 8004154:	4313      	orrs	r3, r2
 8004156:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68ba      	ldr	r2, [r7, #8]
 800415e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3714      	adds	r7, #20
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	40010000 	.word	0x40010000
 8004184:	40000400 	.word	0x40000400
 8004188:	40000800 	.word	0x40000800
 800418c:	40000c00 	.word	0x40000c00
 8004190:	40010400 	.word	0x40010400
 8004194:	40014000 	.word	0x40014000
 8004198:	40001800 	.word	0x40001800

0800419c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80041a6:	2300      	movs	r3, #0
 80041a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d101      	bne.n	80041b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80041b4:	2302      	movs	r3, #2
 80041b6:	e03d      	b.n	8004234 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	4313      	orrs	r3, r2
 80041da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	4313      	orrs	r3, r2
 8004204:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	695b      	ldr	r3, [r3, #20]
 8004210:	4313      	orrs	r3, r2
 8004212:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	69db      	ldr	r3, [r3, #28]
 800421e:	4313      	orrs	r3, r2
 8004220:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004232:	2300      	movs	r3, #0
}
 8004234:	4618      	mov	r0, r3
 8004236:	3714      	adds	r7, #20
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004240:	b084      	sub	sp, #16
 8004242:	b580      	push	{r7, lr}
 8004244:	b084      	sub	sp, #16
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
 800424a:	f107 001c 	add.w	r0, r7, #28
 800424e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004254:	2b01      	cmp	r3, #1
 8004256:	d122      	bne.n	800429e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800425c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800426c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004280:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004282:	2b01      	cmp	r3, #1
 8004284:	d105      	bne.n	8004292 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f001 fafc 	bl	8005890 <USB_CoreReset>
 8004298:	4603      	mov	r3, r0
 800429a:	73fb      	strb	r3, [r7, #15]
 800429c:	e01a      	b.n	80042d4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f001 faf0 	bl	8005890 <USB_CoreReset>
 80042b0:	4603      	mov	r3, r0
 80042b2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80042b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d106      	bne.n	80042c8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042be:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	639a      	str	r2, [r3, #56]	; 0x38
 80042c6:	e005      	b.n	80042d4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80042d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d10b      	bne.n	80042f2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f043 0206 	orr.w	r2, r3, #6
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f043 0220 	orr.w	r2, r3, #32
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80042f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3710      	adds	r7, #16
 80042f8:	46bd      	mov	sp, r7
 80042fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80042fe:	b004      	add	sp, #16
 8004300:	4770      	bx	lr
	...

08004304 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004304:	b480      	push	{r7}
 8004306:	b087      	sub	sp, #28
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	4613      	mov	r3, r2
 8004310:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004312:	79fb      	ldrb	r3, [r7, #7]
 8004314:	2b02      	cmp	r3, #2
 8004316:	d165      	bne.n	80043e4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	4a41      	ldr	r2, [pc, #260]	; (8004420 <USB_SetTurnaroundTime+0x11c>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d906      	bls.n	800432e <USB_SetTurnaroundTime+0x2a>
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	4a40      	ldr	r2, [pc, #256]	; (8004424 <USB_SetTurnaroundTime+0x120>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d802      	bhi.n	800432e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004328:	230f      	movs	r3, #15
 800432a:	617b      	str	r3, [r7, #20]
 800432c:	e062      	b.n	80043f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	4a3c      	ldr	r2, [pc, #240]	; (8004424 <USB_SetTurnaroundTime+0x120>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d906      	bls.n	8004344 <USB_SetTurnaroundTime+0x40>
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	4a3b      	ldr	r2, [pc, #236]	; (8004428 <USB_SetTurnaroundTime+0x124>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d802      	bhi.n	8004344 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800433e:	230e      	movs	r3, #14
 8004340:	617b      	str	r3, [r7, #20]
 8004342:	e057      	b.n	80043f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	4a38      	ldr	r2, [pc, #224]	; (8004428 <USB_SetTurnaroundTime+0x124>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d906      	bls.n	800435a <USB_SetTurnaroundTime+0x56>
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	4a37      	ldr	r2, [pc, #220]	; (800442c <USB_SetTurnaroundTime+0x128>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d802      	bhi.n	800435a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004354:	230d      	movs	r3, #13
 8004356:	617b      	str	r3, [r7, #20]
 8004358:	e04c      	b.n	80043f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	4a33      	ldr	r2, [pc, #204]	; (800442c <USB_SetTurnaroundTime+0x128>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d906      	bls.n	8004370 <USB_SetTurnaroundTime+0x6c>
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	4a32      	ldr	r2, [pc, #200]	; (8004430 <USB_SetTurnaroundTime+0x12c>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d802      	bhi.n	8004370 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800436a:	230c      	movs	r3, #12
 800436c:	617b      	str	r3, [r7, #20]
 800436e:	e041      	b.n	80043f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	4a2f      	ldr	r2, [pc, #188]	; (8004430 <USB_SetTurnaroundTime+0x12c>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d906      	bls.n	8004386 <USB_SetTurnaroundTime+0x82>
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	4a2e      	ldr	r2, [pc, #184]	; (8004434 <USB_SetTurnaroundTime+0x130>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d802      	bhi.n	8004386 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004380:	230b      	movs	r3, #11
 8004382:	617b      	str	r3, [r7, #20]
 8004384:	e036      	b.n	80043f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	4a2a      	ldr	r2, [pc, #168]	; (8004434 <USB_SetTurnaroundTime+0x130>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d906      	bls.n	800439c <USB_SetTurnaroundTime+0x98>
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	4a29      	ldr	r2, [pc, #164]	; (8004438 <USB_SetTurnaroundTime+0x134>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d802      	bhi.n	800439c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004396:	230a      	movs	r3, #10
 8004398:	617b      	str	r3, [r7, #20]
 800439a:	e02b      	b.n	80043f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	4a26      	ldr	r2, [pc, #152]	; (8004438 <USB_SetTurnaroundTime+0x134>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d906      	bls.n	80043b2 <USB_SetTurnaroundTime+0xae>
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	4a25      	ldr	r2, [pc, #148]	; (800443c <USB_SetTurnaroundTime+0x138>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d802      	bhi.n	80043b2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80043ac:	2309      	movs	r3, #9
 80043ae:	617b      	str	r3, [r7, #20]
 80043b0:	e020      	b.n	80043f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	4a21      	ldr	r2, [pc, #132]	; (800443c <USB_SetTurnaroundTime+0x138>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d906      	bls.n	80043c8 <USB_SetTurnaroundTime+0xc4>
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	4a20      	ldr	r2, [pc, #128]	; (8004440 <USB_SetTurnaroundTime+0x13c>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d802      	bhi.n	80043c8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80043c2:	2308      	movs	r3, #8
 80043c4:	617b      	str	r3, [r7, #20]
 80043c6:	e015      	b.n	80043f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	4a1d      	ldr	r2, [pc, #116]	; (8004440 <USB_SetTurnaroundTime+0x13c>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d906      	bls.n	80043de <USB_SetTurnaroundTime+0xda>
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	4a1c      	ldr	r2, [pc, #112]	; (8004444 <USB_SetTurnaroundTime+0x140>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d802      	bhi.n	80043de <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80043d8:	2307      	movs	r3, #7
 80043da:	617b      	str	r3, [r7, #20]
 80043dc:	e00a      	b.n	80043f4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80043de:	2306      	movs	r3, #6
 80043e0:	617b      	str	r3, [r7, #20]
 80043e2:	e007      	b.n	80043f4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80043e4:	79fb      	ldrb	r3, [r7, #7]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d102      	bne.n	80043f0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80043ea:	2309      	movs	r3, #9
 80043ec:	617b      	str	r3, [r7, #20]
 80043ee:	e001      	b.n	80043f4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80043f0:	2309      	movs	r3, #9
 80043f2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	68da      	ldr	r2, [r3, #12]
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	029b      	lsls	r3, r3, #10
 8004408:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800440c:	431a      	orrs	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	371c      	adds	r7, #28
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr
 8004420:	00d8acbf 	.word	0x00d8acbf
 8004424:	00e4e1bf 	.word	0x00e4e1bf
 8004428:	00f423ff 	.word	0x00f423ff
 800442c:	0106737f 	.word	0x0106737f
 8004430:	011a499f 	.word	0x011a499f
 8004434:	01312cff 	.word	0x01312cff
 8004438:	014ca43f 	.word	0x014ca43f
 800443c:	016e35ff 	.word	0x016e35ff
 8004440:	01a6ab1f 	.word	0x01a6ab1f
 8004444:	01e847ff 	.word	0x01e847ff

08004448 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f043 0201 	orr.w	r2, r3, #1
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	370c      	adds	r7, #12
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr

0800446a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800446a:	b480      	push	{r7}
 800446c:	b083      	sub	sp, #12
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f023 0201 	bic.w	r2, r3, #1
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	460b      	mov	r3, r1
 8004496:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80044a4:	78fb      	ldrb	r3, [r7, #3]
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d106      	bne.n	80044b8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	60da      	str	r2, [r3, #12]
 80044b6:	e00b      	b.n	80044d0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80044b8:	78fb      	ldrb	r3, [r7, #3]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d106      	bne.n	80044cc <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	60da      	str	r2, [r3, #12]
 80044ca:	e001      	b.n	80044d0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e003      	b.n	80044d8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80044d0:	2032      	movs	r0, #50	; 0x32
 80044d2:	f7fd f823 	bl	800151c <HAL_Delay>

  return HAL_OK;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3708      	adds	r7, #8
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80044e0:	b084      	sub	sp, #16
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b086      	sub	sp, #24
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
 80044ea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80044ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80044f2:	2300      	movs	r3, #0
 80044f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80044fa:	2300      	movs	r3, #0
 80044fc:	613b      	str	r3, [r7, #16]
 80044fe:	e009      	b.n	8004514 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	3340      	adds	r3, #64	; 0x40
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	4413      	add	r3, r2
 800450a:	2200      	movs	r2, #0
 800450c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	3301      	adds	r3, #1
 8004512:	613b      	str	r3, [r7, #16]
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	2b0e      	cmp	r3, #14
 8004518:	d9f2      	bls.n	8004500 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800451a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800451c:	2b00      	cmp	r3, #0
 800451e:	d11d      	bne.n	800455c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004526:	461a      	mov	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f043 0302 	orr.w	r3, r3, #2
 8004534:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004546:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004552:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	639a      	str	r2, [r3, #56]	; 0x38
 800455a:	e00b      	b.n	8004574 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004560:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800457a:	461a      	mov	r2, r3
 800457c:	2300      	movs	r3, #0
 800457e:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004586:	461a      	mov	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004594:	2b01      	cmp	r3, #1
 8004596:	d10c      	bne.n	80045b2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800459a:	2b00      	cmp	r3, #0
 800459c:	d104      	bne.n	80045a8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800459e:	2100      	movs	r1, #0
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f000 f94b 	bl	800483c <USB_SetDevSpeed>
 80045a6:	e008      	b.n	80045ba <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80045a8:	2101      	movs	r1, #1
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f946 	bl	800483c <USB_SetDevSpeed>
 80045b0:	e003      	b.n	80045ba <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80045b2:	2103      	movs	r1, #3
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 f941 	bl	800483c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80045ba:	2110      	movs	r1, #16
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 f8f5 	bl	80047ac <USB_FlushTxFifo>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d001      	beq.n	80045cc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 f913 	bl	80047f8 <USB_FlushRxFifo>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d001      	beq.n	80045dc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045e2:	461a      	mov	r2, r3
 80045e4:	2300      	movs	r3, #0
 80045e6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045ee:	461a      	mov	r2, r3
 80045f0:	2300      	movs	r3, #0
 80045f2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045fa:	461a      	mov	r2, r3
 80045fc:	2300      	movs	r3, #0
 80045fe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004600:	2300      	movs	r3, #0
 8004602:	613b      	str	r3, [r7, #16]
 8004604:	e043      	b.n	800468e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	015a      	lsls	r2, r3, #5
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	4413      	add	r3, r2
 800460e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004618:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800461c:	d118      	bne.n	8004650 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d10a      	bne.n	800463a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	015a      	lsls	r2, r3, #5
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	4413      	add	r3, r2
 800462c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004630:	461a      	mov	r2, r3
 8004632:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004636:	6013      	str	r3, [r2, #0]
 8004638:	e013      	b.n	8004662 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	015a      	lsls	r2, r3, #5
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	4413      	add	r3, r2
 8004642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004646:	461a      	mov	r2, r3
 8004648:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800464c:	6013      	str	r3, [r2, #0]
 800464e:	e008      	b.n	8004662 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	015a      	lsls	r2, r3, #5
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	4413      	add	r3, r2
 8004658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800465c:	461a      	mov	r2, r3
 800465e:	2300      	movs	r3, #0
 8004660:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	015a      	lsls	r2, r3, #5
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	4413      	add	r3, r2
 800466a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800466e:	461a      	mov	r2, r3
 8004670:	2300      	movs	r3, #0
 8004672:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	015a      	lsls	r2, r3, #5
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	4413      	add	r3, r2
 800467c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004680:	461a      	mov	r2, r3
 8004682:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004686:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	3301      	adds	r3, #1
 800468c:	613b      	str	r3, [r7, #16]
 800468e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	429a      	cmp	r2, r3
 8004694:	d8b7      	bhi.n	8004606 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004696:	2300      	movs	r3, #0
 8004698:	613b      	str	r3, [r7, #16]
 800469a:	e043      	b.n	8004724 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	015a      	lsls	r2, r3, #5
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	4413      	add	r3, r2
 80046a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046b2:	d118      	bne.n	80046e6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10a      	bne.n	80046d0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	015a      	lsls	r2, r3, #5
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	4413      	add	r3, r2
 80046c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046c6:	461a      	mov	r2, r3
 80046c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80046cc:	6013      	str	r3, [r2, #0]
 80046ce:	e013      	b.n	80046f8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	015a      	lsls	r2, r3, #5
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	4413      	add	r3, r2
 80046d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046dc:	461a      	mov	r2, r3
 80046de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80046e2:	6013      	str	r3, [r2, #0]
 80046e4:	e008      	b.n	80046f8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	015a      	lsls	r2, r3, #5
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	4413      	add	r3, r2
 80046ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046f2:	461a      	mov	r2, r3
 80046f4:	2300      	movs	r3, #0
 80046f6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	015a      	lsls	r2, r3, #5
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	4413      	add	r3, r2
 8004700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004704:	461a      	mov	r2, r3
 8004706:	2300      	movs	r3, #0
 8004708:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	015a      	lsls	r2, r3, #5
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	4413      	add	r3, r2
 8004712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004716:	461a      	mov	r2, r3
 8004718:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800471c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	3301      	adds	r3, #1
 8004722:	613b      	str	r3, [r7, #16]
 8004724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	429a      	cmp	r2, r3
 800472a:	d8b7      	bhi.n	800469c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004732:	461a      	mov	r2, r3
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004740:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800474e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004752:	2b00      	cmp	r3, #0
 8004754:	d105      	bne.n	8004762 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	f043 0210 	orr.w	r2, r3, #16
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	699a      	ldr	r2, [r3, #24]
 8004766:	4b10      	ldr	r3, [pc, #64]	; (80047a8 <USB_DevInit+0x2c8>)
 8004768:	4313      	orrs	r3, r2
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800476e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004770:	2b00      	cmp	r3, #0
 8004772:	d005      	beq.n	8004780 <USB_DevInit+0x2a0>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	699b      	ldr	r3, [r3, #24]
 8004778:	f043 0208 	orr.w	r2, r3, #8
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004780:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004782:	2b01      	cmp	r3, #1
 8004784:	d107      	bne.n	8004796 <USB_DevInit+0x2b6>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	699b      	ldr	r3, [r3, #24]
 800478a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800478e:	f043 0304 	orr.w	r3, r3, #4
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004796:	7dfb      	ldrb	r3, [r7, #23]
}
 8004798:	4618      	mov	r0, r3
 800479a:	3718      	adds	r7, #24
 800479c:	46bd      	mov	sp, r7
 800479e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047a2:	b004      	add	sp, #16
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	803c3800 	.word	0x803c3800

080047ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80047b6:	2300      	movs	r3, #0
 80047b8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	019b      	lsls	r3, r3, #6
 80047be:	f043 0220 	orr.w	r2, r3, #32
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	3301      	adds	r3, #1
 80047ca:	60fb      	str	r3, [r7, #12]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	4a09      	ldr	r2, [pc, #36]	; (80047f4 <USB_FlushTxFifo+0x48>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d901      	bls.n	80047d8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	e006      	b.n	80047e6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	f003 0320 	and.w	r3, r3, #32
 80047e0:	2b20      	cmp	r3, #32
 80047e2:	d0f0      	beq.n	80047c6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3714      	adds	r7, #20
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	00030d40 	.word	0x00030d40

080047f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004800:	2300      	movs	r3, #0
 8004802:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2210      	movs	r2, #16
 8004808:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	3301      	adds	r3, #1
 800480e:	60fb      	str	r3, [r7, #12]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	4a09      	ldr	r2, [pc, #36]	; (8004838 <USB_FlushRxFifo+0x40>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d901      	bls.n	800481c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e006      	b.n	800482a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	f003 0310 	and.w	r3, r3, #16
 8004824:	2b10      	cmp	r3, #16
 8004826:	d0f0      	beq.n	800480a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3714      	adds	r7, #20
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	00030d40 	.word	0x00030d40

0800483c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	460b      	mov	r3, r1
 8004846:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004852:	4619      	mov	r1, r3
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	78fb      	ldrb	r3, [r7, #3]
 800485e:	4313      	orrs	r3, r2
 8004860:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	3714      	adds	r7, #20
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004870:	b480      	push	{r7}
 8004872:	b087      	sub	sp, #28
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	f003 0306 	and.w	r3, r3, #6
 8004888:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d102      	bne.n	8004896 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004890:	2300      	movs	r3, #0
 8004892:	75fb      	strb	r3, [r7, #23]
 8004894:	e00a      	b.n	80048ac <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2b02      	cmp	r3, #2
 800489a:	d002      	beq.n	80048a2 <USB_GetDevSpeed+0x32>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2b06      	cmp	r3, #6
 80048a0:	d102      	bne.n	80048a8 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80048a2:	2302      	movs	r3, #2
 80048a4:	75fb      	strb	r3, [r7, #23]
 80048a6:	e001      	b.n	80048ac <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80048a8:	230f      	movs	r3, #15
 80048aa:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80048ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	371c      	adds	r7, #28
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr

080048ba <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80048ba:	b480      	push	{r7}
 80048bc:	b085      	sub	sp, #20
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
 80048c2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	785b      	ldrb	r3, [r3, #1]
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d13c      	bne.n	8004950 <USB_ActivateEndpoint+0x96>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048dc:	4618      	mov	r0, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048e4:	69da      	ldr	r2, [r3, #28]
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	f003 030f 	and.w	r3, r3, #15
 80048ee:	2101      	movs	r1, #1
 80048f0:	fa01 f303 	lsl.w	r3, r1, r3
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	4313      	orrs	r3, r2
 80048f8:	61c3      	str	r3, [r0, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	015a      	lsls	r2, r3, #5
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	4413      	add	r3, r2
 8004902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d158      	bne.n	80049c2 <USB_ActivateEndpoint+0x108>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	015a      	lsls	r2, r3, #5
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	4413      	add	r3, r2
 8004918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800491c:	4618      	mov	r0, r3
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	015a      	lsls	r2, r3, #5
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	4413      	add	r3, r2
 8004926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	78db      	ldrb	r3, [r3, #3]
 8004938:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800493a:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	059b      	lsls	r3, r3, #22
 8004940:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004942:	4313      	orrs	r3, r2
 8004944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004948:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800494c:	6003      	str	r3, [r0, #0]
 800494e:	e038      	b.n	80049c2 <USB_ActivateEndpoint+0x108>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004956:	4618      	mov	r0, r3
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800495e:	69da      	ldr	r2, [r3, #28]
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	f003 030f 	and.w	r3, r3, #15
 8004968:	2101      	movs	r1, #1
 800496a:	fa01 f303 	lsl.w	r3, r1, r3
 800496e:	041b      	lsls	r3, r3, #16
 8004970:	4313      	orrs	r3, r2
 8004972:	61c3      	str	r3, [r0, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	015a      	lsls	r2, r3, #5
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	4413      	add	r3, r2
 800497c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d11b      	bne.n	80049c2 <USB_ActivateEndpoint+0x108>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	015a      	lsls	r2, r3, #5
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	4413      	add	r3, r2
 8004992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004996:	4618      	mov	r0, r3
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	015a      	lsls	r2, r3, #5
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	4413      	add	r3, r2
 80049a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	78db      	ldrb	r3, [r3, #3]
 80049b2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80049b4:	430b      	orrs	r3, r1
 80049b6:	4313      	orrs	r3, r2
 80049b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049c0:	6003      	str	r3, [r0, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3714      	adds	r7, #20
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b085      	sub	sp, #20
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	785b      	ldrb	r3, [r3, #1]
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d165      	bne.n	8004ab8 <USB_DeactivateEndpoint+0xe8>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	015a      	lsls	r2, r3, #5
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	4413      	add	r3, r2
 80049f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a02:	d121      	bne.n	8004a48 <USB_DeactivateEndpoint+0x78>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	015a      	lsls	r2, r3, #5
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a10:	4619      	mov	r1, r3
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	015a      	lsls	r2, r3, #5
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	4413      	add	r3, r2
 8004a1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004a24:	600b      	str	r3, [r1, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	015a      	lsls	r2, r3, #5
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a32:	4619      	mov	r1, r3
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	015a      	lsls	r2, r3, #5
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a46:	600b      	str	r3, [r1, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a4e:	4618      	mov	r0, r3
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	f003 030f 	and.w	r3, r3, #15
 8004a60:	2101      	movs	r1, #1
 8004a62:	fa01 f303 	lsl.w	r3, r1, r3
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	43db      	mvns	r3, r3
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	63c3      	str	r3, [r0, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a74:	4618      	mov	r0, r3
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a7c:	69da      	ldr	r2, [r3, #28]
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	f003 030f 	and.w	r3, r3, #15
 8004a86:	2101      	movs	r1, #1
 8004a88:	fa01 f303 	lsl.w	r3, r1, r3
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	43db      	mvns	r3, r3
 8004a90:	4013      	ands	r3, r2
 8004a92:	61c3      	str	r3, [r0, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	015a      	lsls	r2, r3, #5
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	4413      	add	r3, r2
 8004a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	015a      	lsls	r2, r3, #5
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	4b37      	ldr	r3, [pc, #220]	; (8004b90 <USB_DeactivateEndpoint+0x1c0>)
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	600b      	str	r3, [r1, #0]
 8004ab6:	e064      	b.n	8004b82 <USB_DeactivateEndpoint+0x1b2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	015a      	lsls	r2, r3, #5
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	4413      	add	r3, r2
 8004ac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004aca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ace:	d121      	bne.n	8004b14 <USB_DeactivateEndpoint+0x144>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	015a      	lsls	r2, r3, #5
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	4413      	add	r3, r2
 8004ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004adc:	4619      	mov	r1, r3
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	015a      	lsls	r2, r3, #5
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004af0:	600b      	str	r3, [r1, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	015a      	lsls	r2, r3, #5
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	4413      	add	r3, r2
 8004afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004afe:	4619      	mov	r1, r3
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	015a      	lsls	r2, r3, #5
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	4413      	add	r3, r2
 8004b08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b12:	600b      	str	r3, [r1, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	f003 030f 	and.w	r3, r3, #15
 8004b2c:	2101      	movs	r1, #1
 8004b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b32:	041b      	lsls	r3, r3, #16
 8004b34:	43db      	mvns	r3, r3
 8004b36:	4013      	ands	r3, r2
 8004b38:	63c3      	str	r3, [r0, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b40:	4618      	mov	r0, r3
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b48:	69da      	ldr	r2, [r3, #28]
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	f003 030f 	and.w	r3, r3, #15
 8004b52:	2101      	movs	r1, #1
 8004b54:	fa01 f303 	lsl.w	r3, r1, r3
 8004b58:	041b      	lsls	r3, r3, #16
 8004b5a:	43db      	mvns	r3, r3
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	61c3      	str	r3, [r0, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	015a      	lsls	r2, r3, #5
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	4413      	add	r3, r2
 8004b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	015a      	lsls	r2, r3, #5
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	4413      	add	r3, r2
 8004b76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	4b05      	ldr	r3, [pc, #20]	; (8004b94 <USB_DeactivateEndpoint+0x1c4>)
 8004b7e:	4013      	ands	r3, r2
 8004b80:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004b82:	2300      	movs	r3, #0
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3714      	adds	r7, #20
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr
 8004b90:	ec337800 	.word	0xec337800
 8004b94:	eff37800 	.word	0xeff37800

08004b98 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b08a      	sub	sp, #40	; 0x28
 8004b9c:	af02      	add	r7, sp, #8
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	785b      	ldrb	r3, [r3, #1]
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	f040 816c 	bne.w	8004e92 <USB_EPStartXfer+0x2fa>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d135      	bne.n	8004c2e <USB_EPStartXfer+0x96>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	015a      	lsls	r2, r3, #5
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	4413      	add	r3, r2
 8004bca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bce:	4619      	mov	r1, r3
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	015a      	lsls	r2, r3, #5
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004be2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004be6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	015a      	lsls	r2, r3, #5
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	4413      	add	r3, r2
 8004bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	015a      	lsls	r2, r3, #5
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c08:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	015a      	lsls	r2, r3, #5
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	4413      	add	r3, r2
 8004c12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c16:	4619      	mov	r1, r3
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	015a      	lsls	r2, r3, #5
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	4413      	add	r3, r2
 8004c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	0cdb      	lsrs	r3, r3, #19
 8004c28:	04db      	lsls	r3, r3, #19
 8004c2a:	610b      	str	r3, [r1, #16]
 8004c2c:	e07a      	b.n	8004d24 <USB_EPStartXfer+0x18c>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	015a      	lsls	r2, r3, #5
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	4413      	add	r3, r2
 8004c36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	015a      	lsls	r2, r3, #5
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	4413      	add	r3, r2
 8004c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	0cdb      	lsrs	r3, r3, #19
 8004c4c:	04db      	lsls	r3, r3, #19
 8004c4e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	015a      	lsls	r2, r3, #5
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	4413      	add	r3, r2
 8004c58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	015a      	lsls	r2, r3, #5
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	4413      	add	r3, r2
 8004c66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c6a:	691b      	ldr	r3, [r3, #16]
 8004c6c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c70:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c74:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	015a      	lsls	r2, r3, #5
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c82:	4618      	mov	r0, r3
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	015a      	lsls	r2, r3, #5
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c90:	691a      	ldr	r2, [r3, #16]
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	6959      	ldr	r1, [r3, #20]
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	440b      	add	r3, r1
 8004c9c:	1e59      	subs	r1, r3, #1
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ca6:	04d9      	lsls	r1, r3, #19
 8004ca8:	4ba1      	ldr	r3, [pc, #644]	; (8004f30 <USB_EPStartXfer+0x398>)
 8004caa:	400b      	ands	r3, r1
 8004cac:	4313      	orrs	r3, r2
 8004cae:	6103      	str	r3, [r0, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	015a      	lsls	r2, r3, #5
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	015a      	lsls	r2, r3, #5
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cca:	691a      	ldr	r2, [r3, #16]
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	695b      	ldr	r3, [r3, #20]
 8004cd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	78db      	ldrb	r3, [r3, #3]
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d121      	bne.n	8004d24 <USB_EPStartXfer+0x18c>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	015a      	lsls	r2, r3, #5
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	4413      	add	r3, r2
 8004ce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cec:	4619      	mov	r1, r3
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	015a      	lsls	r2, r3, #5
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004d00:	610b      	str	r3, [r1, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	015a      	lsls	r2, r3, #5
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	4413      	add	r3, r2
 8004d0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d0e:	4619      	mov	r1, r3
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	015a      	lsls	r2, r3, #5
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	4413      	add	r3, r2
 8004d18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d22:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004d24:	79fb      	ldrb	r3, [r7, #7]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d14e      	bne.n	8004dc8 <USB_EPStartXfer+0x230>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d009      	beq.n	8004d46 <USB_EPStartXfer+0x1ae>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	015a      	lsls	r2, r3, #5
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	4413      	add	r3, r2
 8004d3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d3e:	461a      	mov	r2, r3
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	78db      	ldrb	r3, [r3, #3]
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d12a      	bne.n	8004da4 <USB_EPStartXfer+0x20c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d111      	bne.n	8004d82 <USB_EPStartXfer+0x1ea>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	015a      	lsls	r2, r3, #5
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	4413      	add	r3, r2
 8004d66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	015a      	lsls	r2, r3, #5
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	4413      	add	r3, r2
 8004d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d7e:	600b      	str	r3, [r1, #0]
 8004d80:	e010      	b.n	8004da4 <USB_EPStartXfer+0x20c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	015a      	lsls	r2, r3, #5
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	4413      	add	r3, r2
 8004d8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d8e:	4619      	mov	r1, r3
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	015a      	lsls	r2, r3, #5
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	4413      	add	r3, r2
 8004d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004da2:	600b      	str	r3, [r1, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	015a      	lsls	r2, r3, #5
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	4413      	add	r3, r2
 8004dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004db0:	4619      	mov	r1, r3
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	015a      	lsls	r2, r3, #5
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	4413      	add	r3, r2
 8004dba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004dc4:	600b      	str	r3, [r1, #0]
 8004dc6:	e13c      	b.n	8005042 <USB_EPStartXfer+0x4aa>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	015a      	lsls	r2, r3, #5
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	4413      	add	r3, r2
 8004dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	015a      	lsls	r2, r3, #5
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	4413      	add	r3, r2
 8004dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004de8:	600b      	str	r3, [r1, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	78db      	ldrb	r3, [r3, #3]
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d016      	beq.n	8004e20 <USB_EPStartXfer+0x288>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	695b      	ldr	r3, [r3, #20]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	f000 8123 	beq.w	8005042 <USB_EPStartXfer+0x4aa>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e02:	4618      	mov	r0, r3
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	f003 030f 	and.w	r3, r3, #15
 8004e14:	2101      	movs	r1, #1
 8004e16:	fa01 f303 	lsl.w	r3, r1, r3
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	6343      	str	r3, [r0, #52]	; 0x34
 8004e1e:	e110      	b.n	8005042 <USB_EPStartXfer+0x4aa>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d111      	bne.n	8004e54 <USB_EPStartXfer+0x2bc>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	015a      	lsls	r2, r3, #5
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	4413      	add	r3, r2
 8004e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	015a      	lsls	r2, r3, #5
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	4413      	add	r3, r2
 8004e46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e50:	600b      	str	r3, [r1, #0]
 8004e52:	e010      	b.n	8004e76 <USB_EPStartXfer+0x2de>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	015a      	lsls	r2, r3, #5
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	4413      	add	r3, r2
 8004e5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e60:	4619      	mov	r1, r3
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	015a      	lsls	r2, r3, #5
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	4413      	add	r3, r2
 8004e6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e74:	600b      	str	r3, [r1, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	68d9      	ldr	r1, [r3, #12]
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	781a      	ldrb	r2, [r3, #0]
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	b298      	uxth	r0, r3
 8004e84:	79fb      	ldrb	r3, [r7, #7]
 8004e86:	9300      	str	r3, [sp, #0]
 8004e88:	4603      	mov	r3, r0
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	f000 fa43 	bl	8005316 <USB_WritePacket>
 8004e90:	e0d7      	b.n	8005042 <USB_EPStartXfer+0x4aa>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	015a      	lsls	r2, r3, #5
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	4413      	add	r3, r2
 8004e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	015a      	lsls	r2, r3, #5
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	4413      	add	r3, r2
 8004ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	0cdb      	lsrs	r3, r3, #19
 8004eb0:	04db      	lsls	r3, r3, #19
 8004eb2:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	015a      	lsls	r2, r3, #5
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	4413      	add	r3, r2
 8004ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	015a      	lsls	r2, r3, #5
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	4413      	add	r3, r2
 8004eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ed4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ed8:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	695b      	ldr	r3, [r3, #20]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d128      	bne.n	8004f34 <USB_EPStartXfer+0x39c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	015a      	lsls	r2, r3, #5
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	4413      	add	r3, r2
 8004eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eee:	4619      	mov	r1, r3
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	015a      	lsls	r2, r3, #5
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004efc:	691a      	ldr	r2, [r3, #16]
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f06:	4313      	orrs	r3, r2
 8004f08:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	015a      	lsls	r2, r3, #5
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	4413      	add	r3, r2
 8004f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f16:	4619      	mov	r1, r3
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	015a      	lsls	r2, r3, #5
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	4413      	add	r3, r2
 8004f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f2a:	610b      	str	r3, [r1, #16]
 8004f2c:	e038      	b.n	8004fa0 <USB_EPStartXfer+0x408>
 8004f2e:	bf00      	nop
 8004f30:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	695a      	ldr	r2, [r3, #20]
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	1e5a      	subs	r2, r3, #1
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f48:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	015a      	lsls	r2, r3, #5
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	4413      	add	r3, r2
 8004f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f56:	4618      	mov	r0, r3
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	015a      	lsls	r2, r3, #5
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	4413      	add	r3, r2
 8004f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f64:	691a      	ldr	r2, [r3, #16]
 8004f66:	8afb      	ldrh	r3, [r7, #22]
 8004f68:	04d9      	lsls	r1, r3, #19
 8004f6a:	4b38      	ldr	r3, [pc, #224]	; (800504c <USB_EPStartXfer+0x4b4>)
 8004f6c:	400b      	ands	r3, r1
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	6103      	str	r3, [r0, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	015a      	lsls	r2, r3, #5
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	4413      	add	r3, r2
 8004f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f7e:	4618      	mov	r0, r3
 8004f80:	69bb      	ldr	r3, [r7, #24]
 8004f82:	015a      	lsls	r2, r3, #5
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	4413      	add	r3, r2
 8004f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f8c:	691a      	ldr	r2, [r3, #16]
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	8af9      	ldrh	r1, [r7, #22]
 8004f94:	fb01 f303 	mul.w	r3, r1, r3
 8004f98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	6103      	str	r3, [r0, #16]
    }

    if (dma == 1U)
 8004fa0:	79fb      	ldrb	r3, [r7, #7]
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d10d      	bne.n	8004fc2 <USB_EPStartXfer+0x42a>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d009      	beq.n	8004fc2 <USB_EPStartXfer+0x42a>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	015a      	lsls	r2, r3, #5
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fba:	461a      	mov	r2, r3
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	6153      	str	r3, [r2, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	78db      	ldrb	r3, [r3, #3]
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d12a      	bne.n	8005020 <USB_EPStartXfer+0x488>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d111      	bne.n	8004ffe <USB_EPStartXfer+0x466>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	015a      	lsls	r2, r3, #5
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	4413      	add	r3, r2
 8004fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	015a      	lsls	r2, r3, #5
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	4413      	add	r3, r2
 8004ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ffa:	600b      	str	r3, [r1, #0]
 8004ffc:	e010      	b.n	8005020 <USB_EPStartXfer+0x488>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	015a      	lsls	r2, r3, #5
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	4413      	add	r3, r2
 8005006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800500a:	4619      	mov	r1, r3
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	015a      	lsls	r2, r3, #5
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	4413      	add	r3, r2
 8005014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800501e:	600b      	str	r3, [r1, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	015a      	lsls	r2, r3, #5
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	4413      	add	r3, r2
 8005028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800502c:	4619      	mov	r1, r3
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	015a      	lsls	r2, r3, #5
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	4413      	add	r3, r2
 8005036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005040:	600b      	str	r3, [r1, #0]
  }

  return HAL_OK;
 8005042:	2300      	movs	r3, #0
}
 8005044:	4618      	mov	r0, r3
 8005046:	3720      	adds	r7, #32
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}
 800504c:	1ff80000 	.word	0x1ff80000

08005050 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005050:	b480      	push	{r7}
 8005052:	b087      	sub	sp, #28
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	4613      	mov	r3, r2
 800505c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	785b      	ldrb	r3, [r3, #1]
 800506c:	2b01      	cmp	r3, #1
 800506e:	f040 80d8 	bne.w	8005222 <USB_EP0StartXfer+0x1d2>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	695b      	ldr	r3, [r3, #20]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d135      	bne.n	80050e6 <USB_EP0StartXfer+0x96>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	015a      	lsls	r2, r3, #5
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	4413      	add	r3, r2
 8005082:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005086:	4619      	mov	r1, r3
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	015a      	lsls	r2, r3, #5
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	4413      	add	r3, r2
 8005090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800509a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800509e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	015a      	lsls	r2, r3, #5
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	4413      	add	r3, r2
 80050a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ac:	4619      	mov	r1, r3
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	015a      	lsls	r2, r3, #5
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	4413      	add	r3, r2
 80050b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ba:	691b      	ldr	r3, [r3, #16]
 80050bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80050c0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	015a      	lsls	r2, r3, #5
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	4413      	add	r3, r2
 80050ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ce:	4619      	mov	r1, r3
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	015a      	lsls	r2, r3, #5
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	4413      	add	r3, r2
 80050d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	0cdb      	lsrs	r3, r3, #19
 80050e0:	04db      	lsls	r3, r3, #19
 80050e2:	610b      	str	r3, [r1, #16]
 80050e4:	e052      	b.n	800518c <USB_EP0StartXfer+0x13c>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	015a      	lsls	r2, r3, #5
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	4413      	add	r3, r2
 80050ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f2:	4619      	mov	r1, r3
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	015a      	lsls	r2, r3, #5
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	4413      	add	r3, r2
 80050fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	0cdb      	lsrs	r3, r3, #19
 8005104:	04db      	lsls	r3, r3, #19
 8005106:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	015a      	lsls	r2, r3, #5
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	4413      	add	r3, r2
 8005110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005114:	4619      	mov	r1, r3
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	015a      	lsls	r2, r3, #5
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	4413      	add	r3, r2
 800511e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005122:	691b      	ldr	r3, [r3, #16]
 8005124:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005128:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800512c:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	695a      	ldr	r2, [r3, #20]
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	429a      	cmp	r2, r3
 8005138:	d903      	bls.n	8005142 <USB_EP0StartXfer+0xf2>
      {
        ep->xfer_len = ep->maxpacket;
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	689a      	ldr	r2, [r3, #8]
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	015a      	lsls	r2, r3, #5
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	4413      	add	r3, r2
 800514a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800514e:	4619      	mov	r1, r3
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	015a      	lsls	r2, r3, #5
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	4413      	add	r3, r2
 8005158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005162:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	015a      	lsls	r2, r3, #5
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	4413      	add	r3, r2
 800516c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005170:	4619      	mov	r1, r3
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	015a      	lsls	r2, r3, #5
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	4413      	add	r3, r2
 800517a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800517e:	691a      	ldr	r2, [r3, #16]
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	695b      	ldr	r3, [r3, #20]
 8005184:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005188:	4313      	orrs	r3, r2
 800518a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800518c:	79fb      	ldrb	r3, [r7, #7]
 800518e:	2b01      	cmp	r3, #1
 8005190:	d11f      	bne.n	80051d2 <USB_EP0StartXfer+0x182>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d009      	beq.n	80051ae <USB_EP0StartXfer+0x15e>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	015a      	lsls	r2, r3, #5
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	4413      	add	r3, r2
 80051a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051a6:	461a      	mov	r2, r3
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	015a      	lsls	r2, r3, #5
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	4413      	add	r3, r2
 80051b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ba:	4619      	mov	r1, r3
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	015a      	lsls	r2, r3, #5
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	4413      	add	r3, r2
 80051c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80051ce:	600b      	str	r3, [r1, #0]
 80051d0:	e09a      	b.n	8005308 <USB_EP0StartXfer+0x2b8>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	015a      	lsls	r2, r3, #5
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	4413      	add	r3, r2
 80051da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051de:	4619      	mov	r1, r3
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	015a      	lsls	r2, r3, #5
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	4413      	add	r3, r2
 80051e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80051f2:	600b      	str	r3, [r1, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	695b      	ldr	r3, [r3, #20]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	f000 8085 	beq.w	8005308 <USB_EP0StartXfer+0x2b8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005204:	4618      	mov	r0, r3
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800520c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	f003 030f 	and.w	r3, r3, #15
 8005216:	2101      	movs	r1, #1
 8005218:	fa01 f303 	lsl.w	r3, r1, r3
 800521c:	4313      	orrs	r3, r2
 800521e:	6343      	str	r3, [r0, #52]	; 0x34
 8005220:	e072      	b.n	8005308 <USB_EP0StartXfer+0x2b8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	015a      	lsls	r2, r3, #5
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	4413      	add	r3, r2
 800522a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800522e:	4619      	mov	r1, r3
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	015a      	lsls	r2, r3, #5
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	4413      	add	r3, r2
 8005238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	0cdb      	lsrs	r3, r3, #19
 8005240:	04db      	lsls	r3, r3, #19
 8005242:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	015a      	lsls	r2, r3, #5
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	4413      	add	r3, r2
 800524c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005250:	4619      	mov	r1, r3
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	015a      	lsls	r2, r3, #5
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	4413      	add	r3, r2
 800525a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800525e:	691b      	ldr	r3, [r3, #16]
 8005260:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005264:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005268:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	695b      	ldr	r3, [r3, #20]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d003      	beq.n	800527a <USB_EP0StartXfer+0x22a>
    {
      ep->xfer_len = ep->maxpacket;
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	689a      	ldr	r2, [r3, #8]
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	015a      	lsls	r2, r3, #5
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	4413      	add	r3, r2
 8005282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005286:	4619      	mov	r1, r3
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	015a      	lsls	r2, r3, #5
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	4413      	add	r3, r2
 8005290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800529a:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	015a      	lsls	r2, r3, #5
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	4413      	add	r3, r2
 80052a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052a8:	4619      	mov	r1, r3
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	015a      	lsls	r2, r3, #5
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	4413      	add	r3, r2
 80052b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b6:	691a      	ldr	r2, [r3, #16]
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052c0:	4313      	orrs	r3, r2
 80052c2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80052c4:	79fb      	ldrb	r3, [r7, #7]
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d10d      	bne.n	80052e6 <USB_EP0StartXfer+0x296>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d009      	beq.n	80052e6 <USB_EP0StartXfer+0x296>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	015a      	lsls	r2, r3, #5
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	4413      	add	r3, r2
 80052da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052de:	461a      	mov	r2, r3
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	6153      	str	r3, [r2, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	015a      	lsls	r2, r3, #5
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	4413      	add	r3, r2
 80052ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052f2:	4619      	mov	r1, r3
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	015a      	lsls	r2, r3, #5
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	4413      	add	r3, r2
 80052fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005306:	600b      	str	r3, [r1, #0]
  }

  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	371c      	adds	r7, #28
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr

08005316 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005316:	b480      	push	{r7}
 8005318:	b089      	sub	sp, #36	; 0x24
 800531a:	af00      	add	r7, sp, #0
 800531c:	60f8      	str	r0, [r7, #12]
 800531e:	60b9      	str	r1, [r7, #8]
 8005320:	4611      	mov	r1, r2
 8005322:	461a      	mov	r2, r3
 8005324:	460b      	mov	r3, r1
 8005326:	71fb      	strb	r3, [r7, #7]
 8005328:	4613      	mov	r3, r2
 800532a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005334:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005338:	2b00      	cmp	r3, #0
 800533a:	d11a      	bne.n	8005372 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800533c:	88bb      	ldrh	r3, [r7, #4]
 800533e:	3303      	adds	r3, #3
 8005340:	089b      	lsrs	r3, r3, #2
 8005342:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005344:	2300      	movs	r3, #0
 8005346:	61bb      	str	r3, [r7, #24]
 8005348:	e00f      	b.n	800536a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800534a:	79fb      	ldrb	r3, [r7, #7]
 800534c:	031a      	lsls	r2, r3, #12
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	4413      	add	r3, r2
 8005352:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005356:	461a      	mov	r2, r3
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	3304      	adds	r3, #4
 8005362:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	3301      	adds	r3, #1
 8005368:	61bb      	str	r3, [r7, #24]
 800536a:	69ba      	ldr	r2, [r7, #24]
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	429a      	cmp	r2, r3
 8005370:	d3eb      	bcc.n	800534a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005372:	2300      	movs	r3, #0
}
 8005374:	4618      	mov	r0, r3
 8005376:	3724      	adds	r7, #36	; 0x24
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005380:	b480      	push	{r7}
 8005382:	b089      	sub	sp, #36	; 0x24
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	4613      	mov	r3, r2
 800538c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005396:	88fb      	ldrh	r3, [r7, #6]
 8005398:	3303      	adds	r3, #3
 800539a:	089b      	lsrs	r3, r3, #2
 800539c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800539e:	2300      	movs	r3, #0
 80053a0:	61bb      	str	r3, [r7, #24]
 80053a2:	e00b      	b.n	80053bc <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	601a      	str	r2, [r3, #0]
    pDest++;
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	3304      	adds	r3, #4
 80053b4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	3301      	adds	r3, #1
 80053ba:	61bb      	str	r3, [r7, #24]
 80053bc:	69ba      	ldr	r2, [r7, #24]
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d3ef      	bcc.n	80053a4 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80053c4:	69fb      	ldr	r3, [r7, #28]
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3724      	adds	r7, #36	; 0x24
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr

080053d2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80053d2:	b480      	push	{r7}
 80053d4:	b085      	sub	sp, #20
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
 80053da:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	785b      	ldrb	r3, [r3, #1]
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d12e      	bne.n	800544c <USB_EPSetStall+0x7a>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	015a      	lsls	r2, r3, #5
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	4413      	add	r3, r2
 80053f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	db13      	blt.n	8005428 <USB_EPSetStall+0x56>
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d010      	beq.n	8005428 <USB_EPSetStall+0x56>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	015a      	lsls	r2, r3, #5
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	4413      	add	r3, r2
 800540e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005412:	4619      	mov	r1, r3
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	015a      	lsls	r2, r3, #5
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	4413      	add	r3, r2
 800541c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005426:	600b      	str	r3, [r1, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	015a      	lsls	r2, r3, #5
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	4413      	add	r3, r2
 8005430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005434:	4619      	mov	r1, r3
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	015a      	lsls	r2, r3, #5
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	4413      	add	r3, r2
 800543e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005448:	600b      	str	r3, [r1, #0]
 800544a:	e02d      	b.n	80054a8 <USB_EPSetStall+0xd6>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	015a      	lsls	r2, r3, #5
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	4413      	add	r3, r2
 8005454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	db13      	blt.n	8005486 <USB_EPSetStall+0xb4>
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d010      	beq.n	8005486 <USB_EPSetStall+0xb4>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	015a      	lsls	r2, r3, #5
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	4413      	add	r3, r2
 800546c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005470:	4619      	mov	r1, r3
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	015a      	lsls	r2, r3, #5
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	4413      	add	r3, r2
 800547a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005484:	600b      	str	r3, [r1, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	015a      	lsls	r2, r3, #5
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	4413      	add	r3, r2
 800548e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005492:	4619      	mov	r1, r3
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	015a      	lsls	r2, r3, #5
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	4413      	add	r3, r2
 800549c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80054a6:	600b      	str	r3, [r1, #0]
  }

  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3714      	adds	r7, #20
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr

080054b6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80054b6:	b480      	push	{r7}
 80054b8:	b085      	sub	sp, #20
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
 80054be:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	785b      	ldrb	r3, [r3, #1]
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d12a      	bne.n	8005528 <USB_EPClearStall+0x72>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	015a      	lsls	r2, r3, #5
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	4413      	add	r3, r2
 80054da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054de:	4619      	mov	r1, r3
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	015a      	lsls	r2, r3, #5
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	4413      	add	r3, r2
 80054e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80054f2:	600b      	str	r3, [r1, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	78db      	ldrb	r3, [r3, #3]
 80054f8:	2b03      	cmp	r3, #3
 80054fa:	d003      	beq.n	8005504 <USB_EPClearStall+0x4e>
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	78db      	ldrb	r3, [r3, #3]
 8005500:	2b02      	cmp	r3, #2
 8005502:	d13b      	bne.n	800557c <USB_EPClearStall+0xc6>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	015a      	lsls	r2, r3, #5
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	4413      	add	r3, r2
 800550c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005510:	4619      	mov	r1, r3
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	015a      	lsls	r2, r3, #5
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	4413      	add	r3, r2
 800551a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005524:	600b      	str	r3, [r1, #0]
 8005526:	e029      	b.n	800557c <USB_EPClearStall+0xc6>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	015a      	lsls	r2, r3, #5
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	4413      	add	r3, r2
 8005530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005534:	4619      	mov	r1, r3
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	015a      	lsls	r2, r3, #5
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	4413      	add	r3, r2
 800553e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005548:	600b      	str	r3, [r1, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	78db      	ldrb	r3, [r3, #3]
 800554e:	2b03      	cmp	r3, #3
 8005550:	d003      	beq.n	800555a <USB_EPClearStall+0xa4>
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	78db      	ldrb	r3, [r3, #3]
 8005556:	2b02      	cmp	r3, #2
 8005558:	d110      	bne.n	800557c <USB_EPClearStall+0xc6>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	015a      	lsls	r2, r3, #5
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	4413      	add	r3, r2
 8005562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005566:	4619      	mov	r1, r3
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	015a      	lsls	r2, r3, #5
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	4413      	add	r3, r2
 8005570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800557a:	600b      	str	r3, [r1, #0]
    }
  }
  return HAL_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	3714      	adds	r7, #20
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr

0800558a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800558a:	b480      	push	{r7}
 800558c:	b085      	sub	sp, #20
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
 8005592:	460b      	mov	r3, r1
 8005594:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055a0:	461a      	mov	r2, r3
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80055ae:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055b6:	4619      	mov	r1, r3
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	78fb      	ldrb	r3, [r7, #3]
 80055c2:	011b      	lsls	r3, r3, #4
 80055c4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80055c8:	4313      	orrs	r3, r2
 80055ca:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3714      	adds	r7, #20
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr

080055da <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80055da:	b580      	push	{r7, lr}
 80055dc:	b084      	sub	sp, #16
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ec:	461a      	mov	r2, r3
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	f023 0302 	bic.w	r3, r3, #2
 80055fa:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80055fc:	2003      	movs	r0, #3
 80055fe:	f7fb ff8d 	bl	800151c <HAL_Delay>

  return HAL_OK;
 8005602:	2300      	movs	r3, #0
}
 8005604:	4618      	mov	r0, r3
 8005606:	3710      	adds	r7, #16
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800561e:	461a      	mov	r2, r3
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	f043 0302 	orr.w	r3, r3, #2
 800562c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800562e:	2003      	movs	r0, #3
 8005630:	f7fb ff74 	bl	800151c <HAL_Delay>

  return HAL_OK;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	3710      	adds	r7, #16
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}

0800563e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800563e:	b480      	push	{r7}
 8005640:	b085      	sub	sp, #20
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	695b      	ldr	r3, [r3, #20]
 800564a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	699b      	ldr	r3, [r3, #24]
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	4013      	ands	r3, r2
 8005654:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005656:	68fb      	ldr	r3, [r7, #12]
}
 8005658:	4618      	mov	r0, r3
 800565a:	3714      	adds	r7, #20
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005664:	b480      	push	{r7}
 8005666:	b085      	sub	sp, #20
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005676:	699b      	ldr	r3, [r3, #24]
 8005678:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005680:	69db      	ldr	r3, [r3, #28]
 8005682:	68ba      	ldr	r2, [r7, #8]
 8005684:	4013      	ands	r3, r2
 8005686:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	0c1b      	lsrs	r3, r3, #16
}
 800568c:	4618      	mov	r0, r3
 800568e:	3714      	adds	r7, #20
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005698:	b480      	push	{r7}
 800569a:	b085      	sub	sp, #20
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056aa:	699b      	ldr	r3, [r3, #24]
 80056ac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056b4:	69db      	ldr	r3, [r3, #28]
 80056b6:	68ba      	ldr	r2, [r7, #8]
 80056b8:	4013      	ands	r3, r2
 80056ba:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	b29b      	uxth	r3, r3
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3714      	adds	r7, #20
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b085      	sub	sp, #20
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	460b      	mov	r3, r1
 80056d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80056dc:	78fb      	ldrb	r3, [r7, #3]
 80056de:	015a      	lsls	r2, r3, #5
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	4413      	add	r3, r2
 80056e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056f2:	695b      	ldr	r3, [r3, #20]
 80056f4:	68ba      	ldr	r2, [r7, #8]
 80056f6:	4013      	ands	r3, r2
 80056f8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80056fa:	68bb      	ldr	r3, [r7, #8]
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3714      	adds	r7, #20
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005708:	b480      	push	{r7}
 800570a:	b087      	sub	sp, #28
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	460b      	mov	r3, r1
 8005712:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800571e:	691b      	ldr	r3, [r3, #16]
 8005720:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800572a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800572c:	78fb      	ldrb	r3, [r7, #3]
 800572e:	f003 030f 	and.w	r3, r3, #15
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	fa22 f303 	lsr.w	r3, r2, r3
 8005738:	01db      	lsls	r3, r3, #7
 800573a:	b2db      	uxtb	r3, r3
 800573c:	693a      	ldr	r2, [r7, #16]
 800573e:	4313      	orrs	r3, r2
 8005740:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005742:	78fb      	ldrb	r3, [r7, #3]
 8005744:	015a      	lsls	r2, r3, #5
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	4413      	add	r3, r2
 800574a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800574e:	689a      	ldr	r2, [r3, #8]
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	4013      	ands	r3, r2
 8005754:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005756:	68bb      	ldr	r3, [r7, #8]
}
 8005758:	4618      	mov	r0, r3
 800575a:	371c      	adds	r7, #28
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	695b      	ldr	r3, [r3, #20]
 8005770:	f003 0301 	and.w	r3, r3, #1
}
 8005774:	4618      	mov	r0, r3
 8005776:	370c      	adds	r7, #12
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005780:	b480      	push	{r7}
 8005782:	b085      	sub	sp, #20
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005792:	461a      	mov	r2, r3
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80057a0:	f023 0307 	bic.w	r3, r3, #7
 80057a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ac:	461a      	mov	r2, r3
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057ba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3714      	adds	r7, #20
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr
	...

080057cc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b087      	sub	sp, #28
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	460b      	mov	r3, r1
 80057d6:	607a      	str	r2, [r7, #4]
 80057d8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	333c      	adds	r3, #60	; 0x3c
 80057e2:	3304      	adds	r3, #4
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	4a28      	ldr	r2, [pc, #160]	; (800588c <USB_EP0_OutStart+0xc0>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d90a      	bls.n	8005806 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005800:	d101      	bne.n	8005806 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005802:	2300      	movs	r3, #0
 8005804:	e03b      	b.n	800587e <USB_EP0_OutStart+0xb2>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800580c:	461a      	mov	r2, r3
 800580e:	2300      	movs	r3, #0
 8005810:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005818:	461a      	mov	r2, r3
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005820:	691b      	ldr	r3, [r3, #16]
 8005822:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005826:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800582e:	461a      	mov	r2, r3
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005836:	691b      	ldr	r3, [r3, #16]
 8005838:	f043 0318 	orr.w	r3, r3, #24
 800583c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005844:	461a      	mov	r2, r3
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005852:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005854:	7afb      	ldrb	r3, [r7, #11]
 8005856:	2b01      	cmp	r3, #1
 8005858:	d110      	bne.n	800587c <USB_EP0_OutStart+0xb0>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005860:	461a      	mov	r2, r3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800586c:	461a      	mov	r2, r3
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800587a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	371c      	adds	r7, #28
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	4f54300a 	.word	0x4f54300a

08005890 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005898:	2300      	movs	r3, #0
 800589a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	3301      	adds	r3, #1
 80058a0:	60fb      	str	r3, [r7, #12]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	4a13      	ldr	r2, [pc, #76]	; (80058f4 <USB_CoreReset+0x64>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d901      	bls.n	80058ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80058aa:	2303      	movs	r3, #3
 80058ac:	e01b      	b.n	80058e6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	691b      	ldr	r3, [r3, #16]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	daf2      	bge.n	800589c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80058b6:	2300      	movs	r3, #0
 80058b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	f043 0201 	orr.w	r2, r3, #1
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	3301      	adds	r3, #1
 80058ca:	60fb      	str	r3, [r7, #12]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	4a09      	ldr	r2, [pc, #36]	; (80058f4 <USB_CoreReset+0x64>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d901      	bls.n	80058d8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80058d4:	2303      	movs	r3, #3
 80058d6:	e006      	b.n	80058e6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	f003 0301 	and.w	r3, r3, #1
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d0f0      	beq.n	80058c6 <USB_CoreReset+0x36>

  return HAL_OK;
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3714      	adds	r7, #20
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr
 80058f2:	bf00      	nop
 80058f4:	00030d40 	.word	0x00030d40

080058f8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	460b      	mov	r3, r1
 8005902:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005904:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005908:	f002 f95e 	bl	8007bc8 <malloc>
 800590c:	4603      	mov	r3, r0
 800590e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d105      	bne.n	8005922 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800591e:	2302      	movs	r3, #2
 8005920:	e066      	b.n	80059f0 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	68fa      	ldr	r2, [r7, #12]
 8005926:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	7c1b      	ldrb	r3, [r3, #16]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d119      	bne.n	8005966 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005932:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005936:	2202      	movs	r2, #2
 8005938:	2181      	movs	r1, #129	; 0x81
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f001 ffa1 	bl	8007882 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005946:	f44f 7300 	mov.w	r3, #512	; 0x200
 800594a:	2202      	movs	r2, #2
 800594c:	2101      	movs	r1, #1
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f001 ff97 	bl	8007882 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2210      	movs	r2, #16
 8005960:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005964:	e016      	b.n	8005994 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005966:	2340      	movs	r3, #64	; 0x40
 8005968:	2202      	movs	r2, #2
 800596a:	2181      	movs	r1, #129	; 0x81
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f001 ff88 	bl	8007882 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2201      	movs	r2, #1
 8005976:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005978:	2340      	movs	r3, #64	; 0x40
 800597a:	2202      	movs	r2, #2
 800597c:	2101      	movs	r1, #1
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f001 ff7f 	bl	8007882 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2210      	movs	r2, #16
 8005990:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005994:	2308      	movs	r3, #8
 8005996:	2203      	movs	r2, #3
 8005998:	2182      	movs	r1, #130	; 0x82
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f001 ff71 	bl	8007882 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2200      	movs	r2, #0
 80059be:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	7c1b      	ldrb	r3, [r3, #16]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d109      	bne.n	80059de <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80059d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059d4:	2101      	movs	r1, #1
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f002 f842 	bl	8007a60 <USBD_LL_PrepareReceive>
 80059dc:	e007      	b.n	80059ee <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80059e4:	2340      	movs	r3, #64	; 0x40
 80059e6:	2101      	movs	r1, #1
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f002 f839 	bl	8007a60 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80059ee:	2300      	movs	r3, #0
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3710      	adds	r7, #16
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	460b      	mov	r3, r1
 8005a02:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8005a04:	2300      	movs	r3, #0
 8005a06:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005a08:	2181      	movs	r1, #129	; 0x81
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f001 ff5f 	bl	80078ce <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005a16:	2101      	movs	r1, #1
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f001 ff58 	bl	80078ce <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005a26:	2182      	movs	r1, #130	; 0x82
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f001 ff50 	bl	80078ce <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d00e      	beq.n	8005a66 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f002 f8bd 	bl	8007bd8 <free>
    pdev->pClassData = NULL;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8005a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3710      	adds	r7, #16
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b086      	sub	sp, #24
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a80:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005a82:	2300      	movs	r3, #0
 8005a84:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005a86:	2300      	movs	r3, #0
 8005a88:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d03a      	beq.n	8005b10 <USBD_CDC_Setup+0xa0>
 8005a9a:	2b20      	cmp	r3, #32
 8005a9c:	f040 8097 	bne.w	8005bce <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	88db      	ldrh	r3, [r3, #6]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d029      	beq.n	8005afc <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	b25b      	sxtb	r3, r3
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	da11      	bge.n	8005ad6 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	683a      	ldr	r2, [r7, #0]
 8005abc:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8005abe:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005ac0:	683a      	ldr	r2, [r7, #0]
 8005ac2:	88d2      	ldrh	r2, [r2, #6]
 8005ac4:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005ac6:	6939      	ldr	r1, [r7, #16]
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	88db      	ldrh	r3, [r3, #6]
 8005acc:	461a      	mov	r2, r3
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f001 fa9d 	bl	800700e <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8005ad4:	e082      	b.n	8005bdc <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	785a      	ldrb	r2, [r3, #1]
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	88db      	ldrh	r3, [r3, #6]
 8005ae4:	b2da      	uxtb	r2, r3
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005aec:	6939      	ldr	r1, [r7, #16]
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	88db      	ldrh	r3, [r3, #6]
 8005af2:	461a      	mov	r2, r3
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f001 fab6 	bl	8007066 <USBD_CtlPrepareRx>
    break;
 8005afa:	e06f      	b.n	8005bdc <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	683a      	ldr	r2, [r7, #0]
 8005b06:	7850      	ldrb	r0, [r2, #1]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	6839      	ldr	r1, [r7, #0]
 8005b0c:	4798      	blx	r3
    break;
 8005b0e:	e065      	b.n	8005bdc <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	785b      	ldrb	r3, [r3, #1]
 8005b14:	2b0b      	cmp	r3, #11
 8005b16:	d84f      	bhi.n	8005bb8 <USBD_CDC_Setup+0x148>
 8005b18:	a201      	add	r2, pc, #4	; (adr r2, 8005b20 <USBD_CDC_Setup+0xb0>)
 8005b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b1e:	bf00      	nop
 8005b20:	08005b51 	.word	0x08005b51
 8005b24:	08005bc7 	.word	0x08005bc7
 8005b28:	08005bb9 	.word	0x08005bb9
 8005b2c:	08005bb9 	.word	0x08005bb9
 8005b30:	08005bb9 	.word	0x08005bb9
 8005b34:	08005bb9 	.word	0x08005bb9
 8005b38:	08005bb9 	.word	0x08005bb9
 8005b3c:	08005bb9 	.word	0x08005bb9
 8005b40:	08005bb9 	.word	0x08005bb9
 8005b44:	08005bb9 	.word	0x08005bb9
 8005b48:	08005b79 	.word	0x08005b79
 8005b4c:	08005ba1 	.word	0x08005ba1
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b56:	2b03      	cmp	r3, #3
 8005b58:	d107      	bne.n	8005b6a <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005b5a:	f107 030c 	add.w	r3, r7, #12
 8005b5e:	2202      	movs	r2, #2
 8005b60:	4619      	mov	r1, r3
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f001 fa53 	bl	800700e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005b68:	e030      	b.n	8005bcc <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8005b6a:	6839      	ldr	r1, [r7, #0]
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f001 f9dd 	bl	8006f2c <USBD_CtlError>
        ret = USBD_FAIL;
 8005b72:	2303      	movs	r3, #3
 8005b74:	75fb      	strb	r3, [r7, #23]
      break;
 8005b76:	e029      	b.n	8005bcc <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b7e:	2b03      	cmp	r3, #3
 8005b80:	d107      	bne.n	8005b92 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005b82:	f107 030f 	add.w	r3, r7, #15
 8005b86:	2201      	movs	r2, #1
 8005b88:	4619      	mov	r1, r3
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f001 fa3f 	bl	800700e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005b90:	e01c      	b.n	8005bcc <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8005b92:	6839      	ldr	r1, [r7, #0]
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f001 f9c9 	bl	8006f2c <USBD_CtlError>
        ret = USBD_FAIL;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	75fb      	strb	r3, [r7, #23]
      break;
 8005b9e:	e015      	b.n	8005bcc <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ba6:	2b03      	cmp	r3, #3
 8005ba8:	d00f      	beq.n	8005bca <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8005baa:	6839      	ldr	r1, [r7, #0]
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f001 f9bd 	bl	8006f2c <USBD_CtlError>
        ret = USBD_FAIL;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005bb6:	e008      	b.n	8005bca <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8005bb8:	6839      	ldr	r1, [r7, #0]
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f001 f9b6 	bl	8006f2c <USBD_CtlError>
      ret = USBD_FAIL;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	75fb      	strb	r3, [r7, #23]
      break;
 8005bc4:	e002      	b.n	8005bcc <USBD_CDC_Setup+0x15c>
      break;
 8005bc6:	bf00      	nop
 8005bc8:	e008      	b.n	8005bdc <USBD_CDC_Setup+0x16c>
      break;
 8005bca:	bf00      	nop
    }
    break;
 8005bcc:	e006      	b.n	8005bdc <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8005bce:	6839      	ldr	r1, [r7, #0]
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f001 f9ab 	bl	8006f2c <USBD_CtlError>
    ret = USBD_FAIL;
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	75fb      	strb	r3, [r7, #23]
    break;
 8005bda:	bf00      	nop
  }

  return (uint8_t)ret;
 8005bdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3718      	adds	r7, #24
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop

08005be8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005bfa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d101      	bne.n	8005c0a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005c06:	2303      	movs	r3, #3
 8005c08:	e049      	b.n	8005c9e <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c10:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005c12:	78fa      	ldrb	r2, [r7, #3]
 8005c14:	6879      	ldr	r1, [r7, #4]
 8005c16:	4613      	mov	r3, r2
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	4413      	add	r3, r2
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	440b      	add	r3, r1
 8005c20:	3318      	adds	r3, #24
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d029      	beq.n	8005c7c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005c28:	78fa      	ldrb	r2, [r7, #3]
 8005c2a:	6879      	ldr	r1, [r7, #4]
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	4413      	add	r3, r2
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	440b      	add	r3, r1
 8005c36:	3318      	adds	r3, #24
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	78f9      	ldrb	r1, [r7, #3]
 8005c3c:	68f8      	ldr	r0, [r7, #12]
 8005c3e:	460b      	mov	r3, r1
 8005c40:	00db      	lsls	r3, r3, #3
 8005c42:	1a5b      	subs	r3, r3, r1
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	4403      	add	r3, r0
 8005c48:	3344      	adds	r3, #68	; 0x44
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	fbb2 f1f3 	udiv	r1, r2, r3
 8005c50:	fb03 f301 	mul.w	r3, r3, r1
 8005c54:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d110      	bne.n	8005c7c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005c5a:	78fa      	ldrb	r2, [r7, #3]
 8005c5c:	6879      	ldr	r1, [r7, #4]
 8005c5e:	4613      	mov	r3, r2
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	4413      	add	r3, r2
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	440b      	add	r3, r1
 8005c68:	3318      	adds	r3, #24
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005c6e:	78f9      	ldrb	r1, [r7, #3]
 8005c70:	2300      	movs	r3, #0
 8005c72:	2200      	movs	r2, #0
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f001 fed2 	bl	8007a1e <USBD_LL_Transmit>
 8005c7a:	e00f      	b.n	8005c9c <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	68ba      	ldr	r2, [r7, #8]
 8005c8e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005c92:	68ba      	ldr	r2, [r7, #8]
 8005c94:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005c98:	78fa      	ldrb	r2, [r7, #3]
 8005c9a:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3710      	adds	r7, #16
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	b084      	sub	sp, #16
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
 8005cae:	460b      	mov	r3, r1
 8005cb0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005cb8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d101      	bne.n	8005cc8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	e015      	b.n	8005cf4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005cc8:	78fb      	ldrb	r3, [r7, #3]
 8005cca:	4619      	mov	r1, r3
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f001 fee8 	bl	8007aa2 <USBD_LL_GetRxDataSize>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005cee:	4611      	mov	r1, r2
 8005cf0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005cf2:	2300      	movs	r3, #0
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3710      	adds	r7, #16
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d0a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d015      	beq.n	8005d42 <USBD_CDC_EP0_RxReady+0x46>
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005d1c:	2bff      	cmp	r3, #255	; 0xff
 8005d1e:	d010      	beq.n	8005d42 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005d2e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005d36:	b292      	uxth	r2, r2
 8005d38:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	22ff      	movs	r2, #255	; 0xff
 8005d3e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8005d42:	2300      	movs	r3, #0
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3710      	adds	r7, #16
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2243      	movs	r2, #67	; 0x43
 8005d58:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005d5a:	4b03      	ldr	r3, [pc, #12]	; (8005d68 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	370c      	adds	r7, #12
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr
 8005d68:	20000094 	.word	0x20000094

08005d6c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2243      	movs	r2, #67	; 0x43
 8005d78:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005d7a:	4b03      	ldr	r3, [pc, #12]	; (8005d88 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	370c      	adds	r7, #12
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr
 8005d88:	20000050 	.word	0x20000050

08005d8c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2243      	movs	r2, #67	; 0x43
 8005d98:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005d9a:	4b03      	ldr	r3, [pc, #12]	; (8005da8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	370c      	adds	r7, #12
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr
 8005da8:	200000d8 	.word	0x200000d8

08005dac <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	220a      	movs	r2, #10
 8005db8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005dba:	4b03      	ldr	r3, [pc, #12]	; (8005dc8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr
 8005dc8:	2000000c 	.word	0x2000000c

08005dcc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b083      	sub	sp, #12
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d101      	bne.n	8005de0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	e004      	b.n	8005dea <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	683a      	ldr	r2, [r7, #0]
 8005de4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	370c      	adds	r7, #12
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr

08005df6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005df6:	b480      	push	{r7}
 8005df8:	b087      	sub	sp, #28
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	60f8      	str	r0, [r7, #12]
 8005dfe:	60b9      	str	r1, [r7, #8]
 8005e00:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e08:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	68ba      	ldr	r2, [r7, #8]
 8005e0e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005e1a:	2300      	movs	r3, #0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	371c      	adds	r7, #28
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e38:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	683a      	ldr	r2, [r7, #0]
 8005e3e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3714      	adds	r7, #20
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e5e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005e60:	2301      	movs	r3, #1
 8005e62:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d101      	bne.n	8005e72 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e01a      	b.n	8005ea8 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d114      	bne.n	8005ea6 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005e9a:	2181      	movs	r1, #129	; 0x81
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f001 fdbe 	bl	8007a1e <USBD_LL_Transmit>

    ret = USBD_OK;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3710      	adds	r7, #16
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ebe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d101      	bne.n	8005ece <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005eca:	2303      	movs	r3, #3
 8005ecc:	e016      	b.n	8005efc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	7c1b      	ldrb	r3, [r3, #16]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d109      	bne.n	8005eea <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005edc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ee0:	2101      	movs	r1, #1
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f001 fdbc 	bl	8007a60 <USBD_LL_PrepareReceive>
 8005ee8:	e007      	b.n	8005efa <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ef0:	2340      	movs	r3, #64	; 0x40
 8005ef2:	2101      	movs	r1, #1
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f001 fdb3 	bl	8007a60 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3710      	adds	r7, #16
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b086      	sub	sp, #24
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	4613      	mov	r3, r2
 8005f10:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d101      	bne.n	8005f1c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005f18:	2303      	movs	r3, #3
 8005f1a:	e025      	b.n	8005f68 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d003      	beq.n	8005f2e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d003      	beq.n	8005f40 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d003      	beq.n	8005f4e <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	68ba      	ldr	r2, [r7, #8]
 8005f4a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2201      	movs	r2, #1
 8005f52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	79fa      	ldrb	r2, [r7, #7]
 8005f5a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005f5c:	68f8      	ldr	r0, [r7, #12]
 8005f5e:	f001 fc29 	bl	80077b4 <USBD_LL_Init>
 8005f62:	4603      	mov	r3, r0
 8005f64:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005f66:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3718      	adds	r7, #24
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b084      	sub	sp, #16
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d101      	bne.n	8005f88 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005f84:	2303      	movs	r3, #3
 8005f86:	e010      	b.n	8005faa <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	683a      	ldr	r2, [r7, #0]
 8005f8c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f98:	f107 020e 	add.w	r2, r7, #14
 8005f9c:	4610      	mov	r0, r2
 8005f9e:	4798      	blx	r3
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8005fa8:	2300      	movs	r3, #0
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3710      	adds	r7, #16
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}

08005fb2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005fb2:	b580      	push	{r7, lr}
 8005fb4:	b082      	sub	sp, #8
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f001 fc46 	bl	800784c <USBD_LL_Start>
 8005fc0:	4603      	mov	r3, r0
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3708      	adds	r7, #8
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}

08005fca <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005fca:	b480      	push	{r7}
 8005fcc:	b083      	sub	sp, #12
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005fd2:	2300      	movs	r3, #0
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	460b      	mov	r3, r1
 8005fea:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005fec:	2303      	movs	r3, #3
 8005fee:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d009      	beq.n	800600e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	78fa      	ldrb	r2, [r7, #3]
 8006004:	4611      	mov	r1, r2
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	4798      	blx	r3
 800600a:	4603      	mov	r3, r0
 800600c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800600e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006010:	4618      	mov	r0, r3
 8006012:	3710      	adds	r7, #16
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}

08006018 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b082      	sub	sp, #8
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	460b      	mov	r3, r1
 8006022:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800602a:	2b00      	cmp	r3, #0
 800602c:	d007      	beq.n	800603e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	78fa      	ldrb	r2, [r7, #3]
 8006038:	4611      	mov	r1, r2
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	4798      	blx	r3
  }

  return USBD_OK;
 800603e:	2300      	movs	r3, #0
}
 8006040:	4618      	mov	r0, r3
 8006042:	3708      	adds	r7, #8
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006058:	6839      	ldr	r1, [r7, #0]
 800605a:	4618      	mov	r0, r3
 800605c:	f000 ff2c 	bl	8006eb8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800606e:	461a      	mov	r2, r3
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800607c:	f003 031f 	and.w	r3, r3, #31
 8006080:	2b01      	cmp	r3, #1
 8006082:	d00e      	beq.n	80060a2 <USBD_LL_SetupStage+0x5a>
 8006084:	2b01      	cmp	r3, #1
 8006086:	d302      	bcc.n	800608e <USBD_LL_SetupStage+0x46>
 8006088:	2b02      	cmp	r3, #2
 800608a:	d014      	beq.n	80060b6 <USBD_LL_SetupStage+0x6e>
 800608c:	e01d      	b.n	80060ca <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006094:	4619      	mov	r1, r3
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 fa18 	bl	80064cc <USBD_StdDevReq>
 800609c:	4603      	mov	r3, r0
 800609e:	73fb      	strb	r3, [r7, #15]
      break;
 80060a0:	e020      	b.n	80060e4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80060a8:	4619      	mov	r1, r3
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f000 fa7c 	bl	80065a8 <USBD_StdItfReq>
 80060b0:	4603      	mov	r3, r0
 80060b2:	73fb      	strb	r3, [r7, #15]
      break;
 80060b4:	e016      	b.n	80060e4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80060bc:	4619      	mov	r1, r3
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 fab8 	bl	8006634 <USBD_StdEPReq>
 80060c4:	4603      	mov	r3, r0
 80060c6:	73fb      	strb	r3, [r7, #15]
      break;
 80060c8:	e00c      	b.n	80060e4 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80060d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	4619      	mov	r1, r3
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f001 fc17 	bl	800790c <USBD_LL_StallEP>
 80060de:	4603      	mov	r3, r0
 80060e0:	73fb      	strb	r3, [r7, #15]
      break;
 80060e2:	bf00      	nop
  }

  return ret;
 80060e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3710      	adds	r7, #16
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}

080060ee <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80060ee:	b580      	push	{r7, lr}
 80060f0:	b086      	sub	sp, #24
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	60f8      	str	r0, [r7, #12]
 80060f6:	460b      	mov	r3, r1
 80060f8:	607a      	str	r2, [r7, #4]
 80060fa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80060fc:	7afb      	ldrb	r3, [r7, #11]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d137      	bne.n	8006172 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006108:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006110:	2b03      	cmp	r3, #3
 8006112:	d14a      	bne.n	80061aa <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	689a      	ldr	r2, [r3, #8]
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	429a      	cmp	r2, r3
 800611e:	d913      	bls.n	8006148 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	689a      	ldr	r2, [r3, #8]
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	1ad2      	subs	r2, r2, r3
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	68da      	ldr	r2, [r3, #12]
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	4293      	cmp	r3, r2
 8006138:	bf28      	it	cs
 800613a:	4613      	movcs	r3, r2
 800613c:	461a      	mov	r2, r3
 800613e:	6879      	ldr	r1, [r7, #4]
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f000 ffad 	bl	80070a0 <USBD_CtlContinueRx>
 8006146:	e030      	b.n	80061aa <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800614e:	691b      	ldr	r3, [r3, #16]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d00a      	beq.n	800616a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800615a:	2b03      	cmp	r3, #3
 800615c:	d105      	bne.n	800616a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	68f8      	ldr	r0, [r7, #12]
 8006168:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800616a:	68f8      	ldr	r0, [r7, #12]
 800616c:	f000 ffa9 	bl	80070c2 <USBD_CtlSendStatus>
 8006170:	e01b      	b.n	80061aa <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006178:	699b      	ldr	r3, [r3, #24]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d013      	beq.n	80061a6 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006184:	2b03      	cmp	r3, #3
 8006186:	d10e      	bne.n	80061a6 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800618e:	699b      	ldr	r3, [r3, #24]
 8006190:	7afa      	ldrb	r2, [r7, #11]
 8006192:	4611      	mov	r1, r2
 8006194:	68f8      	ldr	r0, [r7, #12]
 8006196:	4798      	blx	r3
 8006198:	4603      	mov	r3, r0
 800619a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800619c:	7dfb      	ldrb	r3, [r7, #23]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d003      	beq.n	80061aa <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80061a2:	7dfb      	ldrb	r3, [r7, #23]
 80061a4:	e002      	b.n	80061ac <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80061a6:	2303      	movs	r3, #3
 80061a8:	e000      	b.n	80061ac <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3718      	adds	r7, #24
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b086      	sub	sp, #24
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	460b      	mov	r3, r1
 80061be:	607a      	str	r2, [r7, #4]
 80061c0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80061c2:	7afb      	ldrb	r3, [r7, #11]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d16a      	bne.n	800629e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	3314      	adds	r3, #20
 80061cc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80061d4:	2b02      	cmp	r3, #2
 80061d6:	d155      	bne.n	8006284 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	689a      	ldr	r2, [r3, #8]
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d914      	bls.n	800620e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	689a      	ldr	r2, [r3, #8]
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	1ad2      	subs	r2, r2, r3
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	461a      	mov	r2, r3
 80061f8:	6879      	ldr	r1, [r7, #4]
 80061fa:	68f8      	ldr	r0, [r7, #12]
 80061fc:	f000 ff22 	bl	8007044 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006200:	2300      	movs	r3, #0
 8006202:	2200      	movs	r2, #0
 8006204:	2100      	movs	r1, #0
 8006206:	68f8      	ldr	r0, [r7, #12]
 8006208:	f001 fc2a 	bl	8007a60 <USBD_LL_PrepareReceive>
 800620c:	e03a      	b.n	8006284 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	68da      	ldr	r2, [r3, #12]
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	429a      	cmp	r2, r3
 8006218:	d11c      	bne.n	8006254 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	685a      	ldr	r2, [r3, #4]
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006222:	429a      	cmp	r2, r3
 8006224:	d316      	bcc.n	8006254 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	685a      	ldr	r2, [r3, #4]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006230:	429a      	cmp	r2, r3
 8006232:	d20f      	bcs.n	8006254 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006234:	2200      	movs	r2, #0
 8006236:	2100      	movs	r1, #0
 8006238:	68f8      	ldr	r0, [r7, #12]
 800623a:	f000 ff03 	bl	8007044 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2200      	movs	r2, #0
 8006242:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006246:	2300      	movs	r3, #0
 8006248:	2200      	movs	r2, #0
 800624a:	2100      	movs	r1, #0
 800624c:	68f8      	ldr	r0, [r7, #12]
 800624e:	f001 fc07 	bl	8007a60 <USBD_LL_PrepareReceive>
 8006252:	e017      	b.n	8006284 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d00a      	beq.n	8006276 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006266:	2b03      	cmp	r3, #3
 8006268:	d105      	bne.n	8006276 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	68f8      	ldr	r0, [r7, #12]
 8006274:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006276:	2180      	movs	r1, #128	; 0x80
 8006278:	68f8      	ldr	r0, [r7, #12]
 800627a:	f001 fb47 	bl	800790c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800627e:	68f8      	ldr	r0, [r7, #12]
 8006280:	f000 ff32 	bl	80070e8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800628a:	2b01      	cmp	r3, #1
 800628c:	d123      	bne.n	80062d6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800628e:	68f8      	ldr	r0, [r7, #12]
 8006290:	f7ff fe9b 	bl	8005fca <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2200      	movs	r2, #0
 8006298:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800629c:	e01b      	b.n	80062d6 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062a4:	695b      	ldr	r3, [r3, #20]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d013      	beq.n	80062d2 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80062b0:	2b03      	cmp	r3, #3
 80062b2:	d10e      	bne.n	80062d2 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062ba:	695b      	ldr	r3, [r3, #20]
 80062bc:	7afa      	ldrb	r2, [r7, #11]
 80062be:	4611      	mov	r1, r2
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	4798      	blx	r3
 80062c4:	4603      	mov	r3, r0
 80062c6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80062c8:	7dfb      	ldrb	r3, [r7, #23]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d003      	beq.n	80062d6 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80062ce:	7dfb      	ldrb	r3, [r7, #23]
 80062d0:	e002      	b.n	80062d8 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80062d2:	2303      	movs	r3, #3
 80062d4:	e000      	b.n	80062d8 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3718      	adds	r7, #24
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b082      	sub	sp, #8
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800630c:	2b00      	cmp	r3, #0
 800630e:	d009      	beq.n	8006324 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	6852      	ldr	r2, [r2, #4]
 800631c:	b2d2      	uxtb	r2, r2
 800631e:	4611      	mov	r1, r2
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006324:	2340      	movs	r3, #64	; 0x40
 8006326:	2200      	movs	r2, #0
 8006328:	2100      	movs	r1, #0
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f001 faa9 	bl	8007882 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2240      	movs	r2, #64	; 0x40
 800633c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006340:	2340      	movs	r3, #64	; 0x40
 8006342:	2200      	movs	r2, #0
 8006344:	2180      	movs	r1, #128	; 0x80
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f001 fa9b 	bl	8007882 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2240      	movs	r2, #64	; 0x40
 8006356:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	3708      	adds	r7, #8
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}

08006362 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006362:	b480      	push	{r7}
 8006364:	b083      	sub	sp, #12
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
 800636a:	460b      	mov	r3, r1
 800636c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	78fa      	ldrb	r2, [r7, #3]
 8006372:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	370c      	adds	r7, #12
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr

08006382 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006382:	b480      	push	{r7}
 8006384:	b083      	sub	sp, #12
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2204      	movs	r2, #4
 800639a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800639e:	2300      	movs	r3, #0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063ba:	2b04      	cmp	r3, #4
 80063bc:	d105      	bne.n	80063ca <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80063ca:	2300      	movs	r3, #0
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b082      	sub	sp, #8
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063e6:	2b03      	cmp	r3, #3
 80063e8:	d10b      	bne.n	8006402 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063f0:	69db      	ldr	r3, [r3, #28]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d005      	beq.n	8006402 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063fc:	69db      	ldr	r3, [r3, #28]
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006402:	2300      	movs	r3, #0
}
 8006404:	4618      	mov	r0, r3
 8006406:	3708      	adds	r7, #8
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	460b      	mov	r3, r1
 8006416:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006418:	2300      	movs	r3, #0
}
 800641a:	4618      	mov	r0, r3
 800641c:	370c      	adds	r7, #12
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr

08006426 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006426:	b480      	push	{r7}
 8006428:	b083      	sub	sp, #12
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]
 800642e:	460b      	mov	r3, r1
 8006430:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006432:	2300      	movs	r3, #0
}
 8006434:	4618      	mov	r0, r3
 8006436:	370c      	adds	r7, #12
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006448:	2300      	movs	r3, #0
}
 800644a:	4618      	mov	r0, r3
 800644c:	370c      	adds	r7, #12
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr

08006456 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006456:	b580      	push	{r7, lr}
 8006458:	b082      	sub	sp, #8
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2201      	movs	r2, #1
 8006462:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800646c:	2b00      	cmp	r3, #0
 800646e:	d009      	beq.n	8006484 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	6852      	ldr	r2, [r2, #4]
 800647c:	b2d2      	uxtb	r2, r2
 800647e:	4611      	mov	r1, r2
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	4798      	blx	r3
  }

  return USBD_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3708      	adds	r7, #8
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}

0800648e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800648e:	b480      	push	{r7}
 8006490:	b087      	sub	sp, #28
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	3301      	adds	r3, #1
 80064a4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80064ac:	8a3b      	ldrh	r3, [r7, #16]
 80064ae:	021b      	lsls	r3, r3, #8
 80064b0:	b21a      	sxth	r2, r3
 80064b2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	b21b      	sxth	r3, r3
 80064ba:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80064bc:	89fb      	ldrh	r3, [r7, #14]
}
 80064be:	4618      	mov	r0, r3
 80064c0:	371c      	adds	r7, #28
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr
	...

080064cc <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b084      	sub	sp, #16
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80064d6:	2300      	movs	r3, #0
 80064d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80064e2:	2b20      	cmp	r3, #32
 80064e4:	d004      	beq.n	80064f0 <USBD_StdDevReq+0x24>
 80064e6:	2b40      	cmp	r3, #64	; 0x40
 80064e8:	d002      	beq.n	80064f0 <USBD_StdDevReq+0x24>
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00a      	beq.n	8006504 <USBD_StdDevReq+0x38>
 80064ee:	e050      	b.n	8006592 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	6839      	ldr	r1, [r7, #0]
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	4798      	blx	r3
 80064fe:	4603      	mov	r3, r0
 8006500:	73fb      	strb	r3, [r7, #15]
    break;
 8006502:	e04b      	b.n	800659c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	785b      	ldrb	r3, [r3, #1]
 8006508:	2b09      	cmp	r3, #9
 800650a:	d83c      	bhi.n	8006586 <USBD_StdDevReq+0xba>
 800650c:	a201      	add	r2, pc, #4	; (adr r2, 8006514 <USBD_StdDevReq+0x48>)
 800650e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006512:	bf00      	nop
 8006514:	08006569 	.word	0x08006569
 8006518:	0800657d 	.word	0x0800657d
 800651c:	08006587 	.word	0x08006587
 8006520:	08006573 	.word	0x08006573
 8006524:	08006587 	.word	0x08006587
 8006528:	08006547 	.word	0x08006547
 800652c:	0800653d 	.word	0x0800653d
 8006530:	08006587 	.word	0x08006587
 8006534:	0800655f 	.word	0x0800655f
 8006538:	08006551 	.word	0x08006551
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800653c:	6839      	ldr	r1, [r7, #0]
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 f9ce 	bl	80068e0 <USBD_GetDescriptor>
      break;
 8006544:	e024      	b.n	8006590 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8006546:	6839      	ldr	r1, [r7, #0]
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 fb33 	bl	8006bb4 <USBD_SetAddress>
      break;
 800654e:	e01f      	b.n	8006590 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8006550:	6839      	ldr	r1, [r7, #0]
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 fb70 	bl	8006c38 <USBD_SetConfig>
 8006558:	4603      	mov	r3, r0
 800655a:	73fb      	strb	r3, [r7, #15]
      break;
 800655c:	e018      	b.n	8006590 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800655e:	6839      	ldr	r1, [r7, #0]
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f000 fc0d 	bl	8006d80 <USBD_GetConfig>
      break;
 8006566:	e013      	b.n	8006590 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8006568:	6839      	ldr	r1, [r7, #0]
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 fc3c 	bl	8006de8 <USBD_GetStatus>
      break;
 8006570:	e00e      	b.n	8006590 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8006572:	6839      	ldr	r1, [r7, #0]
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f000 fc6a 	bl	8006e4e <USBD_SetFeature>
      break;
 800657a:	e009      	b.n	8006590 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800657c:	6839      	ldr	r1, [r7, #0]
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 fc79 	bl	8006e76 <USBD_ClrFeature>
      break;
 8006584:	e004      	b.n	8006590 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8006586:	6839      	ldr	r1, [r7, #0]
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 fccf 	bl	8006f2c <USBD_CtlError>
      break;
 800658e:	bf00      	nop
    }
    break;
 8006590:	e004      	b.n	800659c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8006592:	6839      	ldr	r1, [r7, #0]
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f000 fcc9 	bl	8006f2c <USBD_CtlError>
    break;
 800659a:	bf00      	nop
  }

  return ret;
 800659c:	7bfb      	ldrb	r3, [r7, #15]
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3710      	adds	r7, #16
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop

080065a8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80065b2:	2300      	movs	r3, #0
 80065b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065be:	2b20      	cmp	r3, #32
 80065c0:	d003      	beq.n	80065ca <USBD_StdItfReq+0x22>
 80065c2:	2b40      	cmp	r3, #64	; 0x40
 80065c4:	d001      	beq.n	80065ca <USBD_StdItfReq+0x22>
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d12a      	bne.n	8006620 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065d0:	3b01      	subs	r3, #1
 80065d2:	2b02      	cmp	r3, #2
 80065d4:	d81d      	bhi.n	8006612 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	889b      	ldrh	r3, [r3, #4]
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d813      	bhi.n	8006608 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	6839      	ldr	r1, [r7, #0]
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	4798      	blx	r3
 80065ee:	4603      	mov	r3, r0
 80065f0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	88db      	ldrh	r3, [r3, #6]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d110      	bne.n	800661c <USBD_StdItfReq+0x74>
 80065fa:	7bfb      	ldrb	r3, [r7, #15]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d10d      	bne.n	800661c <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f000 fd5e 	bl	80070c2 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8006606:	e009      	b.n	800661c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8006608:	6839      	ldr	r1, [r7, #0]
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 fc8e 	bl	8006f2c <USBD_CtlError>
      break;
 8006610:	e004      	b.n	800661c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8006612:	6839      	ldr	r1, [r7, #0]
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f000 fc89 	bl	8006f2c <USBD_CtlError>
      break;
 800661a:	e000      	b.n	800661e <USBD_StdItfReq+0x76>
      break;
 800661c:	bf00      	nop
    }
    break;
 800661e:	e004      	b.n	800662a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8006620:	6839      	ldr	r1, [r7, #0]
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 fc82 	bl	8006f2c <USBD_CtlError>
    break;
 8006628:	bf00      	nop
  }

  return ret;
 800662a:	7bfb      	ldrb	r3, [r7, #15]
}
 800662c:	4618      	mov	r0, r3
 800662e:	3710      	adds	r7, #16
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800663e:	2300      	movs	r3, #0
 8006640:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	889b      	ldrh	r3, [r3, #4]
 8006646:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006650:	2b20      	cmp	r3, #32
 8006652:	d004      	beq.n	800665e <USBD_StdEPReq+0x2a>
 8006654:	2b40      	cmp	r3, #64	; 0x40
 8006656:	d002      	beq.n	800665e <USBD_StdEPReq+0x2a>
 8006658:	2b00      	cmp	r3, #0
 800665a:	d00a      	beq.n	8006672 <USBD_StdEPReq+0x3e>
 800665c:	e135      	b.n	80068ca <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	6839      	ldr	r1, [r7, #0]
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	4798      	blx	r3
 800666c:	4603      	mov	r3, r0
 800666e:	73fb      	strb	r3, [r7, #15]
    break;
 8006670:	e130      	b.n	80068d4 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	785b      	ldrb	r3, [r3, #1]
 8006676:	2b01      	cmp	r3, #1
 8006678:	d03e      	beq.n	80066f8 <USBD_StdEPReq+0xc4>
 800667a:	2b03      	cmp	r3, #3
 800667c:	d002      	beq.n	8006684 <USBD_StdEPReq+0x50>
 800667e:	2b00      	cmp	r3, #0
 8006680:	d077      	beq.n	8006772 <USBD_StdEPReq+0x13e>
 8006682:	e11c      	b.n	80068be <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800668a:	2b02      	cmp	r3, #2
 800668c:	d002      	beq.n	8006694 <USBD_StdEPReq+0x60>
 800668e:	2b03      	cmp	r3, #3
 8006690:	d015      	beq.n	80066be <USBD_StdEPReq+0x8a>
 8006692:	e02b      	b.n	80066ec <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006694:	7bbb      	ldrb	r3, [r7, #14]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d00c      	beq.n	80066b4 <USBD_StdEPReq+0x80>
 800669a:	7bbb      	ldrb	r3, [r7, #14]
 800669c:	2b80      	cmp	r3, #128	; 0x80
 800669e:	d009      	beq.n	80066b4 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80066a0:	7bbb      	ldrb	r3, [r7, #14]
 80066a2:	4619      	mov	r1, r3
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f001 f931 	bl	800790c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80066aa:	2180      	movs	r1, #128	; 0x80
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f001 f92d 	bl	800790c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80066b2:	e020      	b.n	80066f6 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80066b4:	6839      	ldr	r1, [r7, #0]
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 fc38 	bl	8006f2c <USBD_CtlError>
        break;
 80066bc:	e01b      	b.n	80066f6 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	885b      	ldrh	r3, [r3, #2]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d10e      	bne.n	80066e4 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80066c6:	7bbb      	ldrb	r3, [r7, #14]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d00b      	beq.n	80066e4 <USBD_StdEPReq+0xb0>
 80066cc:	7bbb      	ldrb	r3, [r7, #14]
 80066ce:	2b80      	cmp	r3, #128	; 0x80
 80066d0:	d008      	beq.n	80066e4 <USBD_StdEPReq+0xb0>
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	88db      	ldrh	r3, [r3, #6]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d104      	bne.n	80066e4 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80066da:	7bbb      	ldrb	r3, [r7, #14]
 80066dc:	4619      	mov	r1, r3
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f001 f914 	bl	800790c <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 fcec 	bl	80070c2 <USBD_CtlSendStatus>

        break;
 80066ea:	e004      	b.n	80066f6 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80066ec:	6839      	ldr	r1, [r7, #0]
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 fc1c 	bl	8006f2c <USBD_CtlError>
        break;
 80066f4:	bf00      	nop
      }
      break;
 80066f6:	e0e7      	b.n	80068c8 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066fe:	2b02      	cmp	r3, #2
 8006700:	d002      	beq.n	8006708 <USBD_StdEPReq+0xd4>
 8006702:	2b03      	cmp	r3, #3
 8006704:	d015      	beq.n	8006732 <USBD_StdEPReq+0xfe>
 8006706:	e02d      	b.n	8006764 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006708:	7bbb      	ldrb	r3, [r7, #14]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d00c      	beq.n	8006728 <USBD_StdEPReq+0xf4>
 800670e:	7bbb      	ldrb	r3, [r7, #14]
 8006710:	2b80      	cmp	r3, #128	; 0x80
 8006712:	d009      	beq.n	8006728 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006714:	7bbb      	ldrb	r3, [r7, #14]
 8006716:	4619      	mov	r1, r3
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f001 f8f7 	bl	800790c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800671e:	2180      	movs	r1, #128	; 0x80
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f001 f8f3 	bl	800790c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006726:	e023      	b.n	8006770 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8006728:	6839      	ldr	r1, [r7, #0]
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 fbfe 	bl	8006f2c <USBD_CtlError>
        break;
 8006730:	e01e      	b.n	8006770 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	885b      	ldrh	r3, [r3, #2]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d119      	bne.n	800676e <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800673a:	7bbb      	ldrb	r3, [r7, #14]
 800673c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006740:	2b00      	cmp	r3, #0
 8006742:	d004      	beq.n	800674e <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006744:	7bbb      	ldrb	r3, [r7, #14]
 8006746:	4619      	mov	r1, r3
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f001 f8fe 	bl	800794a <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 fcb7 	bl	80070c2 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	6839      	ldr	r1, [r7, #0]
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	4798      	blx	r3
        }
        break;
 8006762:	e004      	b.n	800676e <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8006764:	6839      	ldr	r1, [r7, #0]
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 fbe0 	bl	8006f2c <USBD_CtlError>
        break;
 800676c:	e000      	b.n	8006770 <USBD_StdEPReq+0x13c>
        break;
 800676e:	bf00      	nop
      }
      break;
 8006770:	e0aa      	b.n	80068c8 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006778:	2b02      	cmp	r3, #2
 800677a:	d002      	beq.n	8006782 <USBD_StdEPReq+0x14e>
 800677c:	2b03      	cmp	r3, #3
 800677e:	d032      	beq.n	80067e6 <USBD_StdEPReq+0x1b2>
 8006780:	e097      	b.n	80068b2 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006782:	7bbb      	ldrb	r3, [r7, #14]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d007      	beq.n	8006798 <USBD_StdEPReq+0x164>
 8006788:	7bbb      	ldrb	r3, [r7, #14]
 800678a:	2b80      	cmp	r3, #128	; 0x80
 800678c:	d004      	beq.n	8006798 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800678e:	6839      	ldr	r1, [r7, #0]
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f000 fbcb 	bl	8006f2c <USBD_CtlError>
          break;
 8006796:	e091      	b.n	80068bc <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006798:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800679c:	2b00      	cmp	r3, #0
 800679e:	da0b      	bge.n	80067b8 <USBD_StdEPReq+0x184>
 80067a0:	7bbb      	ldrb	r3, [r7, #14]
 80067a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80067a6:	4613      	mov	r3, r2
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	4413      	add	r3, r2
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	3310      	adds	r3, #16
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	4413      	add	r3, r2
 80067b4:	3304      	adds	r3, #4
 80067b6:	e00b      	b.n	80067d0 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80067b8:	7bbb      	ldrb	r3, [r7, #14]
 80067ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067be:	4613      	mov	r3, r2
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	4413      	add	r3, r2
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	4413      	add	r3, r2
 80067ce:	3304      	adds	r3, #4
 80067d0:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	2200      	movs	r2, #0
 80067d6:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	2202      	movs	r2, #2
 80067dc:	4619      	mov	r1, r3
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 fc15 	bl	800700e <USBD_CtlSendData>
        break;
 80067e4:	e06a      	b.n	80068bc <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80067e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	da11      	bge.n	8006812 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80067ee:	7bbb      	ldrb	r3, [r7, #14]
 80067f0:	f003 020f 	and.w	r2, r3, #15
 80067f4:	6879      	ldr	r1, [r7, #4]
 80067f6:	4613      	mov	r3, r2
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	4413      	add	r3, r2
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	440b      	add	r3, r1
 8006800:	3324      	adds	r3, #36	; 0x24
 8006802:	881b      	ldrh	r3, [r3, #0]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d117      	bne.n	8006838 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8006808:	6839      	ldr	r1, [r7, #0]
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 fb8e 	bl	8006f2c <USBD_CtlError>
            break;
 8006810:	e054      	b.n	80068bc <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006812:	7bbb      	ldrb	r3, [r7, #14]
 8006814:	f003 020f 	and.w	r2, r3, #15
 8006818:	6879      	ldr	r1, [r7, #4]
 800681a:	4613      	mov	r3, r2
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	4413      	add	r3, r2
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	440b      	add	r3, r1
 8006824:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006828:	881b      	ldrh	r3, [r3, #0]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d104      	bne.n	8006838 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800682e:	6839      	ldr	r1, [r7, #0]
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f000 fb7b 	bl	8006f2c <USBD_CtlError>
            break;
 8006836:	e041      	b.n	80068bc <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006838:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800683c:	2b00      	cmp	r3, #0
 800683e:	da0b      	bge.n	8006858 <USBD_StdEPReq+0x224>
 8006840:	7bbb      	ldrb	r3, [r7, #14]
 8006842:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006846:	4613      	mov	r3, r2
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	4413      	add	r3, r2
 800684c:	009b      	lsls	r3, r3, #2
 800684e:	3310      	adds	r3, #16
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	4413      	add	r3, r2
 8006854:	3304      	adds	r3, #4
 8006856:	e00b      	b.n	8006870 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006858:	7bbb      	ldrb	r3, [r7, #14]
 800685a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800685e:	4613      	mov	r3, r2
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	4413      	add	r3, r2
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	4413      	add	r3, r2
 800686e:	3304      	adds	r3, #4
 8006870:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006872:	7bbb      	ldrb	r3, [r7, #14]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d002      	beq.n	800687e <USBD_StdEPReq+0x24a>
 8006878:	7bbb      	ldrb	r3, [r7, #14]
 800687a:	2b80      	cmp	r3, #128	; 0x80
 800687c:	d103      	bne.n	8006886 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	2200      	movs	r2, #0
 8006882:	601a      	str	r2, [r3, #0]
 8006884:	e00e      	b.n	80068a4 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006886:	7bbb      	ldrb	r3, [r7, #14]
 8006888:	4619      	mov	r1, r3
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f001 f87c 	bl	8007988 <USBD_LL_IsStallEP>
 8006890:	4603      	mov	r3, r0
 8006892:	2b00      	cmp	r3, #0
 8006894:	d003      	beq.n	800689e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	2201      	movs	r2, #1
 800689a:	601a      	str	r2, [r3, #0]
 800689c:	e002      	b.n	80068a4 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	2200      	movs	r2, #0
 80068a2:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	2202      	movs	r2, #2
 80068a8:	4619      	mov	r1, r3
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 fbaf 	bl	800700e <USBD_CtlSendData>
          break;
 80068b0:	e004      	b.n	80068bc <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 80068b2:	6839      	ldr	r1, [r7, #0]
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f000 fb39 	bl	8006f2c <USBD_CtlError>
        break;
 80068ba:	bf00      	nop
      }
      break;
 80068bc:	e004      	b.n	80068c8 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 80068be:	6839      	ldr	r1, [r7, #0]
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 fb33 	bl	8006f2c <USBD_CtlError>
      break;
 80068c6:	bf00      	nop
    }
    break;
 80068c8:	e004      	b.n	80068d4 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 80068ca:	6839      	ldr	r1, [r7, #0]
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f000 fb2d 	bl	8006f2c <USBD_CtlError>
    break;
 80068d2:	bf00      	nop
  }

  return ret;
 80068d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3710      	adds	r7, #16
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
	...

080068e0 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b084      	sub	sp, #16
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80068ea:	2300      	movs	r3, #0
 80068ec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80068ee:	2300      	movs	r3, #0
 80068f0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80068f2:	2300      	movs	r3, #0
 80068f4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	885b      	ldrh	r3, [r3, #2]
 80068fa:	0a1b      	lsrs	r3, r3, #8
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	3b01      	subs	r3, #1
 8006900:	2b06      	cmp	r3, #6
 8006902:	f200 8128 	bhi.w	8006b56 <USBD_GetDescriptor+0x276>
 8006906:	a201      	add	r2, pc, #4	; (adr r2, 800690c <USBD_GetDescriptor+0x2c>)
 8006908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800690c:	08006929 	.word	0x08006929
 8006910:	08006941 	.word	0x08006941
 8006914:	08006981 	.word	0x08006981
 8006918:	08006b57 	.word	0x08006b57
 800691c:	08006b57 	.word	0x08006b57
 8006920:	08006af7 	.word	0x08006af7
 8006924:	08006b23 	.word	0x08006b23
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	7c12      	ldrb	r2, [r2, #16]
 8006934:	f107 0108 	add.w	r1, r7, #8
 8006938:	4610      	mov	r0, r2
 800693a:	4798      	blx	r3
 800693c:	60f8      	str	r0, [r7, #12]
    break;
 800693e:	e112      	b.n	8006b66 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	7c1b      	ldrb	r3, [r3, #16]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d10d      	bne.n	8006964 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800694e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006950:	f107 0208 	add.w	r2, r7, #8
 8006954:	4610      	mov	r0, r2
 8006956:	4798      	blx	r3
 8006958:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	3301      	adds	r3, #1
 800695e:	2202      	movs	r2, #2
 8006960:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8006962:	e100      	b.n	8006b66 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800696a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800696c:	f107 0208 	add.w	r2, r7, #8
 8006970:	4610      	mov	r0, r2
 8006972:	4798      	blx	r3
 8006974:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	3301      	adds	r3, #1
 800697a:	2202      	movs	r2, #2
 800697c:	701a      	strb	r2, [r3, #0]
    break;
 800697e:	e0f2      	b.n	8006b66 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	885b      	ldrh	r3, [r3, #2]
 8006984:	b2db      	uxtb	r3, r3
 8006986:	2b05      	cmp	r3, #5
 8006988:	f200 80ac 	bhi.w	8006ae4 <USBD_GetDescriptor+0x204>
 800698c:	a201      	add	r2, pc, #4	; (adr r2, 8006994 <USBD_GetDescriptor+0xb4>)
 800698e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006992:	bf00      	nop
 8006994:	080069ad 	.word	0x080069ad
 8006998:	080069e1 	.word	0x080069e1
 800699c:	08006a15 	.word	0x08006a15
 80069a0:	08006a49 	.word	0x08006a49
 80069a4:	08006a7d 	.word	0x08006a7d
 80069a8:	08006ab1 	.word	0x08006ab1
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d00b      	beq.n	80069d0 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	7c12      	ldrb	r2, [r2, #16]
 80069c4:	f107 0108 	add.w	r1, r7, #8
 80069c8:	4610      	mov	r0, r2
 80069ca:	4798      	blx	r3
 80069cc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80069ce:	e091      	b.n	8006af4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80069d0:	6839      	ldr	r1, [r7, #0]
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 faaa 	bl	8006f2c <USBD_CtlError>
        err++;
 80069d8:	7afb      	ldrb	r3, [r7, #11]
 80069da:	3301      	adds	r3, #1
 80069dc:	72fb      	strb	r3, [r7, #11]
      break;
 80069de:	e089      	b.n	8006af4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d00b      	beq.n	8006a04 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	7c12      	ldrb	r2, [r2, #16]
 80069f8:	f107 0108 	add.w	r1, r7, #8
 80069fc:	4610      	mov	r0, r2
 80069fe:	4798      	blx	r3
 8006a00:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a02:	e077      	b.n	8006af4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006a04:	6839      	ldr	r1, [r7, #0]
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 fa90 	bl	8006f2c <USBD_CtlError>
        err++;
 8006a0c:	7afb      	ldrb	r3, [r7, #11]
 8006a0e:	3301      	adds	r3, #1
 8006a10:	72fb      	strb	r3, [r7, #11]
      break;
 8006a12:	e06f      	b.n	8006af4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d00b      	beq.n	8006a38 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	7c12      	ldrb	r2, [r2, #16]
 8006a2c:	f107 0108 	add.w	r1, r7, #8
 8006a30:	4610      	mov	r0, r2
 8006a32:	4798      	blx	r3
 8006a34:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a36:	e05d      	b.n	8006af4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006a38:	6839      	ldr	r1, [r7, #0]
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 fa76 	bl	8006f2c <USBD_CtlError>
        err++;
 8006a40:	7afb      	ldrb	r3, [r7, #11]
 8006a42:	3301      	adds	r3, #1
 8006a44:	72fb      	strb	r3, [r7, #11]
      break;
 8006a46:	e055      	b.n	8006af4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a4e:	691b      	ldr	r3, [r3, #16]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d00b      	beq.n	8006a6c <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a5a:	691b      	ldr	r3, [r3, #16]
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	7c12      	ldrb	r2, [r2, #16]
 8006a60:	f107 0108 	add.w	r1, r7, #8
 8006a64:	4610      	mov	r0, r2
 8006a66:	4798      	blx	r3
 8006a68:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a6a:	e043      	b.n	8006af4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006a6c:	6839      	ldr	r1, [r7, #0]
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 fa5c 	bl	8006f2c <USBD_CtlError>
        err++;
 8006a74:	7afb      	ldrb	r3, [r7, #11]
 8006a76:	3301      	adds	r3, #1
 8006a78:	72fb      	strb	r3, [r7, #11]
      break;
 8006a7a:	e03b      	b.n	8006af4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a82:	695b      	ldr	r3, [r3, #20]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d00b      	beq.n	8006aa0 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a8e:	695b      	ldr	r3, [r3, #20]
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	7c12      	ldrb	r2, [r2, #16]
 8006a94:	f107 0108 	add.w	r1, r7, #8
 8006a98:	4610      	mov	r0, r2
 8006a9a:	4798      	blx	r3
 8006a9c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a9e:	e029      	b.n	8006af4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006aa0:	6839      	ldr	r1, [r7, #0]
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 fa42 	bl	8006f2c <USBD_CtlError>
        err++;
 8006aa8:	7afb      	ldrb	r3, [r7, #11]
 8006aaa:	3301      	adds	r3, #1
 8006aac:	72fb      	strb	r3, [r7, #11]
      break;
 8006aae:	e021      	b.n	8006af4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ab6:	699b      	ldr	r3, [r3, #24]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d00b      	beq.n	8006ad4 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ac2:	699b      	ldr	r3, [r3, #24]
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	7c12      	ldrb	r2, [r2, #16]
 8006ac8:	f107 0108 	add.w	r1, r7, #8
 8006acc:	4610      	mov	r0, r2
 8006ace:	4798      	blx	r3
 8006ad0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ad2:	e00f      	b.n	8006af4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006ad4:	6839      	ldr	r1, [r7, #0]
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 fa28 	bl	8006f2c <USBD_CtlError>
        err++;
 8006adc:	7afb      	ldrb	r3, [r7, #11]
 8006ade:	3301      	adds	r3, #1
 8006ae0:	72fb      	strb	r3, [r7, #11]
      break;
 8006ae2:	e007      	b.n	8006af4 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8006ae4:	6839      	ldr	r1, [r7, #0]
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 fa20 	bl	8006f2c <USBD_CtlError>
      err++;
 8006aec:	7afb      	ldrb	r3, [r7, #11]
 8006aee:	3301      	adds	r3, #1
 8006af0:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8006af2:	bf00      	nop
    }
    break;
 8006af4:	e037      	b.n	8006b66 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	7c1b      	ldrb	r3, [r3, #16]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d109      	bne.n	8006b12 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b06:	f107 0208 	add.w	r2, r7, #8
 8006b0a:	4610      	mov	r0, r2
 8006b0c:	4798      	blx	r3
 8006b0e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006b10:	e029      	b.n	8006b66 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8006b12:	6839      	ldr	r1, [r7, #0]
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f000 fa09 	bl	8006f2c <USBD_CtlError>
      err++;
 8006b1a:	7afb      	ldrb	r3, [r7, #11]
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	72fb      	strb	r3, [r7, #11]
    break;
 8006b20:	e021      	b.n	8006b66 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	7c1b      	ldrb	r3, [r3, #16]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d10d      	bne.n	8006b46 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b32:	f107 0208 	add.w	r2, r7, #8
 8006b36:	4610      	mov	r0, r2
 8006b38:	4798      	blx	r3
 8006b3a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	3301      	adds	r3, #1
 8006b40:	2207      	movs	r2, #7
 8006b42:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006b44:	e00f      	b.n	8006b66 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8006b46:	6839      	ldr	r1, [r7, #0]
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f000 f9ef 	bl	8006f2c <USBD_CtlError>
      err++;
 8006b4e:	7afb      	ldrb	r3, [r7, #11]
 8006b50:	3301      	adds	r3, #1
 8006b52:	72fb      	strb	r3, [r7, #11]
    break;
 8006b54:	e007      	b.n	8006b66 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8006b56:	6839      	ldr	r1, [r7, #0]
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 f9e7 	bl	8006f2c <USBD_CtlError>
    err++;
 8006b5e:	7afb      	ldrb	r3, [r7, #11]
 8006b60:	3301      	adds	r3, #1
 8006b62:	72fb      	strb	r3, [r7, #11]
    break;
 8006b64:	bf00      	nop
  }

  if (err != 0U)
 8006b66:	7afb      	ldrb	r3, [r7, #11]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d11e      	bne.n	8006baa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	88db      	ldrh	r3, [r3, #6]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d016      	beq.n	8006ba2 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8006b74:	893b      	ldrh	r3, [r7, #8]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d00e      	beq.n	8006b98 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	88da      	ldrh	r2, [r3, #6]
 8006b7e:	893b      	ldrh	r3, [r7, #8]
 8006b80:	4293      	cmp	r3, r2
 8006b82:	bf28      	it	cs
 8006b84:	4613      	movcs	r3, r2
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8006b8a:	893b      	ldrh	r3, [r7, #8]
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	68f9      	ldr	r1, [r7, #12]
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 fa3c 	bl	800700e <USBD_CtlSendData>
 8006b96:	e009      	b.n	8006bac <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8006b98:	6839      	ldr	r1, [r7, #0]
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 f9c6 	bl	8006f2c <USBD_CtlError>
 8006ba0:	e004      	b.n	8006bac <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 fa8d 	bl	80070c2 <USBD_CtlSendStatus>
 8006ba8:	e000      	b.n	8006bac <USBD_GetDescriptor+0x2cc>
    return;
 8006baa:	bf00      	nop
    }
  }
}
 8006bac:	3710      	adds	r7, #16
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop

08006bb4 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	889b      	ldrh	r3, [r3, #4]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d130      	bne.n	8006c28 <USBD_SetAddress+0x74>
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	88db      	ldrh	r3, [r3, #6]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d12c      	bne.n	8006c28 <USBD_SetAddress+0x74>
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	885b      	ldrh	r3, [r3, #2]
 8006bd2:	2b7f      	cmp	r3, #127	; 0x7f
 8006bd4:	d828      	bhi.n	8006c28 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	885b      	ldrh	r3, [r3, #2]
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006be0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006be8:	2b03      	cmp	r3, #3
 8006bea:	d104      	bne.n	8006bf6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006bec:	6839      	ldr	r1, [r7, #0]
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 f99c 	bl	8006f2c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bf4:	e01c      	b.n	8006c30 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	7bfa      	ldrb	r2, [r7, #15]
 8006bfa:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006bfe:	7bfb      	ldrb	r3, [r7, #15]
 8006c00:	4619      	mov	r1, r3
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 feec 	bl	80079e0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f000 fa5a 	bl	80070c2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006c0e:	7bfb      	ldrb	r3, [r7, #15]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d004      	beq.n	8006c1e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2202      	movs	r2, #2
 8006c18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c1c:	e008      	b.n	8006c30 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2201      	movs	r2, #1
 8006c22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c26:	e003      	b.n	8006c30 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006c28:	6839      	ldr	r1, [r7, #0]
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 f97e 	bl	8006f2c <USBD_CtlError>
  }
}
 8006c30:	bf00      	nop
 8006c32:	3710      	adds	r7, #16
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c42:	2300      	movs	r3, #0
 8006c44:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	885b      	ldrh	r3, [r3, #2]
 8006c4a:	b2da      	uxtb	r2, r3
 8006c4c:	4b4b      	ldr	r3, [pc, #300]	; (8006d7c <USBD_SetConfig+0x144>)
 8006c4e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006c50:	4b4a      	ldr	r3, [pc, #296]	; (8006d7c <USBD_SetConfig+0x144>)
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d905      	bls.n	8006c64 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006c58:	6839      	ldr	r1, [r7, #0]
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 f966 	bl	8006f2c <USBD_CtlError>
    return USBD_FAIL;
 8006c60:	2303      	movs	r3, #3
 8006c62:	e087      	b.n	8006d74 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c6a:	2b02      	cmp	r3, #2
 8006c6c:	d002      	beq.n	8006c74 <USBD_SetConfig+0x3c>
 8006c6e:	2b03      	cmp	r3, #3
 8006c70:	d025      	beq.n	8006cbe <USBD_SetConfig+0x86>
 8006c72:	e071      	b.n	8006d58 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8006c74:	4b41      	ldr	r3, [pc, #260]	; (8006d7c <USBD_SetConfig+0x144>)
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d01c      	beq.n	8006cb6 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8006c7c:	4b3f      	ldr	r3, [pc, #252]	; (8006d7c <USBD_SetConfig+0x144>)
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	461a      	mov	r2, r3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006c86:	4b3d      	ldr	r3, [pc, #244]	; (8006d7c <USBD_SetConfig+0x144>)
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f7ff f9a7 	bl	8005fe0 <USBD_SetClassConfig>
 8006c92:	4603      	mov	r3, r0
 8006c94:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8006c96:	7bfb      	ldrb	r3, [r7, #15]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d004      	beq.n	8006ca6 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8006c9c:	6839      	ldr	r1, [r7, #0]
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 f944 	bl	8006f2c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006ca4:	e065      	b.n	8006d72 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 fa0b 	bl	80070c2 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2203      	movs	r2, #3
 8006cb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006cb4:	e05d      	b.n	8006d72 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 fa03 	bl	80070c2 <USBD_CtlSendStatus>
    break;
 8006cbc:	e059      	b.n	8006d72 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8006cbe:	4b2f      	ldr	r3, [pc, #188]	; (8006d7c <USBD_SetConfig+0x144>)
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d112      	bne.n	8006cec <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2202      	movs	r2, #2
 8006cca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8006cce:	4b2b      	ldr	r3, [pc, #172]	; (8006d7c <USBD_SetConfig+0x144>)
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006cd8:	4b28      	ldr	r3, [pc, #160]	; (8006d7c <USBD_SetConfig+0x144>)
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	4619      	mov	r1, r3
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f7ff f99a 	bl	8006018 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f000 f9ec 	bl	80070c2 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006cea:	e042      	b.n	8006d72 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8006cec:	4b23      	ldr	r3, [pc, #140]	; (8006d7c <USBD_SetConfig+0x144>)
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d02a      	beq.n	8006d50 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	4619      	mov	r1, r3
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f7ff f988 	bl	8006018 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8006d08:	4b1c      	ldr	r3, [pc, #112]	; (8006d7c <USBD_SetConfig+0x144>)
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006d12:	4b1a      	ldr	r3, [pc, #104]	; (8006d7c <USBD_SetConfig+0x144>)
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	4619      	mov	r1, r3
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f7ff f961 	bl	8005fe0 <USBD_SetClassConfig>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8006d22:	7bfb      	ldrb	r3, [r7, #15]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d00f      	beq.n	8006d48 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8006d28:	6839      	ldr	r1, [r7, #0]
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 f8fe 	bl	8006f2c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	4619      	mov	r1, r3
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f7ff f96d 	bl	8006018 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2202      	movs	r2, #2
 8006d42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006d46:	e014      	b.n	8006d72 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 f9ba 	bl	80070c2 <USBD_CtlSendStatus>
    break;
 8006d4e:	e010      	b.n	8006d72 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 f9b6 	bl	80070c2 <USBD_CtlSendStatus>
    break;
 8006d56:	e00c      	b.n	8006d72 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8006d58:	6839      	ldr	r1, [r7, #0]
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 f8e6 	bl	8006f2c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006d60:	4b06      	ldr	r3, [pc, #24]	; (8006d7c <USBD_SetConfig+0x144>)
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	4619      	mov	r1, r3
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f7ff f956 	bl	8006018 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8006d6c:	2303      	movs	r3, #3
 8006d6e:	73fb      	strb	r3, [r7, #15]
    break;
 8006d70:	bf00      	nop
  }

  return ret;
 8006d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3710      	adds	r7, #16
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}
 8006d7c:	20000204 	.word	0x20000204

08006d80 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b082      	sub	sp, #8
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	88db      	ldrh	r3, [r3, #6]
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d004      	beq.n	8006d9c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006d92:	6839      	ldr	r1, [r7, #0]
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f000 f8c9 	bl	8006f2c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8006d9a:	e021      	b.n	8006de0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	db17      	blt.n	8006dd6 <USBD_GetConfig+0x56>
 8006da6:	2b02      	cmp	r3, #2
 8006da8:	dd02      	ble.n	8006db0 <USBD_GetConfig+0x30>
 8006daa:	2b03      	cmp	r3, #3
 8006dac:	d00b      	beq.n	8006dc6 <USBD_GetConfig+0x46>
 8006dae:	e012      	b.n	8006dd6 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	3308      	adds	r3, #8
 8006dba:	2201      	movs	r2, #1
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 f925 	bl	800700e <USBD_CtlSendData>
      break;
 8006dc4:	e00c      	b.n	8006de0 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	3304      	adds	r3, #4
 8006dca:	2201      	movs	r2, #1
 8006dcc:	4619      	mov	r1, r3
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 f91d 	bl	800700e <USBD_CtlSendData>
      break;
 8006dd4:	e004      	b.n	8006de0 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8006dd6:	6839      	ldr	r1, [r7, #0]
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 f8a7 	bl	8006f2c <USBD_CtlError>
      break;
 8006dde:	bf00      	nop
}
 8006de0:	bf00      	nop
 8006de2:	3708      	adds	r7, #8
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b082      	sub	sp, #8
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006df8:	3b01      	subs	r3, #1
 8006dfa:	2b02      	cmp	r3, #2
 8006dfc:	d81e      	bhi.n	8006e3c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	88db      	ldrh	r3, [r3, #6]
 8006e02:	2b02      	cmp	r3, #2
 8006e04:	d004      	beq.n	8006e10 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8006e06:	6839      	ldr	r1, [r7, #0]
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 f88f 	bl	8006f2c <USBD_CtlError>
      break;
 8006e0e:	e01a      	b.n	8006e46 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2201      	movs	r2, #1
 8006e14:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d005      	beq.n	8006e2c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	68db      	ldr	r3, [r3, #12]
 8006e24:	f043 0202 	orr.w	r2, r3, #2
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	330c      	adds	r3, #12
 8006e30:	2202      	movs	r2, #2
 8006e32:	4619      	mov	r1, r3
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 f8ea 	bl	800700e <USBD_CtlSendData>
    break;
 8006e3a:	e004      	b.n	8006e46 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8006e3c:	6839      	ldr	r1, [r7, #0]
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 f874 	bl	8006f2c <USBD_CtlError>
    break;
 8006e44:	bf00      	nop
  }
}
 8006e46:	bf00      	nop
 8006e48:	3708      	adds	r7, #8
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}

08006e4e <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e4e:	b580      	push	{r7, lr}
 8006e50:	b082      	sub	sp, #8
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
 8006e56:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	885b      	ldrh	r3, [r3, #2]
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d106      	bne.n	8006e6e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2201      	movs	r2, #1
 8006e64:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f000 f92a 	bl	80070c2 <USBD_CtlSendStatus>
  }
}
 8006e6e:	bf00      	nop
 8006e70:	3708      	adds	r7, #8
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}

08006e76 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e76:	b580      	push	{r7, lr}
 8006e78:	b082      	sub	sp, #8
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
 8006e7e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e86:	3b01      	subs	r3, #1
 8006e88:	2b02      	cmp	r3, #2
 8006e8a:	d80b      	bhi.n	8006ea4 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	885b      	ldrh	r3, [r3, #2]
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d10c      	bne.n	8006eae <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f000 f910 	bl	80070c2 <USBD_CtlSendStatus>
      }
      break;
 8006ea2:	e004      	b.n	8006eae <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006ea4:	6839      	ldr	r1, [r7, #0]
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 f840 	bl	8006f2c <USBD_CtlError>
      break;
 8006eac:	e000      	b.n	8006eb0 <USBD_ClrFeature+0x3a>
      break;
 8006eae:	bf00      	nop
  }
}
 8006eb0:	bf00      	nop
 8006eb2:	3708      	adds	r7, #8
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b084      	sub	sp, #16
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	781a      	ldrb	r2, [r3, #0]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	781a      	ldrb	r2, [r3, #0]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	3301      	adds	r3, #1
 8006ee0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006ee2:	68f8      	ldr	r0, [r7, #12]
 8006ee4:	f7ff fad3 	bl	800648e <SWAPBYTE>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	461a      	mov	r2, r3
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	3301      	adds	r3, #1
 8006efa:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006efc:	68f8      	ldr	r0, [r7, #12]
 8006efe:	f7ff fac6 	bl	800648e <SWAPBYTE>
 8006f02:	4603      	mov	r3, r0
 8006f04:	461a      	mov	r2, r3
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	3301      	adds	r3, #1
 8006f14:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006f16:	68f8      	ldr	r0, [r7, #12]
 8006f18:	f7ff fab9 	bl	800648e <SWAPBYTE>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	461a      	mov	r2, r3
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	80da      	strh	r2, [r3, #6]
}
 8006f24:	bf00      	nop
 8006f26:	3710      	adds	r7, #16
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b082      	sub	sp, #8
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006f36:	2180      	movs	r1, #128	; 0x80
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f000 fce7 	bl	800790c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006f3e:	2100      	movs	r1, #0
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 fce3 	bl	800790c <USBD_LL_StallEP>
}
 8006f46:	bf00      	nop
 8006f48:	3708      	adds	r7, #8
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}

08006f4e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006f4e:	b580      	push	{r7, lr}
 8006f50:	b086      	sub	sp, #24
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	60f8      	str	r0, [r7, #12]
 8006f56:	60b9      	str	r1, [r7, #8]
 8006f58:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d036      	beq.n	8006fd2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006f68:	6938      	ldr	r0, [r7, #16]
 8006f6a:	f000 f836 	bl	8006fda <USBD_GetLen>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	3301      	adds	r3, #1
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	005b      	lsls	r3, r3, #1
 8006f76:	b29a      	uxth	r2, r3
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006f7c:	7dfb      	ldrb	r3, [r7, #23]
 8006f7e:	68ba      	ldr	r2, [r7, #8]
 8006f80:	4413      	add	r3, r2
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	7812      	ldrb	r2, [r2, #0]
 8006f86:	701a      	strb	r2, [r3, #0]
  idx++;
 8006f88:	7dfb      	ldrb	r3, [r7, #23]
 8006f8a:	3301      	adds	r3, #1
 8006f8c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006f8e:	7dfb      	ldrb	r3, [r7, #23]
 8006f90:	68ba      	ldr	r2, [r7, #8]
 8006f92:	4413      	add	r3, r2
 8006f94:	2203      	movs	r2, #3
 8006f96:	701a      	strb	r2, [r3, #0]
  idx++;
 8006f98:	7dfb      	ldrb	r3, [r7, #23]
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006f9e:	e013      	b.n	8006fc8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006fa0:	7dfb      	ldrb	r3, [r7, #23]
 8006fa2:	68ba      	ldr	r2, [r7, #8]
 8006fa4:	4413      	add	r3, r2
 8006fa6:	693a      	ldr	r2, [r7, #16]
 8006fa8:	7812      	ldrb	r2, [r2, #0]
 8006faa:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	3301      	adds	r3, #1
 8006fb0:	613b      	str	r3, [r7, #16]
    idx++;
 8006fb2:	7dfb      	ldrb	r3, [r7, #23]
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006fb8:	7dfb      	ldrb	r3, [r7, #23]
 8006fba:	68ba      	ldr	r2, [r7, #8]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	701a      	strb	r2, [r3, #0]
    idx++;
 8006fc2:	7dfb      	ldrb	r3, [r7, #23]
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d1e7      	bne.n	8006fa0 <USBD_GetString+0x52>
 8006fd0:	e000      	b.n	8006fd4 <USBD_GetString+0x86>
    return;
 8006fd2:	bf00      	nop
  }
}
 8006fd4:	3718      	adds	r7, #24
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}

08006fda <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006fda:	b480      	push	{r7}
 8006fdc:	b085      	sub	sp, #20
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006fea:	e005      	b.n	8006ff8 <USBD_GetLen+0x1e>
  {
    len++;
 8006fec:	7bfb      	ldrb	r3, [r7, #15]
 8006fee:	3301      	adds	r3, #1
 8006ff0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	3301      	adds	r3, #1
 8006ff6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d1f5      	bne.n	8006fec <USBD_GetLen+0x12>
  }

  return len;
 8007000:	7bfb      	ldrb	r3, [r7, #15]
}
 8007002:	4618      	mov	r0, r3
 8007004:	3714      	adds	r7, #20
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr

0800700e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800700e:	b580      	push	{r7, lr}
 8007010:	b084      	sub	sp, #16
 8007012:	af00      	add	r7, sp, #0
 8007014:	60f8      	str	r0, [r7, #12]
 8007016:	60b9      	str	r1, [r7, #8]
 8007018:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2202      	movs	r2, #2
 800701e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	68ba      	ldr	r2, [r7, #8]
 8007032:	2100      	movs	r1, #0
 8007034:	68f8      	ldr	r0, [r7, #12]
 8007036:	f000 fcf2 	bl	8007a1e <USBD_LL_Transmit>

  return USBD_OK;
 800703a:	2300      	movs	r3, #0
}
 800703c:	4618      	mov	r0, r3
 800703e:	3710      	adds	r7, #16
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	60b9      	str	r1, [r7, #8]
 800704e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	68ba      	ldr	r2, [r7, #8]
 8007054:	2100      	movs	r1, #0
 8007056:	68f8      	ldr	r0, [r7, #12]
 8007058:	f000 fce1 	bl	8007a1e <USBD_LL_Transmit>

  return USBD_OK;
 800705c:	2300      	movs	r3, #0
}
 800705e:	4618      	mov	r0, r3
 8007060:	3710      	adds	r7, #16
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}

08007066 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007066:	b580      	push	{r7, lr}
 8007068:	b084      	sub	sp, #16
 800706a:	af00      	add	r7, sp, #0
 800706c:	60f8      	str	r0, [r7, #12]
 800706e:	60b9      	str	r1, [r7, #8]
 8007070:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2203      	movs	r2, #3
 8007076:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	68ba      	ldr	r2, [r7, #8]
 800708e:	2100      	movs	r1, #0
 8007090:	68f8      	ldr	r0, [r7, #12]
 8007092:	f000 fce5 	bl	8007a60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007096:	2300      	movs	r3, #0
}
 8007098:	4618      	mov	r0, r3
 800709a:	3710      	adds	r7, #16
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	68ba      	ldr	r2, [r7, #8]
 80070b0:	2100      	movs	r1, #0
 80070b2:	68f8      	ldr	r0, [r7, #12]
 80070b4:	f000 fcd4 	bl	8007a60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3710      	adds	r7, #16
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}

080070c2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80070c2:	b580      	push	{r7, lr}
 80070c4:	b082      	sub	sp, #8
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2204      	movs	r2, #4
 80070ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80070d2:	2300      	movs	r3, #0
 80070d4:	2200      	movs	r2, #0
 80070d6:	2100      	movs	r1, #0
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 fca0 	bl	8007a1e <USBD_LL_Transmit>

  return USBD_OK;
 80070de:	2300      	movs	r3, #0
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3708      	adds	r7, #8
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2205      	movs	r2, #5
 80070f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80070f8:	2300      	movs	r3, #0
 80070fa:	2200      	movs	r2, #0
 80070fc:	2100      	movs	r1, #0
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 fcae 	bl	8007a60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007104:	2300      	movs	r3, #0
}
 8007106:	4618      	mov	r0, r3
 8007108:	3708      	adds	r7, #8
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
	...

08007110 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007114:	2200      	movs	r2, #0
 8007116:	4912      	ldr	r1, [pc, #72]	; (8007160 <MX_USB_DEVICE_Init+0x50>)
 8007118:	4812      	ldr	r0, [pc, #72]	; (8007164 <MX_USB_DEVICE_Init+0x54>)
 800711a:	f7fe fef3 	bl	8005f04 <USBD_Init>
 800711e:	4603      	mov	r3, r0
 8007120:	2b00      	cmp	r3, #0
 8007122:	d001      	beq.n	8007128 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007124:	f7fa f882 	bl	800122c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007128:	490f      	ldr	r1, [pc, #60]	; (8007168 <MX_USB_DEVICE_Init+0x58>)
 800712a:	480e      	ldr	r0, [pc, #56]	; (8007164 <MX_USB_DEVICE_Init+0x54>)
 800712c:	f7fe ff20 	bl	8005f70 <USBD_RegisterClass>
 8007130:	4603      	mov	r3, r0
 8007132:	2b00      	cmp	r3, #0
 8007134:	d001      	beq.n	800713a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007136:	f7fa f879 	bl	800122c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800713a:	490c      	ldr	r1, [pc, #48]	; (800716c <MX_USB_DEVICE_Init+0x5c>)
 800713c:	4809      	ldr	r0, [pc, #36]	; (8007164 <MX_USB_DEVICE_Init+0x54>)
 800713e:	f7fe fe45 	bl	8005dcc <USBD_CDC_RegisterInterface>
 8007142:	4603      	mov	r3, r0
 8007144:	2b00      	cmp	r3, #0
 8007146:	d001      	beq.n	800714c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007148:	f7fa f870 	bl	800122c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800714c:	4805      	ldr	r0, [pc, #20]	; (8007164 <MX_USB_DEVICE_Init+0x54>)
 800714e:	f7fe ff30 	bl	8005fb2 <USBD_Start>
 8007152:	4603      	mov	r3, r0
 8007154:	2b00      	cmp	r3, #0
 8007156:	d001      	beq.n	800715c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007158:	f7fa f868 	bl	800122c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800715c:	bf00      	nop
 800715e:	bd80      	pop	{r7, pc}
 8007160:	20000130 	.word	0x20000130
 8007164:	2000025c 	.word	0x2000025c
 8007168:	20000018 	.word	0x20000018
 800716c:	2000011c 	.word	0x2000011c

08007170 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007174:	2200      	movs	r2, #0
 8007176:	4905      	ldr	r1, [pc, #20]	; (800718c <CDC_Init_FS+0x1c>)
 8007178:	4805      	ldr	r0, [pc, #20]	; (8007190 <CDC_Init_FS+0x20>)
 800717a:	f7fe fe3c 	bl	8005df6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800717e:	4905      	ldr	r1, [pc, #20]	; (8007194 <CDC_Init_FS+0x24>)
 8007180:	4803      	ldr	r0, [pc, #12]	; (8007190 <CDC_Init_FS+0x20>)
 8007182:	f7fe fe51 	bl	8005e28 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007186:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007188:	4618      	mov	r0, r3
 800718a:	bd80      	pop	{r7, pc}
 800718c:	20000d2c 	.word	0x20000d2c
 8007190:	2000025c 	.word	0x2000025c
 8007194:	2000052c 	.word	0x2000052c

08007198 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007198:	b480      	push	{r7}
 800719a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800719c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800719e:	4618      	mov	r0, r3
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr

080071a8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b083      	sub	sp, #12
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	4603      	mov	r3, r0
 80071b0:	6039      	str	r1, [r7, #0]
 80071b2:	71fb      	strb	r3, [r7, #7]
 80071b4:	4613      	mov	r3, r2
 80071b6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80071b8:	79fb      	ldrb	r3, [r7, #7]
 80071ba:	2b23      	cmp	r3, #35	; 0x23
 80071bc:	d84a      	bhi.n	8007254 <CDC_Control_FS+0xac>
 80071be:	a201      	add	r2, pc, #4	; (adr r2, 80071c4 <CDC_Control_FS+0x1c>)
 80071c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c4:	08007255 	.word	0x08007255
 80071c8:	08007255 	.word	0x08007255
 80071cc:	08007255 	.word	0x08007255
 80071d0:	08007255 	.word	0x08007255
 80071d4:	08007255 	.word	0x08007255
 80071d8:	08007255 	.word	0x08007255
 80071dc:	08007255 	.word	0x08007255
 80071e0:	08007255 	.word	0x08007255
 80071e4:	08007255 	.word	0x08007255
 80071e8:	08007255 	.word	0x08007255
 80071ec:	08007255 	.word	0x08007255
 80071f0:	08007255 	.word	0x08007255
 80071f4:	08007255 	.word	0x08007255
 80071f8:	08007255 	.word	0x08007255
 80071fc:	08007255 	.word	0x08007255
 8007200:	08007255 	.word	0x08007255
 8007204:	08007255 	.word	0x08007255
 8007208:	08007255 	.word	0x08007255
 800720c:	08007255 	.word	0x08007255
 8007210:	08007255 	.word	0x08007255
 8007214:	08007255 	.word	0x08007255
 8007218:	08007255 	.word	0x08007255
 800721c:	08007255 	.word	0x08007255
 8007220:	08007255 	.word	0x08007255
 8007224:	08007255 	.word	0x08007255
 8007228:	08007255 	.word	0x08007255
 800722c:	08007255 	.word	0x08007255
 8007230:	08007255 	.word	0x08007255
 8007234:	08007255 	.word	0x08007255
 8007238:	08007255 	.word	0x08007255
 800723c:	08007255 	.word	0x08007255
 8007240:	08007255 	.word	0x08007255
 8007244:	08007255 	.word	0x08007255
 8007248:	08007255 	.word	0x08007255
 800724c:	08007255 	.word	0x08007255
 8007250:	08007255 	.word	0x08007255
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007254:	bf00      	nop
  }

  return (USBD_OK);
 8007256:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007258:	4618      	mov	r0, r3
 800725a:	370c      	adds	r7, #12
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr

08007264 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b082      	sub	sp, #8
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800726e:	6879      	ldr	r1, [r7, #4]
 8007270:	4808      	ldr	r0, [pc, #32]	; (8007294 <CDC_Receive_FS+0x30>)
 8007272:	f7fe fdd9 	bl	8005e28 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007276:	4807      	ldr	r0, [pc, #28]	; (8007294 <CDC_Receive_FS+0x30>)
 8007278:	f7fe fe1a 	bl	8005eb0 <USBD_CDC_ReceivePacket>
  CDC_ReceiveCallBack(Buf,Len[0]);
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4619      	mov	r1, r3
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f7f9 fe2e 	bl	8000ee4 <CDC_ReceiveCallBack>
  return (USBD_OK);
 8007288:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800728a:	4618      	mov	r0, r3
 800728c:	3708      	adds	r7, #8
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
 8007292:	bf00      	nop
 8007294:	2000025c 	.word	0x2000025c

08007298 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	460b      	mov	r3, r1
 80072a2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80072a4:	2300      	movs	r3, #0
 80072a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80072a8:	4b0d      	ldr	r3, [pc, #52]	; (80072e0 <CDC_Transmit_FS+0x48>)
 80072aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072ae:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d001      	beq.n	80072be <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80072ba:	2301      	movs	r3, #1
 80072bc:	e00b      	b.n	80072d6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80072be:	887b      	ldrh	r3, [r7, #2]
 80072c0:	461a      	mov	r2, r3
 80072c2:	6879      	ldr	r1, [r7, #4]
 80072c4:	4806      	ldr	r0, [pc, #24]	; (80072e0 <CDC_Transmit_FS+0x48>)
 80072c6:	f7fe fd96 	bl	8005df6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80072ca:	4805      	ldr	r0, [pc, #20]	; (80072e0 <CDC_Transmit_FS+0x48>)
 80072cc:	f7fe fdc0 	bl	8005e50 <USBD_CDC_TransmitPacket>
 80072d0:	4603      	mov	r3, r0
 80072d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80072d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3710      	adds	r7, #16
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop
 80072e0:	2000025c 	.word	0x2000025c

080072e4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b087      	sub	sp, #28
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	4613      	mov	r3, r2
 80072f0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80072f2:	2300      	movs	r3, #0
 80072f4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80072f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	371c      	adds	r7, #28
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr
	...

08007308 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
 800730e:	4603      	mov	r3, r0
 8007310:	6039      	str	r1, [r7, #0]
 8007312:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	2212      	movs	r2, #18
 8007318:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800731a:	4b03      	ldr	r3, [pc, #12]	; (8007328 <USBD_FS_DeviceDescriptor+0x20>)
}
 800731c:	4618      	mov	r0, r3
 800731e:	370c      	adds	r7, #12
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr
 8007328:	2000014c 	.word	0x2000014c

0800732c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800732c:	b480      	push	{r7}
 800732e:	b083      	sub	sp, #12
 8007330:	af00      	add	r7, sp, #0
 8007332:	4603      	mov	r3, r0
 8007334:	6039      	str	r1, [r7, #0]
 8007336:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	2204      	movs	r2, #4
 800733c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800733e:	4b03      	ldr	r3, [pc, #12]	; (800734c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007340:	4618      	mov	r0, r3
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr
 800734c:	20000160 	.word	0x20000160

08007350 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b082      	sub	sp, #8
 8007354:	af00      	add	r7, sp, #0
 8007356:	4603      	mov	r3, r0
 8007358:	6039      	str	r1, [r7, #0]
 800735a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800735c:	79fb      	ldrb	r3, [r7, #7]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d105      	bne.n	800736e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007362:	683a      	ldr	r2, [r7, #0]
 8007364:	4907      	ldr	r1, [pc, #28]	; (8007384 <USBD_FS_ProductStrDescriptor+0x34>)
 8007366:	4808      	ldr	r0, [pc, #32]	; (8007388 <USBD_FS_ProductStrDescriptor+0x38>)
 8007368:	f7ff fdf1 	bl	8006f4e <USBD_GetString>
 800736c:	e004      	b.n	8007378 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800736e:	683a      	ldr	r2, [r7, #0]
 8007370:	4904      	ldr	r1, [pc, #16]	; (8007384 <USBD_FS_ProductStrDescriptor+0x34>)
 8007372:	4805      	ldr	r0, [pc, #20]	; (8007388 <USBD_FS_ProductStrDescriptor+0x38>)
 8007374:	f7ff fdeb 	bl	8006f4e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007378:	4b02      	ldr	r3, [pc, #8]	; (8007384 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800737a:	4618      	mov	r0, r3
 800737c:	3708      	adds	r7, #8
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}
 8007382:	bf00      	nop
 8007384:	2000152c 	.word	0x2000152c
 8007388:	08007da4 	.word	0x08007da4

0800738c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b082      	sub	sp, #8
 8007390:	af00      	add	r7, sp, #0
 8007392:	4603      	mov	r3, r0
 8007394:	6039      	str	r1, [r7, #0]
 8007396:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007398:	683a      	ldr	r2, [r7, #0]
 800739a:	4904      	ldr	r1, [pc, #16]	; (80073ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800739c:	4804      	ldr	r0, [pc, #16]	; (80073b0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800739e:	f7ff fdd6 	bl	8006f4e <USBD_GetString>
  return USBD_StrDesc;
 80073a2:	4b02      	ldr	r3, [pc, #8]	; (80073ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3708      	adds	r7, #8
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}
 80073ac:	2000152c 	.word	0x2000152c
 80073b0:	08007dbc 	.word	0x08007dbc

080073b4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b082      	sub	sp, #8
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	4603      	mov	r3, r0
 80073bc:	6039      	str	r1, [r7, #0]
 80073be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	221a      	movs	r2, #26
 80073c4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80073c6:	f000 f843 	bl	8007450 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80073ca:	4b02      	ldr	r3, [pc, #8]	; (80073d4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3708      	adds	r7, #8
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}
 80073d4:	20000164 	.word	0x20000164

080073d8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b082      	sub	sp, #8
 80073dc:	af00      	add	r7, sp, #0
 80073de:	4603      	mov	r3, r0
 80073e0:	6039      	str	r1, [r7, #0]
 80073e2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80073e4:	79fb      	ldrb	r3, [r7, #7]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d105      	bne.n	80073f6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80073ea:	683a      	ldr	r2, [r7, #0]
 80073ec:	4907      	ldr	r1, [pc, #28]	; (800740c <USBD_FS_ConfigStrDescriptor+0x34>)
 80073ee:	4808      	ldr	r0, [pc, #32]	; (8007410 <USBD_FS_ConfigStrDescriptor+0x38>)
 80073f0:	f7ff fdad 	bl	8006f4e <USBD_GetString>
 80073f4:	e004      	b.n	8007400 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80073f6:	683a      	ldr	r2, [r7, #0]
 80073f8:	4904      	ldr	r1, [pc, #16]	; (800740c <USBD_FS_ConfigStrDescriptor+0x34>)
 80073fa:	4805      	ldr	r0, [pc, #20]	; (8007410 <USBD_FS_ConfigStrDescriptor+0x38>)
 80073fc:	f7ff fda7 	bl	8006f4e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007400:	4b02      	ldr	r3, [pc, #8]	; (800740c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007402:	4618      	mov	r0, r3
 8007404:	3708      	adds	r7, #8
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}
 800740a:	bf00      	nop
 800740c:	2000152c 	.word	0x2000152c
 8007410:	08007dd0 	.word	0x08007dd0

08007414 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b082      	sub	sp, #8
 8007418:	af00      	add	r7, sp, #0
 800741a:	4603      	mov	r3, r0
 800741c:	6039      	str	r1, [r7, #0]
 800741e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007420:	79fb      	ldrb	r3, [r7, #7]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d105      	bne.n	8007432 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007426:	683a      	ldr	r2, [r7, #0]
 8007428:	4907      	ldr	r1, [pc, #28]	; (8007448 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800742a:	4808      	ldr	r0, [pc, #32]	; (800744c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800742c:	f7ff fd8f 	bl	8006f4e <USBD_GetString>
 8007430:	e004      	b.n	800743c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007432:	683a      	ldr	r2, [r7, #0]
 8007434:	4904      	ldr	r1, [pc, #16]	; (8007448 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007436:	4805      	ldr	r0, [pc, #20]	; (800744c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007438:	f7ff fd89 	bl	8006f4e <USBD_GetString>
  }
  return USBD_StrDesc;
 800743c:	4b02      	ldr	r3, [pc, #8]	; (8007448 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800743e:	4618      	mov	r0, r3
 8007440:	3708      	adds	r7, #8
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
 8007446:	bf00      	nop
 8007448:	2000152c 	.word	0x2000152c
 800744c:	08007ddc 	.word	0x08007ddc

08007450 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007456:	4b0f      	ldr	r3, [pc, #60]	; (8007494 <Get_SerialNum+0x44>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800745c:	4b0e      	ldr	r3, [pc, #56]	; (8007498 <Get_SerialNum+0x48>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007462:	4b0e      	ldr	r3, [pc, #56]	; (800749c <Get_SerialNum+0x4c>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007468:	68fa      	ldr	r2, [r7, #12]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	4413      	add	r3, r2
 800746e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d009      	beq.n	800748a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007476:	2208      	movs	r2, #8
 8007478:	4909      	ldr	r1, [pc, #36]	; (80074a0 <Get_SerialNum+0x50>)
 800747a:	68f8      	ldr	r0, [r7, #12]
 800747c:	f000 f814 	bl	80074a8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007480:	2204      	movs	r2, #4
 8007482:	4908      	ldr	r1, [pc, #32]	; (80074a4 <Get_SerialNum+0x54>)
 8007484:	68b8      	ldr	r0, [r7, #8]
 8007486:	f000 f80f 	bl	80074a8 <IntToUnicode>
  }
}
 800748a:	bf00      	nop
 800748c:	3710      	adds	r7, #16
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
 8007492:	bf00      	nop
 8007494:	1fff7a10 	.word	0x1fff7a10
 8007498:	1fff7a14 	.word	0x1fff7a14
 800749c:	1fff7a18 	.word	0x1fff7a18
 80074a0:	20000166 	.word	0x20000166
 80074a4:	20000176 	.word	0x20000176

080074a8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b087      	sub	sp, #28
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	60f8      	str	r0, [r7, #12]
 80074b0:	60b9      	str	r1, [r7, #8]
 80074b2:	4613      	mov	r3, r2
 80074b4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80074b6:	2300      	movs	r3, #0
 80074b8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80074ba:	2300      	movs	r3, #0
 80074bc:	75fb      	strb	r3, [r7, #23]
 80074be:	e027      	b.n	8007510 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	0f1b      	lsrs	r3, r3, #28
 80074c4:	2b09      	cmp	r3, #9
 80074c6:	d80b      	bhi.n	80074e0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80074c8:	7dfb      	ldrb	r3, [r7, #23]
 80074ca:	005b      	lsls	r3, r3, #1
 80074cc:	461a      	mov	r2, r3
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	4413      	add	r3, r2
 80074d2:	68fa      	ldr	r2, [r7, #12]
 80074d4:	0f12      	lsrs	r2, r2, #28
 80074d6:	b2d2      	uxtb	r2, r2
 80074d8:	3230      	adds	r2, #48	; 0x30
 80074da:	b2d2      	uxtb	r2, r2
 80074dc:	701a      	strb	r2, [r3, #0]
 80074de:	e00a      	b.n	80074f6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80074e0:	7dfb      	ldrb	r3, [r7, #23]
 80074e2:	005b      	lsls	r3, r3, #1
 80074e4:	461a      	mov	r2, r3
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	4413      	add	r3, r2
 80074ea:	68fa      	ldr	r2, [r7, #12]
 80074ec:	0f12      	lsrs	r2, r2, #28
 80074ee:	b2d2      	uxtb	r2, r2
 80074f0:	3237      	adds	r2, #55	; 0x37
 80074f2:	b2d2      	uxtb	r2, r2
 80074f4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	011b      	lsls	r3, r3, #4
 80074fa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80074fc:	7dfb      	ldrb	r3, [r7, #23]
 80074fe:	005b      	lsls	r3, r3, #1
 8007500:	3301      	adds	r3, #1
 8007502:	68ba      	ldr	r2, [r7, #8]
 8007504:	4413      	add	r3, r2
 8007506:	2200      	movs	r2, #0
 8007508:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800750a:	7dfb      	ldrb	r3, [r7, #23]
 800750c:	3301      	adds	r3, #1
 800750e:	75fb      	strb	r3, [r7, #23]
 8007510:	7dfa      	ldrb	r2, [r7, #23]
 8007512:	79fb      	ldrb	r3, [r7, #7]
 8007514:	429a      	cmp	r2, r3
 8007516:	d3d3      	bcc.n	80074c0 <IntToUnicode+0x18>
  }
}
 8007518:	bf00      	nop
 800751a:	371c      	adds	r7, #28
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr

08007524 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b08a      	sub	sp, #40	; 0x28
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800752c:	f107 0314 	add.w	r3, r7, #20
 8007530:	2200      	movs	r2, #0
 8007532:	601a      	str	r2, [r3, #0]
 8007534:	605a      	str	r2, [r3, #4]
 8007536:	609a      	str	r2, [r3, #8]
 8007538:	60da      	str	r2, [r3, #12]
 800753a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007544:	d13a      	bne.n	80075bc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007546:	2300      	movs	r3, #0
 8007548:	613b      	str	r3, [r7, #16]
 800754a:	4a1e      	ldr	r2, [pc, #120]	; (80075c4 <HAL_PCD_MspInit+0xa0>)
 800754c:	4b1d      	ldr	r3, [pc, #116]	; (80075c4 <HAL_PCD_MspInit+0xa0>)
 800754e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007550:	f043 0301 	orr.w	r3, r3, #1
 8007554:	6313      	str	r3, [r2, #48]	; 0x30
 8007556:	4b1b      	ldr	r3, [pc, #108]	; (80075c4 <HAL_PCD_MspInit+0xa0>)
 8007558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800755a:	f003 0301 	and.w	r3, r3, #1
 800755e:	613b      	str	r3, [r7, #16]
 8007560:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007562:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007566:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007568:	2302      	movs	r3, #2
 800756a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800756c:	2300      	movs	r3, #0
 800756e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007570:	2303      	movs	r3, #3
 8007572:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007574:	230a      	movs	r3, #10
 8007576:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007578:	f107 0314 	add.w	r3, r7, #20
 800757c:	4619      	mov	r1, r3
 800757e:	4812      	ldr	r0, [pc, #72]	; (80075c8 <HAL_PCD_MspInit+0xa4>)
 8007580:	f7fa f8fe 	bl	8001780 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007584:	4a0f      	ldr	r2, [pc, #60]	; (80075c4 <HAL_PCD_MspInit+0xa0>)
 8007586:	4b0f      	ldr	r3, [pc, #60]	; (80075c4 <HAL_PCD_MspInit+0xa0>)
 8007588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800758a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800758e:	6353      	str	r3, [r2, #52]	; 0x34
 8007590:	2300      	movs	r3, #0
 8007592:	60fb      	str	r3, [r7, #12]
 8007594:	4a0b      	ldr	r2, [pc, #44]	; (80075c4 <HAL_PCD_MspInit+0xa0>)
 8007596:	4b0b      	ldr	r3, [pc, #44]	; (80075c4 <HAL_PCD_MspInit+0xa0>)
 8007598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800759a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800759e:	6453      	str	r3, [r2, #68]	; 0x44
 80075a0:	4b08      	ldr	r3, [pc, #32]	; (80075c4 <HAL_PCD_MspInit+0xa0>)
 80075a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075a8:	60fb      	str	r3, [r7, #12]
 80075aa:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80075ac:	2200      	movs	r2, #0
 80075ae:	2100      	movs	r1, #0
 80075b0:	2043      	movs	r0, #67	; 0x43
 80075b2:	f7fa f8ae 	bl	8001712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80075b6:	2043      	movs	r0, #67	; 0x43
 80075b8:	f7fa f8c7 	bl	800174a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80075bc:	bf00      	nop
 80075be:	3728      	adds	r7, #40	; 0x28
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}
 80075c4:	40023800 	.word	0x40023800
 80075c8:	40020000 	.word	0x40020000

080075cc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80075e0:	4619      	mov	r1, r3
 80075e2:	4610      	mov	r0, r2
 80075e4:	f7fe fd30 	bl	8006048 <USBD_LL_SetupStage>
}
 80075e8:	bf00      	nop
 80075ea:	3708      	adds	r7, #8
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b082      	sub	sp, #8
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	460b      	mov	r3, r1
 80075fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007602:	78fa      	ldrb	r2, [r7, #3]
 8007604:	6879      	ldr	r1, [r7, #4]
 8007606:	4613      	mov	r3, r2
 8007608:	00db      	lsls	r3, r3, #3
 800760a:	1a9b      	subs	r3, r3, r2
 800760c:	009b      	lsls	r3, r3, #2
 800760e:	440b      	add	r3, r1
 8007610:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	78fb      	ldrb	r3, [r7, #3]
 8007618:	4619      	mov	r1, r3
 800761a:	f7fe fd68 	bl	80060ee <USBD_LL_DataOutStage>
}
 800761e:	bf00      	nop
 8007620:	3708      	adds	r7, #8
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}

08007626 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007626:	b580      	push	{r7, lr}
 8007628:	b082      	sub	sp, #8
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
 800762e:	460b      	mov	r3, r1
 8007630:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007638:	78fa      	ldrb	r2, [r7, #3]
 800763a:	6879      	ldr	r1, [r7, #4]
 800763c:	4613      	mov	r3, r2
 800763e:	00db      	lsls	r3, r3, #3
 8007640:	1a9b      	subs	r3, r3, r2
 8007642:	009b      	lsls	r3, r3, #2
 8007644:	440b      	add	r3, r1
 8007646:	3348      	adds	r3, #72	; 0x48
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	78fb      	ldrb	r3, [r7, #3]
 800764c:	4619      	mov	r1, r3
 800764e:	f7fe fdb1 	bl	80061b4 <USBD_LL_DataInStage>
}
 8007652:	bf00      	nop
 8007654:	3708      	adds	r7, #8
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}

0800765a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800765a:	b580      	push	{r7, lr}
 800765c:	b082      	sub	sp, #8
 800765e:	af00      	add	r7, sp, #0
 8007660:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007668:	4618      	mov	r0, r3
 800766a:	f7fe feb5 	bl	80063d8 <USBD_LL_SOF>
}
 800766e:	bf00      	nop
 8007670:	3708      	adds	r7, #8
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}

08007676 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007676:	b580      	push	{r7, lr}
 8007678:	b084      	sub	sp, #16
 800767a:	af00      	add	r7, sp, #0
 800767c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800767e:	2301      	movs	r3, #1
 8007680:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	68db      	ldr	r3, [r3, #12]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d102      	bne.n	8007690 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800768a:	2300      	movs	r3, #0
 800768c:	73fb      	strb	r3, [r7, #15]
 800768e:	e008      	b.n	80076a2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	68db      	ldr	r3, [r3, #12]
 8007694:	2b02      	cmp	r3, #2
 8007696:	d102      	bne.n	800769e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007698:	2301      	movs	r3, #1
 800769a:	73fb      	strb	r3, [r7, #15]
 800769c:	e001      	b.n	80076a2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800769e:	f7f9 fdc5 	bl	800122c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80076a8:	7bfa      	ldrb	r2, [r7, #15]
 80076aa:	4611      	mov	r1, r2
 80076ac:	4618      	mov	r0, r3
 80076ae:	f7fe fe58 	bl	8006362 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80076b8:	4618      	mov	r0, r3
 80076ba:	f7fe fe11 	bl	80062e0 <USBD_LL_Reset>
}
 80076be:	bf00      	nop
 80076c0:	3710      	adds	r7, #16
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
	...

080076c8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b082      	sub	sp, #8
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80076d6:	4618      	mov	r0, r3
 80076d8:	f7fe fe53 	bl	8006382 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80076e4:	461a      	mov	r2, r3
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f043 0301 	orr.w	r3, r3, #1
 80076f4:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6a1b      	ldr	r3, [r3, #32]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d005      	beq.n	800770a <HAL_PCD_SuspendCallback+0x42>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80076fe:	4a05      	ldr	r2, [pc, #20]	; (8007714 <HAL_PCD_SuspendCallback+0x4c>)
 8007700:	4b04      	ldr	r3, [pc, #16]	; (8007714 <HAL_PCD_SuspendCallback+0x4c>)
 8007702:	691b      	ldr	r3, [r3, #16]
 8007704:	f043 0306 	orr.w	r3, r3, #6
 8007708:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800770a:	bf00      	nop
 800770c:	3708      	adds	r7, #8
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
 8007712:	bf00      	nop
 8007714:	e000ed00 	.word	0xe000ed00

08007718 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b082      	sub	sp, #8
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007726:	4618      	mov	r0, r3
 8007728:	f7fe fe40 	bl	80063ac <USBD_LL_Resume>
}
 800772c:	bf00      	nop
 800772e:	3708      	adds	r7, #8
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b082      	sub	sp, #8
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	460b      	mov	r3, r1
 800773e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007746:	78fa      	ldrb	r2, [r7, #3]
 8007748:	4611      	mov	r1, r2
 800774a:	4618      	mov	r0, r3
 800774c:	f7fe fe6b 	bl	8006426 <USBD_LL_IsoOUTIncomplete>
}
 8007750:	bf00      	nop
 8007752:	3708      	adds	r7, #8
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	460b      	mov	r3, r1
 8007762:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800776a:	78fa      	ldrb	r2, [r7, #3]
 800776c:	4611      	mov	r1, r2
 800776e:	4618      	mov	r0, r3
 8007770:	f7fe fe4c 	bl	800640c <USBD_LL_IsoINIncomplete>
}
 8007774:	bf00      	nop
 8007776:	3708      	adds	r7, #8
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}

0800777c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b082      	sub	sp, #8
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800778a:	4618      	mov	r0, r3
 800778c:	f7fe fe58 	bl	8006440 <USBD_LL_DevConnected>
}
 8007790:	bf00      	nop
 8007792:	3708      	adds	r7, #8
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b082      	sub	sp, #8
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80077a6:	4618      	mov	r0, r3
 80077a8:	f7fe fe55 	bl	8006456 <USBD_LL_DevDisconnected>
}
 80077ac:	bf00      	nop
 80077ae:	3708      	adds	r7, #8
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d13c      	bne.n	800783e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80077c4:	4a20      	ldr	r2, [pc, #128]	; (8007848 <USBD_LL_Init+0x94>)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	4a1e      	ldr	r2, [pc, #120]	; (8007848 <USBD_LL_Init+0x94>)
 80077d0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80077d4:	4b1c      	ldr	r3, [pc, #112]	; (8007848 <USBD_LL_Init+0x94>)
 80077d6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80077da:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80077dc:	4b1a      	ldr	r3, [pc, #104]	; (8007848 <USBD_LL_Init+0x94>)
 80077de:	2204      	movs	r2, #4
 80077e0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80077e2:	4b19      	ldr	r3, [pc, #100]	; (8007848 <USBD_LL_Init+0x94>)
 80077e4:	2202      	movs	r2, #2
 80077e6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80077e8:	4b17      	ldr	r3, [pc, #92]	; (8007848 <USBD_LL_Init+0x94>)
 80077ea:	2200      	movs	r2, #0
 80077ec:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80077ee:	4b16      	ldr	r3, [pc, #88]	; (8007848 <USBD_LL_Init+0x94>)
 80077f0:	2202      	movs	r2, #2
 80077f2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80077f4:	4b14      	ldr	r3, [pc, #80]	; (8007848 <USBD_LL_Init+0x94>)
 80077f6:	2200      	movs	r2, #0
 80077f8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80077fa:	4b13      	ldr	r3, [pc, #76]	; (8007848 <USBD_LL_Init+0x94>)
 80077fc:	2200      	movs	r2, #0
 80077fe:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007800:	4b11      	ldr	r3, [pc, #68]	; (8007848 <USBD_LL_Init+0x94>)
 8007802:	2200      	movs	r2, #0
 8007804:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007806:	4b10      	ldr	r3, [pc, #64]	; (8007848 <USBD_LL_Init+0x94>)
 8007808:	2200      	movs	r2, #0
 800780a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800780c:	4b0e      	ldr	r3, [pc, #56]	; (8007848 <USBD_LL_Init+0x94>)
 800780e:	2200      	movs	r2, #0
 8007810:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007812:	480d      	ldr	r0, [pc, #52]	; (8007848 <USBD_LL_Init+0x94>)
 8007814:	f7fa f94e 	bl	8001ab4 <HAL_PCD_Init>
 8007818:	4603      	mov	r3, r0
 800781a:	2b00      	cmp	r3, #0
 800781c:	d001      	beq.n	8007822 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800781e:	f7f9 fd05 	bl	800122c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007822:	2180      	movs	r1, #128	; 0x80
 8007824:	4808      	ldr	r0, [pc, #32]	; (8007848 <USBD_LL_Init+0x94>)
 8007826:	f7fb faba 	bl	8002d9e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800782a:	2240      	movs	r2, #64	; 0x40
 800782c:	2100      	movs	r1, #0
 800782e:	4806      	ldr	r0, [pc, #24]	; (8007848 <USBD_LL_Init+0x94>)
 8007830:	f7fb fa6e 	bl	8002d10 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007834:	2280      	movs	r2, #128	; 0x80
 8007836:	2101      	movs	r1, #1
 8007838:	4803      	ldr	r0, [pc, #12]	; (8007848 <USBD_LL_Init+0x94>)
 800783a:	f7fb fa69 	bl	8002d10 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800783e:	2300      	movs	r3, #0
}
 8007840:	4618      	mov	r0, r3
 8007842:	3708      	adds	r7, #8
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}
 8007848:	2000172c 	.word	0x2000172c

0800784c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b084      	sub	sp, #16
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007854:	2300      	movs	r3, #0
 8007856:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007858:	2300      	movs	r3, #0
 800785a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007862:	4618      	mov	r0, r3
 8007864:	f7fa fa43 	bl	8001cee <HAL_PCD_Start>
 8007868:	4603      	mov	r3, r0
 800786a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800786c:	7bfb      	ldrb	r3, [r7, #15]
 800786e:	4618      	mov	r0, r3
 8007870:	f000 f92a 	bl	8007ac8 <USBD_Get_USB_Status>
 8007874:	4603      	mov	r3, r0
 8007876:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007878:	7bbb      	ldrb	r3, [r7, #14]
}
 800787a:	4618      	mov	r0, r3
 800787c:	3710      	adds	r7, #16
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}

08007882 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007882:	b580      	push	{r7, lr}
 8007884:	b084      	sub	sp, #16
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
 800788a:	4608      	mov	r0, r1
 800788c:	4611      	mov	r1, r2
 800788e:	461a      	mov	r2, r3
 8007890:	4603      	mov	r3, r0
 8007892:	70fb      	strb	r3, [r7, #3]
 8007894:	460b      	mov	r3, r1
 8007896:	70bb      	strb	r3, [r7, #2]
 8007898:	4613      	mov	r3, r2
 800789a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800789c:	2300      	movs	r3, #0
 800789e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078a0:	2300      	movs	r3, #0
 80078a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80078aa:	78bb      	ldrb	r3, [r7, #2]
 80078ac:	883a      	ldrh	r2, [r7, #0]
 80078ae:	78f9      	ldrb	r1, [r7, #3]
 80078b0:	f7fa fe34 	bl	800251c <HAL_PCD_EP_Open>
 80078b4:	4603      	mov	r3, r0
 80078b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078b8:	7bfb      	ldrb	r3, [r7, #15]
 80078ba:	4618      	mov	r0, r3
 80078bc:	f000 f904 	bl	8007ac8 <USBD_Get_USB_Status>
 80078c0:	4603      	mov	r3, r0
 80078c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3710      	adds	r7, #16
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}

080078ce <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80078ce:	b580      	push	{r7, lr}
 80078d0:	b084      	sub	sp, #16
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
 80078d6:	460b      	mov	r3, r1
 80078d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078da:	2300      	movs	r3, #0
 80078dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078de:	2300      	movs	r3, #0
 80078e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80078e8:	78fa      	ldrb	r2, [r7, #3]
 80078ea:	4611      	mov	r1, r2
 80078ec:	4618      	mov	r0, r3
 80078ee:	f7fa fe7d 	bl	80025ec <HAL_PCD_EP_Close>
 80078f2:	4603      	mov	r3, r0
 80078f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078f6:	7bfb      	ldrb	r3, [r7, #15]
 80078f8:	4618      	mov	r0, r3
 80078fa:	f000 f8e5 	bl	8007ac8 <USBD_Get_USB_Status>
 80078fe:	4603      	mov	r3, r0
 8007900:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007902:	7bbb      	ldrb	r3, [r7, #14]
}
 8007904:	4618      	mov	r0, r3
 8007906:	3710      	adds	r7, #16
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}

0800790c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b084      	sub	sp, #16
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	460b      	mov	r3, r1
 8007916:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007918:	2300      	movs	r3, #0
 800791a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800791c:	2300      	movs	r3, #0
 800791e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007926:	78fa      	ldrb	r2, [r7, #3]
 8007928:	4611      	mov	r1, r2
 800792a:	4618      	mov	r0, r3
 800792c:	f7fa ff55 	bl	80027da <HAL_PCD_EP_SetStall>
 8007930:	4603      	mov	r3, r0
 8007932:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007934:	7bfb      	ldrb	r3, [r7, #15]
 8007936:	4618      	mov	r0, r3
 8007938:	f000 f8c6 	bl	8007ac8 <USBD_Get_USB_Status>
 800793c:	4603      	mov	r3, r0
 800793e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007940:	7bbb      	ldrb	r3, [r7, #14]
}
 8007942:	4618      	mov	r0, r3
 8007944:	3710      	adds	r7, #16
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}

0800794a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800794a:	b580      	push	{r7, lr}
 800794c:	b084      	sub	sp, #16
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
 8007952:	460b      	mov	r3, r1
 8007954:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007956:	2300      	movs	r3, #0
 8007958:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800795a:	2300      	movs	r3, #0
 800795c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007964:	78fa      	ldrb	r2, [r7, #3]
 8007966:	4611      	mov	r1, r2
 8007968:	4618      	mov	r0, r3
 800796a:	f7fa ff9a 	bl	80028a2 <HAL_PCD_EP_ClrStall>
 800796e:	4603      	mov	r3, r0
 8007970:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007972:	7bfb      	ldrb	r3, [r7, #15]
 8007974:	4618      	mov	r0, r3
 8007976:	f000 f8a7 	bl	8007ac8 <USBD_Get_USB_Status>
 800797a:	4603      	mov	r3, r0
 800797c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800797e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007980:	4618      	mov	r0, r3
 8007982:	3710      	adds	r7, #16
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}

08007988 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007988:	b480      	push	{r7}
 800798a:	b085      	sub	sp, #20
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	460b      	mov	r3, r1
 8007992:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800799a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800799c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	da0b      	bge.n	80079bc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80079a4:	78fb      	ldrb	r3, [r7, #3]
 80079a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079aa:	68f9      	ldr	r1, [r7, #12]
 80079ac:	4613      	mov	r3, r2
 80079ae:	00db      	lsls	r3, r3, #3
 80079b0:	1a9b      	subs	r3, r3, r2
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	440b      	add	r3, r1
 80079b6:	333e      	adds	r3, #62	; 0x3e
 80079b8:	781b      	ldrb	r3, [r3, #0]
 80079ba:	e00b      	b.n	80079d4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80079bc:	78fb      	ldrb	r3, [r7, #3]
 80079be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079c2:	68f9      	ldr	r1, [r7, #12]
 80079c4:	4613      	mov	r3, r2
 80079c6:	00db      	lsls	r3, r3, #3
 80079c8:	1a9b      	subs	r3, r3, r2
 80079ca:	009b      	lsls	r3, r3, #2
 80079cc:	440b      	add	r3, r1
 80079ce:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80079d2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3714      	adds	r7, #20
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr

080079e0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	460b      	mov	r3, r1
 80079ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079ec:	2300      	movs	r3, #0
 80079ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079f0:	2300      	movs	r3, #0
 80079f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80079fa:	78fa      	ldrb	r2, [r7, #3]
 80079fc:	4611      	mov	r1, r2
 80079fe:	4618      	mov	r0, r3
 8007a00:	f7fa fd67 	bl	80024d2 <HAL_PCD_SetAddress>
 8007a04:	4603      	mov	r3, r0
 8007a06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a08:	7bfb      	ldrb	r3, [r7, #15]
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f000 f85c 	bl	8007ac8 <USBD_Get_USB_Status>
 8007a10:	4603      	mov	r3, r0
 8007a12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a14:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3710      	adds	r7, #16
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}

08007a1e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007a1e:	b580      	push	{r7, lr}
 8007a20:	b086      	sub	sp, #24
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	60f8      	str	r0, [r7, #12]
 8007a26:	607a      	str	r2, [r7, #4]
 8007a28:	603b      	str	r3, [r7, #0]
 8007a2a:	460b      	mov	r3, r1
 8007a2c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a32:	2300      	movs	r3, #0
 8007a34:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007a3c:	7af9      	ldrb	r1, [r7, #11]
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	687a      	ldr	r2, [r7, #4]
 8007a42:	f7fa fe80 	bl	8002746 <HAL_PCD_EP_Transmit>
 8007a46:	4603      	mov	r3, r0
 8007a48:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a4a:	7dfb      	ldrb	r3, [r7, #23]
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f000 f83b 	bl	8007ac8 <USBD_Get_USB_Status>
 8007a52:	4603      	mov	r3, r0
 8007a54:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007a56:	7dbb      	ldrb	r3, [r7, #22]
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3718      	adds	r7, #24
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}

08007a60 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b086      	sub	sp, #24
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	60f8      	str	r0, [r7, #12]
 8007a68:	607a      	str	r2, [r7, #4]
 8007a6a:	603b      	str	r3, [r7, #0]
 8007a6c:	460b      	mov	r3, r1
 8007a6e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a70:	2300      	movs	r3, #0
 8007a72:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a74:	2300      	movs	r3, #0
 8007a76:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007a7e:	7af9      	ldrb	r1, [r7, #11]
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	f7fa fdfc 	bl	8002680 <HAL_PCD_EP_Receive>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a8c:	7dfb      	ldrb	r3, [r7, #23]
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f000 f81a 	bl	8007ac8 <USBD_Get_USB_Status>
 8007a94:	4603      	mov	r3, r0
 8007a96:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007a98:	7dbb      	ldrb	r3, [r7, #22]
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3718      	adds	r7, #24
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}

08007aa2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007aa2:	b580      	push	{r7, lr}
 8007aa4:	b082      	sub	sp, #8
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	6078      	str	r0, [r7, #4]
 8007aaa:	460b      	mov	r3, r1
 8007aac:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007ab4:	78fa      	ldrb	r2, [r7, #3]
 8007ab6:	4611      	mov	r1, r2
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f7fa fe2c 	bl	8002716 <HAL_PCD_EP_GetRxCount>
 8007abe:	4603      	mov	r3, r0
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3708      	adds	r7, #8
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b085      	sub	sp, #20
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	4603      	mov	r3, r0
 8007ad0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007ad6:	79fb      	ldrb	r3, [r7, #7]
 8007ad8:	2b03      	cmp	r3, #3
 8007ada:	d817      	bhi.n	8007b0c <USBD_Get_USB_Status+0x44>
 8007adc:	a201      	add	r2, pc, #4	; (adr r2, 8007ae4 <USBD_Get_USB_Status+0x1c>)
 8007ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ae2:	bf00      	nop
 8007ae4:	08007af5 	.word	0x08007af5
 8007ae8:	08007afb 	.word	0x08007afb
 8007aec:	08007b01 	.word	0x08007b01
 8007af0:	08007b07 	.word	0x08007b07
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007af4:	2300      	movs	r3, #0
 8007af6:	73fb      	strb	r3, [r7, #15]
    break;
 8007af8:	e00b      	b.n	8007b12 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007afa:	2303      	movs	r3, #3
 8007afc:	73fb      	strb	r3, [r7, #15]
    break;
 8007afe:	e008      	b.n	8007b12 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007b00:	2301      	movs	r3, #1
 8007b02:	73fb      	strb	r3, [r7, #15]
    break;
 8007b04:	e005      	b.n	8007b12 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007b06:	2303      	movs	r3, #3
 8007b08:	73fb      	strb	r3, [r7, #15]
    break;
 8007b0a:	e002      	b.n	8007b12 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007b0c:	2303      	movs	r3, #3
 8007b0e:	73fb      	strb	r3, [r7, #15]
    break;
 8007b10:	bf00      	nop
  }
  return usb_status;
 8007b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3714      	adds	r7, #20
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr

08007b20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8007b20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007b58 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007b24:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007b26:	e003      	b.n	8007b30 <LoopCopyDataInit>

08007b28 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007b28:	4b0c      	ldr	r3, [pc, #48]	; (8007b5c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007b2a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007b2c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007b2e:	3104      	adds	r1, #4

08007b30 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007b30:	480b      	ldr	r0, [pc, #44]	; (8007b60 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007b32:	4b0c      	ldr	r3, [pc, #48]	; (8007b64 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007b34:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007b36:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007b38:	d3f6      	bcc.n	8007b28 <CopyDataInit>
  ldr  r2, =_sbss
 8007b3a:	4a0b      	ldr	r2, [pc, #44]	; (8007b68 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007b3c:	e002      	b.n	8007b44 <LoopFillZerobss>

08007b3e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007b3e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007b40:	f842 3b04 	str.w	r3, [r2], #4

08007b44 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007b44:	4b09      	ldr	r3, [pc, #36]	; (8007b6c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007b46:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007b48:	d3f9      	bcc.n	8007b3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007b4a:	f7f9 fc5f 	bl	800140c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007b4e:	f000 f817 	bl	8007b80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007b52:	f7f9 f8bd 	bl	8000cd0 <main>
  bx  lr    
 8007b56:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8007b58:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8007b5c:	08007e10 	.word	0x08007e10
  ldr  r0, =_sdata
 8007b60:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007b64:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8007b68:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8007b6c:	20001b38 	.word	0x20001b38

08007b70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007b70:	e7fe      	b.n	8007b70 <ADC_IRQHandler>
	...

08007b74 <__errno>:
 8007b74:	4b01      	ldr	r3, [pc, #4]	; (8007b7c <__errno+0x8>)
 8007b76:	6818      	ldr	r0, [r3, #0]
 8007b78:	4770      	bx	lr
 8007b7a:	bf00      	nop
 8007b7c:	20000180 	.word	0x20000180

08007b80 <__libc_init_array>:
 8007b80:	b570      	push	{r4, r5, r6, lr}
 8007b82:	4e0d      	ldr	r6, [pc, #52]	; (8007bb8 <__libc_init_array+0x38>)
 8007b84:	4c0d      	ldr	r4, [pc, #52]	; (8007bbc <__libc_init_array+0x3c>)
 8007b86:	1ba4      	subs	r4, r4, r6
 8007b88:	10a4      	asrs	r4, r4, #2
 8007b8a:	2500      	movs	r5, #0
 8007b8c:	42a5      	cmp	r5, r4
 8007b8e:	d109      	bne.n	8007ba4 <__libc_init_array+0x24>
 8007b90:	4e0b      	ldr	r6, [pc, #44]	; (8007bc0 <__libc_init_array+0x40>)
 8007b92:	4c0c      	ldr	r4, [pc, #48]	; (8007bc4 <__libc_init_array+0x44>)
 8007b94:	f000 f8fa 	bl	8007d8c <_init>
 8007b98:	1ba4      	subs	r4, r4, r6
 8007b9a:	10a4      	asrs	r4, r4, #2
 8007b9c:	2500      	movs	r5, #0
 8007b9e:	42a5      	cmp	r5, r4
 8007ba0:	d105      	bne.n	8007bae <__libc_init_array+0x2e>
 8007ba2:	bd70      	pop	{r4, r5, r6, pc}
 8007ba4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007ba8:	4798      	blx	r3
 8007baa:	3501      	adds	r5, #1
 8007bac:	e7ee      	b.n	8007b8c <__libc_init_array+0xc>
 8007bae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007bb2:	4798      	blx	r3
 8007bb4:	3501      	adds	r5, #1
 8007bb6:	e7f2      	b.n	8007b9e <__libc_init_array+0x1e>
 8007bb8:	08007e08 	.word	0x08007e08
 8007bbc:	08007e08 	.word	0x08007e08
 8007bc0:	08007e08 	.word	0x08007e08
 8007bc4:	08007e0c 	.word	0x08007e0c

08007bc8 <malloc>:
 8007bc8:	4b02      	ldr	r3, [pc, #8]	; (8007bd4 <malloc+0xc>)
 8007bca:	4601      	mov	r1, r0
 8007bcc:	6818      	ldr	r0, [r3, #0]
 8007bce:	f000 b86d 	b.w	8007cac <_malloc_r>
 8007bd2:	bf00      	nop
 8007bd4:	20000180 	.word	0x20000180

08007bd8 <free>:
 8007bd8:	4b02      	ldr	r3, [pc, #8]	; (8007be4 <free+0xc>)
 8007bda:	4601      	mov	r1, r0
 8007bdc:	6818      	ldr	r0, [r3, #0]
 8007bde:	f000 b817 	b.w	8007c10 <_free_r>
 8007be2:	bf00      	nop
 8007be4:	20000180 	.word	0x20000180

08007be8 <memcpy>:
 8007be8:	b510      	push	{r4, lr}
 8007bea:	1e43      	subs	r3, r0, #1
 8007bec:	440a      	add	r2, r1
 8007bee:	4291      	cmp	r1, r2
 8007bf0:	d100      	bne.n	8007bf4 <memcpy+0xc>
 8007bf2:	bd10      	pop	{r4, pc}
 8007bf4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007bf8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007bfc:	e7f7      	b.n	8007bee <memcpy+0x6>

08007bfe <memset>:
 8007bfe:	4402      	add	r2, r0
 8007c00:	4603      	mov	r3, r0
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d100      	bne.n	8007c08 <memset+0xa>
 8007c06:	4770      	bx	lr
 8007c08:	f803 1b01 	strb.w	r1, [r3], #1
 8007c0c:	e7f9      	b.n	8007c02 <memset+0x4>
	...

08007c10 <_free_r>:
 8007c10:	b538      	push	{r3, r4, r5, lr}
 8007c12:	4605      	mov	r5, r0
 8007c14:	2900      	cmp	r1, #0
 8007c16:	d045      	beq.n	8007ca4 <_free_r+0x94>
 8007c18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c1c:	1f0c      	subs	r4, r1, #4
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	bfb8      	it	lt
 8007c22:	18e4      	addlt	r4, r4, r3
 8007c24:	f000 f8b0 	bl	8007d88 <__malloc_lock>
 8007c28:	4a1f      	ldr	r2, [pc, #124]	; (8007ca8 <_free_r+0x98>)
 8007c2a:	6813      	ldr	r3, [r2, #0]
 8007c2c:	4610      	mov	r0, r2
 8007c2e:	b933      	cbnz	r3, 8007c3e <_free_r+0x2e>
 8007c30:	6063      	str	r3, [r4, #4]
 8007c32:	6014      	str	r4, [r2, #0]
 8007c34:	4628      	mov	r0, r5
 8007c36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c3a:	f000 b8a6 	b.w	8007d8a <__malloc_unlock>
 8007c3e:	42a3      	cmp	r3, r4
 8007c40:	d90c      	bls.n	8007c5c <_free_r+0x4c>
 8007c42:	6821      	ldr	r1, [r4, #0]
 8007c44:	1862      	adds	r2, r4, r1
 8007c46:	4293      	cmp	r3, r2
 8007c48:	bf04      	itt	eq
 8007c4a:	681a      	ldreq	r2, [r3, #0]
 8007c4c:	685b      	ldreq	r3, [r3, #4]
 8007c4e:	6063      	str	r3, [r4, #4]
 8007c50:	bf04      	itt	eq
 8007c52:	1852      	addeq	r2, r2, r1
 8007c54:	6022      	streq	r2, [r4, #0]
 8007c56:	6004      	str	r4, [r0, #0]
 8007c58:	e7ec      	b.n	8007c34 <_free_r+0x24>
 8007c5a:	4613      	mov	r3, r2
 8007c5c:	685a      	ldr	r2, [r3, #4]
 8007c5e:	b10a      	cbz	r2, 8007c64 <_free_r+0x54>
 8007c60:	42a2      	cmp	r2, r4
 8007c62:	d9fa      	bls.n	8007c5a <_free_r+0x4a>
 8007c64:	6819      	ldr	r1, [r3, #0]
 8007c66:	1858      	adds	r0, r3, r1
 8007c68:	42a0      	cmp	r0, r4
 8007c6a:	d10b      	bne.n	8007c84 <_free_r+0x74>
 8007c6c:	6820      	ldr	r0, [r4, #0]
 8007c6e:	4401      	add	r1, r0
 8007c70:	1858      	adds	r0, r3, r1
 8007c72:	4282      	cmp	r2, r0
 8007c74:	6019      	str	r1, [r3, #0]
 8007c76:	d1dd      	bne.n	8007c34 <_free_r+0x24>
 8007c78:	6810      	ldr	r0, [r2, #0]
 8007c7a:	6852      	ldr	r2, [r2, #4]
 8007c7c:	605a      	str	r2, [r3, #4]
 8007c7e:	4401      	add	r1, r0
 8007c80:	6019      	str	r1, [r3, #0]
 8007c82:	e7d7      	b.n	8007c34 <_free_r+0x24>
 8007c84:	d902      	bls.n	8007c8c <_free_r+0x7c>
 8007c86:	230c      	movs	r3, #12
 8007c88:	602b      	str	r3, [r5, #0]
 8007c8a:	e7d3      	b.n	8007c34 <_free_r+0x24>
 8007c8c:	6820      	ldr	r0, [r4, #0]
 8007c8e:	1821      	adds	r1, r4, r0
 8007c90:	428a      	cmp	r2, r1
 8007c92:	bf04      	itt	eq
 8007c94:	6811      	ldreq	r1, [r2, #0]
 8007c96:	6852      	ldreq	r2, [r2, #4]
 8007c98:	6062      	str	r2, [r4, #4]
 8007c9a:	bf04      	itt	eq
 8007c9c:	1809      	addeq	r1, r1, r0
 8007c9e:	6021      	streq	r1, [r4, #0]
 8007ca0:	605c      	str	r4, [r3, #4]
 8007ca2:	e7c7      	b.n	8007c34 <_free_r+0x24>
 8007ca4:	bd38      	pop	{r3, r4, r5, pc}
 8007ca6:	bf00      	nop
 8007ca8:	20000208 	.word	0x20000208

08007cac <_malloc_r>:
 8007cac:	b570      	push	{r4, r5, r6, lr}
 8007cae:	1ccd      	adds	r5, r1, #3
 8007cb0:	f025 0503 	bic.w	r5, r5, #3
 8007cb4:	3508      	adds	r5, #8
 8007cb6:	2d0c      	cmp	r5, #12
 8007cb8:	bf38      	it	cc
 8007cba:	250c      	movcc	r5, #12
 8007cbc:	2d00      	cmp	r5, #0
 8007cbe:	4606      	mov	r6, r0
 8007cc0:	db01      	blt.n	8007cc6 <_malloc_r+0x1a>
 8007cc2:	42a9      	cmp	r1, r5
 8007cc4:	d903      	bls.n	8007cce <_malloc_r+0x22>
 8007cc6:	230c      	movs	r3, #12
 8007cc8:	6033      	str	r3, [r6, #0]
 8007cca:	2000      	movs	r0, #0
 8007ccc:	bd70      	pop	{r4, r5, r6, pc}
 8007cce:	f000 f85b 	bl	8007d88 <__malloc_lock>
 8007cd2:	4a23      	ldr	r2, [pc, #140]	; (8007d60 <_malloc_r+0xb4>)
 8007cd4:	6814      	ldr	r4, [r2, #0]
 8007cd6:	4621      	mov	r1, r4
 8007cd8:	b991      	cbnz	r1, 8007d00 <_malloc_r+0x54>
 8007cda:	4c22      	ldr	r4, [pc, #136]	; (8007d64 <_malloc_r+0xb8>)
 8007cdc:	6823      	ldr	r3, [r4, #0]
 8007cde:	b91b      	cbnz	r3, 8007ce8 <_malloc_r+0x3c>
 8007ce0:	4630      	mov	r0, r6
 8007ce2:	f000 f841 	bl	8007d68 <_sbrk_r>
 8007ce6:	6020      	str	r0, [r4, #0]
 8007ce8:	4629      	mov	r1, r5
 8007cea:	4630      	mov	r0, r6
 8007cec:	f000 f83c 	bl	8007d68 <_sbrk_r>
 8007cf0:	1c43      	adds	r3, r0, #1
 8007cf2:	d126      	bne.n	8007d42 <_malloc_r+0x96>
 8007cf4:	230c      	movs	r3, #12
 8007cf6:	6033      	str	r3, [r6, #0]
 8007cf8:	4630      	mov	r0, r6
 8007cfa:	f000 f846 	bl	8007d8a <__malloc_unlock>
 8007cfe:	e7e4      	b.n	8007cca <_malloc_r+0x1e>
 8007d00:	680b      	ldr	r3, [r1, #0]
 8007d02:	1b5b      	subs	r3, r3, r5
 8007d04:	d41a      	bmi.n	8007d3c <_malloc_r+0x90>
 8007d06:	2b0b      	cmp	r3, #11
 8007d08:	d90f      	bls.n	8007d2a <_malloc_r+0x7e>
 8007d0a:	600b      	str	r3, [r1, #0]
 8007d0c:	50cd      	str	r5, [r1, r3]
 8007d0e:	18cc      	adds	r4, r1, r3
 8007d10:	4630      	mov	r0, r6
 8007d12:	f000 f83a 	bl	8007d8a <__malloc_unlock>
 8007d16:	f104 000b 	add.w	r0, r4, #11
 8007d1a:	1d23      	adds	r3, r4, #4
 8007d1c:	f020 0007 	bic.w	r0, r0, #7
 8007d20:	1ac3      	subs	r3, r0, r3
 8007d22:	d01b      	beq.n	8007d5c <_malloc_r+0xb0>
 8007d24:	425a      	negs	r2, r3
 8007d26:	50e2      	str	r2, [r4, r3]
 8007d28:	bd70      	pop	{r4, r5, r6, pc}
 8007d2a:	428c      	cmp	r4, r1
 8007d2c:	bf0d      	iteet	eq
 8007d2e:	6863      	ldreq	r3, [r4, #4]
 8007d30:	684b      	ldrne	r3, [r1, #4]
 8007d32:	6063      	strne	r3, [r4, #4]
 8007d34:	6013      	streq	r3, [r2, #0]
 8007d36:	bf18      	it	ne
 8007d38:	460c      	movne	r4, r1
 8007d3a:	e7e9      	b.n	8007d10 <_malloc_r+0x64>
 8007d3c:	460c      	mov	r4, r1
 8007d3e:	6849      	ldr	r1, [r1, #4]
 8007d40:	e7ca      	b.n	8007cd8 <_malloc_r+0x2c>
 8007d42:	1cc4      	adds	r4, r0, #3
 8007d44:	f024 0403 	bic.w	r4, r4, #3
 8007d48:	42a0      	cmp	r0, r4
 8007d4a:	d005      	beq.n	8007d58 <_malloc_r+0xac>
 8007d4c:	1a21      	subs	r1, r4, r0
 8007d4e:	4630      	mov	r0, r6
 8007d50:	f000 f80a 	bl	8007d68 <_sbrk_r>
 8007d54:	3001      	adds	r0, #1
 8007d56:	d0cd      	beq.n	8007cf4 <_malloc_r+0x48>
 8007d58:	6025      	str	r5, [r4, #0]
 8007d5a:	e7d9      	b.n	8007d10 <_malloc_r+0x64>
 8007d5c:	bd70      	pop	{r4, r5, r6, pc}
 8007d5e:	bf00      	nop
 8007d60:	20000208 	.word	0x20000208
 8007d64:	2000020c 	.word	0x2000020c

08007d68 <_sbrk_r>:
 8007d68:	b538      	push	{r3, r4, r5, lr}
 8007d6a:	4c06      	ldr	r4, [pc, #24]	; (8007d84 <_sbrk_r+0x1c>)
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	4605      	mov	r5, r0
 8007d70:	4608      	mov	r0, r1
 8007d72:	6023      	str	r3, [r4, #0]
 8007d74:	f7f9 fb1e 	bl	80013b4 <_sbrk>
 8007d78:	1c43      	adds	r3, r0, #1
 8007d7a:	d102      	bne.n	8007d82 <_sbrk_r+0x1a>
 8007d7c:	6823      	ldr	r3, [r4, #0]
 8007d7e:	b103      	cbz	r3, 8007d82 <_sbrk_r+0x1a>
 8007d80:	602b      	str	r3, [r5, #0]
 8007d82:	bd38      	pop	{r3, r4, r5, pc}
 8007d84:	20001b34 	.word	0x20001b34

08007d88 <__malloc_lock>:
 8007d88:	4770      	bx	lr

08007d8a <__malloc_unlock>:
 8007d8a:	4770      	bx	lr

08007d8c <_init>:
 8007d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d8e:	bf00      	nop
 8007d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d92:	bc08      	pop	{r3}
 8007d94:	469e      	mov	lr, r3
 8007d96:	4770      	bx	lr

08007d98 <_fini>:
 8007d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d9a:	bf00      	nop
 8007d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d9e:	bc08      	pop	{r3}
 8007da0:	469e      	mov	lr, r3
 8007da2:	4770      	bx	lr
